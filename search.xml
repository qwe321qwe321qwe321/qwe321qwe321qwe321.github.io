<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity AnimationCurve with Easing Functions</title>
      <link href="/2020/11/22/Unity-AnimationCurve-with-Easing-Functions/"/>
      <url>/2020/11/22/Unity-AnimationCurve-with-Easing-Functions/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為專案需求，我需要用Unity在runtime生成一個particle system，並且一些curve參數的曲線需要套用easing function的曲線。</p><p>而Unity的曲線一律都是AnimationCurve，但goo了一下也沒找到有人做過Easing AnimationCurve，大概都只有硬拆N個sample點直接當AnimationCurve的keyframe這種暴力解。我不喜歡這種方法，理由其一他的使用效能絕對比較爛，再來是結果的形狀也不見得足夠接近。</p><p>理論上應該可以找到盡可能小的keyframe數量來建構EasingFunction的方法，所以就有了這次的嘗試。</p><a id="more"></a><h2 id="準備環境"><a href="#準備環境" class="headerlink" title="準備環境"></a>準備環境</h2><ul><li>Unity2019.4.12f1 LTS</li><li>在Unity能直接使用的EasingFunction類別 <a href="https://gist.github.com/cjddmut/d789b9eb78216998e95c" target="_blank" rel="noopener">EasingFunction.cs</a> by cjddmut</li></ul><h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><p>首先我們都知道AnimationCurve的實作就是<a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve" target="_blank" rel="noopener">Cubic Bezier Curve</a><br><img src="/images/bezier.png" alt="Cubic Bezier Curve from wiki"></p><p>所以大方向就是要找方法把Easing Function轉成Bezier Curve的表示法，這方面有很多現成的實作方法與函式庫。</p><p>但是AnimationCurve的參數是如何對應到Bezier Curve的，Unity Document沒有給出很明確的解釋。</p><p>因此第二步是把BezierCurve轉回AnimationCurve。</p><p>然後就大功告成。</p><h1 id="Easing-Function-to-Bezier-Curve"><a href="#Easing-Function-to-Bezier-Curve" class="headerlink" title="Easing Function to Bezier Curve"></a>Easing Function to Bezier Curve</h1><p>這裡我翻到了一篇2016的paper <a href="https://www.researchgate.net/publication/308007569_Easing_Functions_in_the_New_Form_Based_on_Bezier_Curves" target="_blank" rel="noopener">Easing Functions in the New Form Based on Bézier Curves</a> by Dariusz Sawicki<br>他直接提供了所有Easing function以Cubic Bezier來表達的各個係數項與算出來的平方差，完美地解決了我的需求。</p><p>但是，我使用的<code>EasingFunction.cs</code>有額外寫了個<code>Spring</code>函數，它不是典型的EasingFunction所以沒有在paper中出現。而我強迫症發作，覺得這個函數必須要一起支援轉換成AnimationCurve才對。</p><p>所以還是回歸初心，找一些Bezier Curve Approximation的方法或函式庫來使用。<br>最後翻到這篇</p><blockquote><p><a href="https://stackoverflow.com/questions/5525665/smoothing-a-hand-drawn-curve" target="_blank" rel="noopener">https://stackoverflow.com/questions/5525665/smoothing-a-hand-drawn-curve</a></p></blockquote><p>解答者很好心地給了一個<em>quick and dirty C# port of FitCurves</em>的source code，那就直接拿來用囉。</p><p>應用就只是在指定的function先暴力sample N個點，然後套這個fitting function來得到Bezier的係數。效果還不錯，但還是paper給的係數比較整齊乾淨，所以最後我也只在spring function上使用這套方法得到的係數。</p><h1 id="Bezier-Curve-to-AnimationCurve"><a href="#Bezier-Curve-to-AnimationCurve" class="headerlink" title="Bezier Curve to AnimationCurve"></a>Bezier Curve to AnimationCurve</h1><p>這部分網路上稍微有一點討論度，因為Unity Documentation真的寫得很模糊。<br>我直接給整理吸收完的結論:</p><ul><li>AnimationCurve上的點稱為Keyframe，代表bezier curve中的p0或p3</li><li>Keyframe的inTangent, outTangent屬性代表它in(left)和out(right)的斜率，所以它會影響bezier中的p1和p2</li><li>Keyframe中的inWeight, outWeight屬性代表p1-p0或p3-p2的長度(length or magnitude)除以他們的x距離(p3.x - p1.x)</li><li>然後注意inWeight和outWeight需要仰賴<code>weightedMode</code>屬性為<code>Both</code>才會被考慮，否則預設情況<code>WeightedMode.None</code>的情形會使兩個值都固定為0.33333333f(預設p1, p2分別在1/3, 2/3的位置)</li><li>所以p0 = Keyframe0<ul><li>p1 = Keyframe0’s $outTangent * outWeight * length(Keyframe0.x - Keyframe1.x)$</li><li>p2 = Keyframe1’s $outTangent * outWeight * length(Keyframe0.x - Keyframe1.x)$</li><li>p3 = Keyframe1</li></ul></li></ul><p>圖示:<br><img src="/images/bezier_1.png" alt="Cubic Bezier Curve to AnimationCurve"></p><p>所以重點就只是把p1p2轉成正確的Tangent和Weight即可。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://answers.unity.com/questions/623318/how-to-convert-cubic-bezier-curve-into-animationcu.html" target="_blank" rel="noopener">https://answers.unity.com/questions/623318/how-to-convert-cubic-bezier-curve-into-animationcu.html</a></li><li><a href="https://answers.unity.com/questions/464782/t-is-the-math-behind-animationcurveevaluate.html?_ga=2.199800430.1917493740.1605667091-254103663.1587534286" target="_blank" rel="noopener">https://answers.unity.com/questions/464782/t-is-the-math-behind-animationcurveevaluate.html?_ga=2.199800430.1917493740.1605667091-254103663.1587534286</a></li><li><a href="https://docs.unity3d.com/ScriptReference/Keyframe.html" target="_blank" rel="noopener">https://docs.unity3d.com/ScriptReference/Keyframe.html</a></li><li><a href="https://answers.unity.com/questions/7682/how-can-i-set-the-tangents-of-keyframes-in-an-anim.html" target="_blank" rel="noopener">https://answers.unity.com/questions/7682/how-can-i-set-the-tangents-of-keyframes-in-an-anim.html</a></li></ul><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>成果我挺滿意的，Keyframe數量落於2~9之間，相比於暴力法用了100個keyframe才能到達差不多的效果。</p><p>這裡就隨便挑幾個產出來的AnimationCurve來看看成果:</p><table><thead><tr><th>EaseInOutBounce: 9 keyframes</th><th>EaseInExpo: 2 keyframes</th></tr></thead><tbody><tr><td><img src="/images/EaseInOutBounce.png" alt=""></td><td><img src="/images/EaseInExpo.png" alt=""></td></tr></tbody></table><table><thead><tr><th>EaseInOutCubic: 3 keyframes</th><th>EaseInOutElastic: 9 keyframes</th></tr></thead><tbody><tr><td><img src="/images/EaseInOutCubic.png" alt=""></td><td><img src="/images/EaseInOutElastic.png" alt=""></td></tr></tbody></table><p>透過移動position來比較一下直接用EasingFunction的效果(GREEN)和AnimationCurve的效果(RED):</p><p><img src="/images/EasingAnimationCurve_overview.gif" alt=""></p><p>效果蠻好的，<strong>唯獨Elastic系列的誤差偏大至肉眼可見</strong>。</p><p>這部分我有嘗試過改用Fitting Function求得的係數來比較，效果的確比paper給的係數還要好，但是keyframe數量可能會多達1X個左右。</p><p>而我認為如果沒有要求一定要跟原本的elatic比較的話，目前這樣的誤差是完全可以接受的。因為這看起來比較像是彈性相關係數的不一致的些許延遲誤差，他們整體曲線的變化率仍然十分相近。應用上可以直接替換沒問題。</p><h1 id="專案網址"><a href="#專案網址" class="headerlink" title="專案網址"></a>專案網址</h1><p>包含範例所有的原始碼</p><p><a href="https://github.com/qwe321qwe321qwe321/Unity-EasingAnimationCurve" target="_blank" rel="noopener">https://github.com/qwe321qwe321qwe321/Unity-EasingAnimationCurve</a></p><p>我也另外輸出了一個AnimationCurve的<a href="https://github.com/qwe321qwe321qwe321/Unity-EasingAnimationCurve#animationcurve-presets" target="_blank" rel="noopener">Presets</a>，如果只是想要以AnimationCurve的形式來使用EasingFunction的話可以直接匯入Presets至專案中。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solve the problem of the redundant artifacts in Github Actions 清除Github Actions中多餘的Artifacts</title>
      <link href="/2020/02/27/Solve-the-problem-of-redundant-artifacts-in-Github-Actions/"/>
      <url>/2020/02/27/Solve-the-problem-of-redundant-artifacts-in-Github-Actions/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/github_storage_limit.png" alt="從0.8G以上的危機降到了0.26G"></p><h1 id="前言-amp-廢話"><a href="#前言-amp-廢話" class="headerlink" title="前言&amp;廢話"></a>前言&amp;廢話</h1><p>這篇接續上一篇 <a href="/2020/02/26/CI-in-Unity-using-GithubAction/">CI in Unity using Github Actions 使用Github Actions自動化測試建置Unity專案</a> 後面所提及的容量限制問題。</p><p>上次說過，依照原本的方法大概build不用10次，Github容量就會爆了。<br>於是大概在第7次的時候就會收到這種信:</p><p><img src="/images/github_storage_limit_notification.png" alt="恭喜你即將用爆囉，請快點升級方案"></p><a id="more"></a><p>我是收到了這封信的時候才驚覺原來github有容量限制，之前一直以為可以隨便我塞到飽，或許寫個接口還能當作雲端硬碟使用(?)</p><p>總之收到這封信以後我才開始正視這個問題，好險是有找到解決方案，不然我絕對會放棄使用Github Actions作為重要專案的CI服務。</p><p>我只是單純記錄解決的過程，文筆會有些雜亂且廢話居多。</p><h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><p>目標很簡單，需要可以自動刪除<strong>過期</strong>或<strong>多餘</strong>的artifacts的方法。</p><p><strong>過期</strong>或<strong>多餘</strong>的定義也很單純，我只要保留<strong>前N個版本</strong>的執行檔/輸出檔，其餘就是多餘且過期的。</p><h1 id="操作Artifacts的API"><a href="#操作Artifacts的API" class="headerlink" title="操作Artifacts的API"></a>操作Artifacts的API</h1><p>Github的REST API v3有提供這樣的API，參考<a href="https://developer.github.com/v3/actions/artifacts/#delete-an-artifact" target="_blank" rel="noopener">這裡</a>。</p><ul><li>List all artifact of the repo  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;actions&#x2F;artifacts</span><br></pre></td></tr></table></figure></li><li>Delete specific artifact  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;actions&#x2F;artifacts&#x2F;:artifact_id</span><br></pre></td></tr></table></figure></li></ul><p>以我上次的專案為例，想取得所有artifacts的資訊可以直接連到</p><p><a href="https://api.github.com/repos/qwe321qwe321qwe321/Unity-with-Github-Actions-example/actions/artifacts" target="_blank" rel="noopener">https://api.github.com/repos/qwe321qwe321qwe321/Unity-with-Github-Actions-example/actions/artifacts</a> </p><p>來查看。</p><p><img src="/images/github_api_list_artifacts_1.png" alt="可以看到這裡有36個artifacts"></p><p>有了這些API就好解決了，可以寫個腳本來爬artifacts的資訊再進行刪除。</p><h1 id="清除腳本"><a href="#清除腳本" class="headerlink" title="清除腳本"></a>清除腳本</h1><p>本來想自己寫，但結果不用。查到<a href="https://github.community/t5/GitHub-Actions/Delete-artifacts/td-p/38188/page/3" target="_blank" rel="noopener">這篇</a>發現有人已經寫好了！再次感謝 lelegard 這位仁兄。</p><p>他的gist: <a href="https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0" target="_blank" rel="noopener">https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0</a></p><p>使用前記得dependencies要裝一裝，主要就jq要另外裝而已，也就<code>apt-get install jq</code>解決。</p><p>但是我用了一下發現一個小bug: 遇到名稱包含空白的artifact時<code>print</code>會噴錯，<br>於是就fork順便幫他改了一下，以下是<a href="https://gist.github.com/qwe321qwe321qwe321/efae4569576006624c34f23b2dd76a58" target="_blank" rel="noopener">修改後的版本</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Customize those three lines with your repository and credentials:</span></span><br><span class="line">REPO=https://api.github.com/repos/OWNER/REPO</span><br><span class="line">GITHUB_USER=your-github-user-name</span><br><span class="line">GITHUB_TOKEN=token-with-workflow-rights-on-repo <span class="comment"># 這個token需要repo相關的權限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of most recent versions to keep for each artifact:</span></span><br><span class="line">KEEP=5 <span class="comment"># 保留的前N新的版本數量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A shortcut to call GitHub API.</span></span><br><span class="line"><span class="function"><span class="title">ghapi</span></span>() &#123; curl --silent --location --user <span class="variable">$GITHUB_USER</span>:<span class="variable">$GITHUB_TOKEN</span> <span class="string">"<span class="variable">$@</span>"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A temporary file which receives HTTP response headers.</span></span><br><span class="line">TMPFILE=/tmp/tmp.$$</span><br><span class="line"></span><br><span class="line"><span class="comment"># An associative array, key: artifact name, value: number of artifacts of that name.</span></span><br><span class="line"><span class="built_in">declare</span> -A ARTCOUNT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Process all artifacts on this repository, loop on returned "pages".</span></span><br><span class="line">URL=<span class="variable">$REPO</span>/actions/artifacts</span><br><span class="line"><span class="keyword">while</span> [[ -n <span class="string">"<span class="variable">$URL</span>"</span> ]]; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get current page, get response headers in a temporary file.</span></span><br><span class="line">    JSON=$(ghapi --dump-header <span class="variable">$TMPFILE</span> <span class="string">"<span class="variable">$URL</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get URL of next page. Will be empty if we are at the last page.</span></span><br><span class="line">    URL=$(grep <span class="string">'^Link:'</span> <span class="string">"<span class="variable">$TMPFILE</span>"</span> | tr <span class="string">','</span> <span class="string">'\n'</span> | grep <span class="string">'rel="next"'</span> | head -1 | sed -e <span class="string">'s/.*&lt;//'</span> -e <span class="string">'s/&gt;.*//'</span>)</span><br><span class="line">    rm -f <span class="variable">$TMPFILE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Number of artifacts on this page:</span></span><br><span class="line">    COUNT=$(( $(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">'.artifacts | length'</span>) )) <span class="comment"># 這裡是取得artifact的數量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop on all artifacts on this page.</span></span><br><span class="line">    <span class="keyword">for</span> ((i=0; <span class="variable">$i</span> &lt; <span class="variable">$COUNT</span>; i++)); <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get name of artifact and count instances of this name.</span></span><br><span class="line">        name=$(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">".artifacts[<span class="variable">$i</span>].name?"</span>) <span class="comment"># 這裡是取得第i個artifact的名稱</span></span><br><span class="line">        ARTCOUNT[<span class="variable">$name</span>]=$(( $(( <span class="variable">$&#123;ARTCOUNT[$name]&#125;</span> )) + 1)) <span class="comment"># 以名稱為key，儲存目前有多少個相同名稱的artifacts</span></span><br><span class="line"><span class="comment">#printf "#%d %s - %d\n" $i "$name" $&#123;ARTCOUNT[$name]&#125;</span></span><br><span class="line">        <span class="comment"># Check if we must delete this one.</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;ARTCOUNT[$name]&#125;</span> -gt <span class="variable">$KEEP</span> ]]; <span class="keyword">then</span> <span class="comment">#若超過$KEEP的量則刪除</span></span><br><span class="line">            id=$(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">".artifacts[<span class="variable">$i</span>].id?"</span>) <span class="comment"># 取得id以便得到url</span></span><br><span class="line">            size=$(( $(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">".artifacts[<span class="variable">$i</span>].size_in_bytes?"</span>) ))</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"Deleting %s #%d, %d bytes\n"</span> <span class="string">"<span class="variable">$name</span>"</span> <span class="variable">$&#123;ARTCOUNT[$name]&#125;</span> <span class="variable">$size</span></span><br><span class="line">            ghapi -X DELETE <span class="variable">$REPO</span>/actions/artifacts/<span class="variable">$id</span> <span class="comment"># DELETE API</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>參數設定好後直接運行即可清除多餘的Artifacts。</p><p>注意DELETE API需要額外的存取repo權限，所以需要去申請一個personal access token，或是直接用上一篇發送<code>repository_dispath</code>用的那組token也行。</p><h1 id="整合Github-Actions"><a href="#整合Github-Actions" class="headerlink" title="整合Github Actions"></a>整合Github Actions</h1><p>有了腳本以後，再來就需要把腳本整合到Action內，最好是在完成上傳artifact以後執行清除腳本。</p><h2 id="將Token加入Secrets"><a href="#將Token加入Secrets" class="headerlink" title="將Token加入Secrets"></a><del>將Token加入Secrets</del></h2><p>因為我們不希望直接明碼保存personal token在repo裡，加上github也不會讓你這麼做(當你上傳token明碼時會自動撤銷該token)。</p><p><del>所以我們需要把token放到repo的secrets中，</del>之後再從action config裡傳入shell script。</p><p><em>(2020/03/01更新)</em> 不需要手動做這個步驟，Github會自動產生「該repo的讀寫相關權限之token」在Secrets中命名為<code>GITHUB_TOKEN</code>(雖然你從web上看不到)，詳細請參考這篇<a href="https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token" target="_blank" rel="noopener">官方文件</a>。</p><h2 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h2><p>再次修改剛剛上面提供的腳本，由於我希望參數化都在action的config檔裡面處理就好，而這個腳本不要帶有任何參數，所以修改一下腳本，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Customize those three lines with your repository and credentials:</span></span><br><span class="line"><span class="comment"># Split the string "username/repo" into two parts.</span></span><br><span class="line">GITHUB_USER=<span class="string">"<span class="variable">$(cut -d'/' -f1 &lt;&lt;&lt; $OWNER_AND_REPO)</span>"</span></span><br><span class="line">GITHUB_REPO=<span class="string">"<span class="variable">$(cut -d'/' -f2 &lt;&lt;&lt; $OWNER_AND_REPO)</span>"</span></span><br><span class="line">GITHUB_TOKEN=<span class="variable">$PERSONAL_TOKEN</span></span><br><span class="line">REPO=https://api.github.com/repos/<span class="variable">$GITHUB_USER</span>/<span class="variable">$GITHUB_REPO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of most recent versions to keep for each artifact:</span></span><br><span class="line">KEEP=<span class="variable">$KEEPING_COUNT</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> USER: <span class="variable">$GITHUB_USER</span></span><br><span class="line"><span class="built_in">echo</span> REPO: <span class="variable">$GITHUB_REPO</span></span><br><span class="line"><span class="built_in">echo</span> Keep: <span class="variable">$KEEP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A shortcut to call GitHub API.</span></span><br><span class="line"><span class="function"><span class="title">ghapi</span></span>() &#123; curl --silent --location --user <span class="variable">$GITHUB_USER</span>:<span class="variable">$GITHUB_TOKEN</span> <span class="string">"<span class="variable">$@</span>"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A temporary file which receives HTTP response headers.</span></span><br><span class="line">TMPFILE=/tmp/tmp.$$</span><br><span class="line"></span><br><span class="line"><span class="comment"># An associative array, key: artifact name, value: number of artifacts of that name.</span></span><br><span class="line"><span class="built_in">declare</span> -A ARTCOUNT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Process all artifacts on this repository, loop on returned "pages".</span></span><br><span class="line">URL=<span class="variable">$REPO</span>/actions/artifacts</span><br><span class="line"><span class="keyword">while</span> [[ -n <span class="string">"<span class="variable">$URL</span>"</span> ]]; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get current page, get response headers in a temporary file.</span></span><br><span class="line">    JSON=$(ghapi --dump-header <span class="variable">$TMPFILE</span> <span class="string">"<span class="variable">$URL</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get URL of next page. Will be empty if we are at the last page.</span></span><br><span class="line">    URL=$(grep <span class="string">'^Link:'</span> <span class="string">"<span class="variable">$TMPFILE</span>"</span> | tr <span class="string">','</span> <span class="string">'\n'</span> | grep <span class="string">'rel="next"'</span> | head -1 | sed -e <span class="string">'s/.*&lt;//'</span> -e <span class="string">'s/&gt;.*//'</span>)</span><br><span class="line">    rm -f <span class="variable">$TMPFILE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Number of artifacts on this page:</span></span><br><span class="line">    COUNT=$(( $(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">'.artifacts | length'</span>) ))</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> There are <span class="variable">$COUNT</span> artifacts <span class="keyword">in</span> <span class="variable">$OWNER_AND_REPO</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop on all artifacts on this page.</span></span><br><span class="line">    <span class="keyword">for</span> ((i=0; <span class="variable">$i</span> &lt; <span class="variable">$COUNT</span>; i++)); <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get name of artifact and count instances of this name.</span></span><br><span class="line">        name=$(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">".artifacts[<span class="variable">$i</span>].name?"</span>)</span><br><span class="line">        ARTCOUNT[<span class="variable">$name</span>]=$(( $(( <span class="variable">$&#123;ARTCOUNT[$name]&#125;</span> )) + 1))</span><br><span class="line"><span class="comment">#printf "#%d %s - %d\n" $i "$name" $&#123;ARTCOUNT[$name]&#125;</span></span><br><span class="line">        <span class="comment"># Check if we must delete this one.</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;ARTCOUNT[$name]&#125;</span> -gt <span class="variable">$KEEP</span> ]]; <span class="keyword">then</span></span><br><span class="line">            id=$(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">".artifacts[<span class="variable">$i</span>].id?"</span>)</span><br><span class="line">            size=$(( $(jq &lt;&lt;&lt;<span class="variable">$JSON</span> -r <span class="string">".artifacts[<span class="variable">$i</span>].size_in_bytes?"</span>) ))</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"Deleting %s #%d, %d bytes\n"</span> <span class="string">"<span class="variable">$name</span>"</span> <span class="variable">$&#123;ARTCOUNT[$name]&#125;</span> <span class="variable">$size</span></span><br><span class="line">            ghapi -X DELETE <span class="variable">$REPO</span>/actions/artifacts/<span class="variable">$id</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>第5、6行是字串切割，把”owner/repo”的字串切成owner和repo兩個，從<a href="https://unix.stackexchange.com/questions/312280/split-string-by-delimiter-and-get-n-th-element" target="_blank" rel="noopener">這篇</a>找到如何在shell切割字串。之所以要這樣搞是因為action config那邊只能取得”owner/repo”這樣的字串資料。</p><p>有了這個腳本後，我把它放到<code>.github/workflows/purging-artifacts.sh</code>，因為它只跟actions有依賴關係，我不希望它出現在我的repo首頁或其他地方。</p><h2 id="Action-Config-YAML"><a href="#Action-Config-YAML" class="headerlink" title="Action Config(YAML)"></a>Action Config(YAML)</h2><p>多做一個job如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">purgeArtifacts:</span> <span class="comment"># 清除多餘的artifacts</span></span><br><span class="line">  <span class="attr">needs:</span> <span class="string">[testAllModes]</span> <span class="comment"># 等到全部人跑完以後</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Purging</span> <span class="string">the</span> <span class="string">redundant</span> <span class="string">artifacts.</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># checkout方法用來clone本專案(repo)到裝置內。</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">lfs:</span> <span class="literal">true</span> <span class="comment"># 要不要下載git-lfs檔，即大型檔案。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Purging</span> <span class="string">the</span> <span class="string">redundant</span> <span class="string">artifacts.</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># 這個|符號表示多行輸入</span></span><br><span class="line">        <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./.github/workflows/purging-artifacts.sh</span> <span class="comment"># 改執行權限</span></span><br><span class="line">        <span class="string">./.github/workflows/purging-artifacts.sh</span> <span class="comment"># 跑寫好的shell</span></span><br><span class="line">      <span class="attr">env:</span> </span><br><span class="line">        <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># 將GITHUB_TOKEN設定為環境變數</span></span><br><span class="line">        <span class="attr">KEEPING_COUNT:</span> <span class="number">1</span> <span class="comment"># 保存前N新的artifacts </span></span><br><span class="line">        <span class="attr">OWNER_AND_REPO:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span> <span class="comment"># The string combine owner and repository. For example, Codertocat/Hello-World.</span></span><br></pre></td></tr></table></figure><p>我把這段放在Tester.yml的testAllMode之後，詳情請看<a href="https://github.com/qwe321qwe321qwe321/Unity-with-Github-Actions-example/blob/642df53a38470afccf50d266f798c5575b0e866c/.github/workflows/tester.yml#L41" target="_blank" rel="noopener">原始碼</a> (←但是注意這是舊版的原始碼，我還手動塞了個<code>PERSONAL_TOKEN</code>到Secrets裡面，實際上可以直接用<code>GITHUB_TOKEN</code>)。</p><h2 id="先看看成果"><a href="#先看看成果" class="headerlink" title="先看看成果"></a>先看看成果</h2><p>把剛剛修改的成果push到一個新分支(branch)，只讓它觸發tester事件。</p><p>之後我們再看一次artifacts列表:</p><p><img src="/images/github_api_list_artifacts_2.png" alt="只剩8個artifacts"></p><p>分別是:</p><ul><li>Test results for playmode</li><li>Test results for editmode</li><li>StandaloneWindows64 Build</li><li>StandaloneOSX Build</li><li>StandaloneLinux64 Build</li><li>Unity_v2018.4.13f1.alf</li></ul><p>蛤？明明只有6個。</p><p>其實是Test result都各多了一個，這不算是我預期的結果。猜想應該是當下runner那次的結果還沒更新到artifacts list上，所以purging的時候還沒有它們，因此才會多出來一組。</p><p>這樣的話也算好解決，目前想到兩個方法:</p><ol><li>多傳個當前runner生成的artifact名稱傳給purging script檢測，將該名稱的數量額外減1。</li><li>把purging的步驟移至單獨一個action，該action必須檢測其它所有actions都跑完了才執行。</li></ol><p>第2個應該比較好，因為purging畢竟是全部檢查全部清掃的script，理論上test+build之後只要最後運行一次就好了，這樣也不用跑好幾次沒意義的步驟了。</p><p><del>但是，目前先不花時間測試這些方法，現在這樣已經解決1G容量限制的大麻煩了。</del></p><p>我選擇第2個方法來修正這個問題。</p><h2 id="添加Purging-Action"><a href="#添加Purging-Action" class="headerlink" title="添加Purging Action"></a>添加Purging Action</h2><p>我在Github上找到了 <a href="https://github.com/WyriHaximus/github-action-wait-for-status" target="_blank" rel="noopener">github-action-wait-for-status</a>，它可以等待其它Actions跑完後取得status(success/failure)才繼續執行下一個step，這樣我就可以利用這個方法做Purging Artifacts。</p><p><em>但是它目前release版本只有0.1.0且star不多，感覺還不是很穩定，斟酌使用</em></p><ol><li>把原本的Tester.yml改回原樣。</li><li>添加新的config至<code>.github/workflows/purging-artifacts.yml</code>，內容如下: <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Auto</span> <span class="string">Purging</span> <span class="string">Artifacts</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">      <span class="attr">push:</span> <span class="string">&#123;</span> <span class="string">&#125;</span> <span class="comment"># 任意push觸發(配合Tester用)</span></span><br><span class="line">      <span class="attr">pull_request:</span> <span class="string">&#123;</span> <span class="attr">branches:</span> <span class="string">[master]</span> <span class="string">&#125;</span> <span class="comment"># 僅在pull request to master時觸發(配合Builder使用)</span></span><br><span class="line">   <span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">autoPurge:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'Wait for status checks'</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">waitforstatuschecks</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">"WyriHaximus/github-action-wait-for-status@0.1.0"</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">              <span class="attr">ignoreActions:</span> <span class="string">autoPurge</span> <span class="comment"># 略過檢查自己</span></span><br><span class="line">              <span class="attr">checkInterval:</span> <span class="number">13</span> <span class="comment"># 每13秒檢查一次</span></span><br><span class="line">            <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">"$<span class="template-variable">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># checkout方法用來clone本專案(repo)到裝置內。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Purging</span> <span class="string">the</span> <span class="string">redundant</span> <span class="string">artifacts.</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># 這個|符號表示多行輸入</span></span><br><span class="line">          <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./.github/workflows/purging-artifacts.sh</span> <span class="comment"># 改執行權限</span></span><br><span class="line">          <span class="string">./.github/workflows/purging-artifacts.sh</span> <span class="comment"># 跑寫好的shell</span></span><br><span class="line">        <span class="attr">env:</span> </span><br><span class="line">          <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># 將GITHUB_TOKEN設定為環境變數</span></span><br><span class="line">          <span class="attr">KEEPING_COUNT:</span> <span class="number">1</span> <span class="comment"># 保存前N新的artifacts </span></span><br><span class="line">          <span class="attr">OWNER_AND_REPO:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span> <span class="comment"># The string combine owner and repository. For example, Codertocat/Hello-World.</span></span><br></pre></td></tr></table></figure></li><li>完成，commit並push上去。</li></ol><h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><p>等跑完action後，再打開一次artifacts列表。</p><p><img src="/images/github_api_artifacts_2.png" alt="剩6個了"></p><p>這樣就正確無誤了，同名的artifacts只保留最新的一份。</p><p>這樣應該算是成功透過<strong>保留最少的檔案</strong>來避免塞爆1G容量限制了。</p><h1 id="專案網址"><a href="#專案網址" class="headerlink" title="專案網址"></a>專案網址</h1><p>Github: <a href="https://github.com/qwe321qwe321qwe321/Unity-with-Github-Actions-example/tree/purging-artifacts" target="_blank" rel="noopener">https://github.com/qwe321qwe321qwe321/Unity-with-Github-Actions-example/tree/purging-artifacts</a></p><h1 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h1><ul><li><a href="https://github.community/t5/GitHub-Actions/Delete-artifacts/td-p/38188" target="_blank" rel="noopener">https://github.community/t5/GitHub-Actions/Delete-artifacts/td-p/38188</a></li><li><a href="https://developer.github.com/v3/actions/artifacts/#delete-an-artifact" target="_blank" rel="noopener">https://developer.github.com/v3/actions/artifacts/#delete-an-artifact</a></li><li><a href="https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0" target="_blank" rel="noopener">https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0</a></li><li><a href="https://unix.stackexchange.com/questions/312280/split-string-by-delimiter-and-get-n-th-element" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/312280/split-string-by-delimiter-and-get-n-th-element</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 專案管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Hexo+Github部屬靜態Blog</title>
      <link href="/2020/02/26/%E7%94%A8Hexo-Github%E9%83%A8%E5%B1%AC%E9%9D%9C%E6%85%8BBlog/"/>
      <url>/2020/02/26/%E7%94%A8Hexo-Github%E9%83%A8%E5%B1%AC%E9%9D%9C%E6%85%8BBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="前言-amp-廢話"><a href="#前言-amp-廢話" class="headerlink" title="前言&amp;廢話"></a>前言&amp;廢話</h1><p>這篇文單純記錄用hexo在github上架設靜態網站遇到的問題以及一些指令和輔助工具，以防忘記。</p><p>另外這也是第一篇用<a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">Hexo Admin</a>打的文章，作為嘗試。</p><a id="more"></a><h1 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h1><p>其實不用多作介紹，網路上查的到很多教學，這邊就隨便放幾個:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a></li><li><a href="https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db" target="_blank" rel="noopener">如何搭建個人 Blog 使用 Hexo + Gitpage</a></li></ul><p>甚至Hexo官網就有很齊全的教學了。</p><ul><li><a href="https://hexo.io/zh-tw/docs/" target="_blank" rel="noopener">Hexo: 開始使用</a></li></ul><p>所以就不多作介紹了。</p><p>但這邊有個小問題當初卡了我一陣子，是語言和時區(timezone)到底要寫什麼才合法，<br>教學不是沒寫就是對岸的教學。總之是設定成這樣:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">language: zh-tw</span><br><span class="line">timezone: &#39;Asia&#x2F;Taipei&#39;</span><br></pre></td></tr></table></figure><h1 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h1><p><em>前提是該設定的都設定好了，如部署設定之類的。</em></p><h2 id="生成-架設-部署網站"><a href="#生成-架設-部署網站" class="headerlink" title="生成/架設/部署網站"></a>生成/架設/部署網站</h2><h3 id="生成靜態網頁"><a href="#生成靜態網頁" class="headerlink" title="生成靜態網頁"></a>生成靜態網頁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate [-d] [-w]</span><br></pre></td></tr></table></figure><p>或用縮寫</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g [-d] [-w]</span><br></pre></td></tr></table></figure><p>使用<code>-d</code>參數會在生成後進行部署(deploy)。</p><h3 id="架設在Local端"><a href="#架設在Local端" class="headerlink" title="架設在Local端"></a>架設在Local端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server [-p] [-s] [-l]</span><br></pre></td></tr></table></figure><p>或用縮寫</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s [-p] [-s] [-l]</span><br></pre></td></tr></table></figure><p>便會啟動伺服器，預設是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>參數不常用，有興趣就<a href="https://hexo.io/zh-tw/docs/commands" target="_blank" rel="noopener">參考官方文件</a>。</p><h3 id="部署到遠端-Github"><a href="#部署到遠端-Github" class="headerlink" title="部署到遠端(Github)"></a>部署到遠端(Github)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy [-g]</span><br></pre></td></tr></table></figure><p>或用縮寫</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d [-g]</span><br></pre></td></tr></table></figure><p>使用<code>-g</code>參數會在部署網站前先產生靜態檔案。</p><p>使用這項指令前要先設定好部署到github，之後只要輸入這個指令就會自動commit並push上去。如圖</p><p><img src="/images/hexo_deploy_to_github.png" alt="會自動commit以及push至github上upload successful"></p><h3 id="清除快取以及靜態檔案"><a href="#清除快取以及靜態檔案" class="headerlink" title="清除快取以及靜態檔案"></a>清除快取以及靜態檔案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>有些檔案更改後再次generate也不會修改，需要先清除才行。</p><h2 id="寫作"><a href="#寫作" class="headerlink" title="寫作"></a>寫作</h2><h3 id="建立文章"><a href="#建立文章" class="headerlink" title="建立文章"></a>建立文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>建立一篇新的文章。如果沒有設定 layout 的話，則會使用 _config.yml 中的 default_layout 設定代替。如果標題包含空格的話，請使用引號括起來。</p><p>文章檔案放在<code>source/_posts</code>裡面</p><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>Layout分為3種，<code>post</code>、<code>draft</code>、<code>page</code>。</p><ul><li><code>post</code>為一般文章存放區</li><li><code>draft</code>為草稿區，之後會用<code>publish</code>指令將草稿移至<code>post</code>。</li><li><code>page</code>為特別的頁面區，如tags、categories和about之類的頁面。</li></ul><h3 id="發表草稿"><a href="#發表草稿" class="headerlink" title="發表草稿"></a>發表草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>草稿檔案放在<code>source/_drafts</code>裡面。</p><h1 id="遇到的問題集"><a href="#遇到的問題集" class="headerlink" title="遇到的問題集"></a>遇到的問題集</h1><ul><li><p>Q1. 使用某些主題時(如我現在使用的melody主題)會發生打開網頁時跳出以下訊息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include includes&#x2F;pagination.pug</span><br></pre></td></tr></table></figure><p>A1. 你的環境缺少部分hexo套件，用以下指令安裝。<a href="https://github.com/jerryc127/hexo-theme-butterfly/issues/4" target="_blank" rel="noopener">(參考來源)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-jade hexo-renderer-stylus --save or yarn add hexo-renderer-jade hexo-renderer-stylus</span><br></pre></td></tr></table></figure></li><li><p>Q2. 部署上去的網站與local網站長的不同</p><p>A2. 靜態文件沒有刷新，先<code>hexo clean</code>再部署一次</p></li><li><p>Q3. 將網站添加至google搜尋結果</p><p>A3. 參考<a href="https://happyhand.github.io/2018/11/29/Hexo-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E8%AB%8B-Google-%E8%AE%93-Blog-%E7%99%BC%E5%85%89%E7%99%BC%E7%86%B1%E5%90%A7/" target="_blank" rel="noopener">這篇教學</a></p></li></ul><h1 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h1><ul><li><a href="https://help.disqus.com/en/" target="_blank" rel="noopener">Disqus</a>: 靜態網站留言版，大多數的hexo主題都有直接支援，不需要改網頁內容。小缺點是目前不知道為什麼不能設定成繁中。</li><li><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">Hexo Admin</a>: Hexo線上編輯器，可以直接在網頁修改文章並發佈。<br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbNzczMjI0NzEyXX0=</li></ul><p>–&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI in Unity using Github Actions 使用Github Actions自動化測試建置Unity專案</title>
      <link href="/2020/02/26/CI-in-Unity-using-GithubAction/"/>
      <url>/2020/02/26/CI-in-Unity-using-GithubAction/</url>
      
        <content type="html"><![CDATA[<h1 id="前言-amp-廢話"><a href="#前言-amp-廢話" class="headerlink" title="前言&amp;廢話"></a>前言&amp;廢話</h1><p>最近發現了Github的新功能<strong>Action</strong>，它用作<a href="https://ithelp.ithome.com.tw/articles/10219083" target="_blank" rel="noopener">CI/CD</a>服務，以Unity來說只需要CI(Continuos Integration)。</p><p>我最早接觸到CI/CD概念的是LAB的學長教的，當時用的是Jekins且是架在LAB的電腦上。但是最後那個專案其實也沒在用CI和Unit Test，單純是架爽的當經驗值。<br>之後我所接觸的專案都沒再碰這塊了，感覺是web相關或是大公司才會比較用到。另一方面是我也沒租VPS服務或有一台電腦給我架伺服器，所以一直沒機會再碰這東西。</p><p>但這次的Github Action不同，他提供的是「雲端服務」，也就是說我們不需要有自己的伺服器，它免費提供各平台的裝置供我們使用。</p><a id="more"></a><p>雖然聽說<a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener">Gitlab</a>早有這功能，但我一直沒有機會轉去使用Gitlab，畢竟Github都給我免費的Pro會員了，先用完再說。</p><p>這篇單純記錄我遇到的問題與解決過程，廢話太多可以直接下拉至<a href="#成果畫面">成果</a>或<a href="#專案網址">專案網址</a></p><h1 id="The-issues-of-CI-in-Unity"><a href="#The-issues-of-CI-in-Unity" class="headerlink" title="The issues of CI in Unity"></a>The issues of CI in Unity</h1><p>花了幾天碰了這坑，遇到不少問題，絕大多數應該是Unity本身的問題。</p><h2 id="授權-Activation-License"><a href="#授權-Activation-License" class="headerlink" title="授權 Activation License"></a>授權 Activation License</h2><p>我當初用Jekins的年代還沒有這東西，印象是Personal版不需要帳密也能直接編譯(?)<br>現在版本的Unity不論Personal還是Pro通通都要登入並申請授權，即使以Personal版本來說這件事情根本不重要(反正都免費)。<br>這導致用Batch compile的問題很多，可以Google到一堆類似問題，而且到現在我也還沒有一個完美解。</p><p>目前的方法是用Unity的離線授權方法，如下:</p><ol><li>先在你的虛擬機/Docker上取得「申請授權檔」，通常叫Unity20XX.X.X.alf，依版本而定。</li><li>前往<a href="https://license.unity3d.com/manual" target="_blank" rel="noopener">Unity授權網站</a>，登入後上傳剛剛那個alf檔。</li><li>取得Unit_v20XX.X.ulf檔，即我們需要的手動授權檔。</li><li>使用Unity batch時加入參數<code>-manualLicenseFile $FILE_PATH</code>即可完成授權。</li></ol><p>但是這方法還是很爛，因為這個授權檔會過期(Expired)，不確定確切時間，約莫1~2個禮拜就要更換一次。</p><blockquote><p>那不要用離線授權，直接用帳密的形式跑unity batch mode呢？</p></blockquote><p>沒用，因為不明原因，Batch mode無法自動更新License。<br>會彈出以下訊息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cancelling DisplayDialog: Failed to activate&#x2F;update license. Timeout occured while trying to update license. Please try again later or contact support@unity3d.com</span><br><span class="line">This should not be called in batch mode.</span><br></pre></td></tr></table></figure><p>Google了一番沒有好的解決方法就作罷。</p><p>另外可以看看這篇在Unity論壇上的討論: <a href="https://forum.unity.com/threads/my-disappointing-experience-using-unity-in-a-ci-pipeline.737678/" target="_blank" rel="noopener">My disappointing experience using Unity in a CI pipeline</a>，依照官方回應看來是只支援plus/pro版本的auto-activate，personal版就下去。</p><blockquote><p>那有沒有機會用爬蟲的形式取得alf檔完成自動補授權呢？</p></blockquote><p>目前還沒試過，雖然內心覺得應該可行，但發現別人包好的插件都沒有包含這塊，所以估計有什麼大坑，總之沒什麼把握。</p><p>這邊有在github上找到幾個類似做法的repo，但是我嘗試過都沒辦法用了，等有心人去改吧。</p><p><a href="https://github.com/MizoTake/unity-license-activate" target="_blank" rel="noopener">https://github.com/MizoTake/unity-license-activate</a> - NodeJs寫的，已失效。<br><a href="https://github.com/RedpointGames/UnityAutomaticLicensor" target="_blank" rel="noopener">https://github.com/RedpointGames/UnityAutomaticLicensor</a> - C#寫的，因為只支援windows沒試過。</p><h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><p>回到開頭所說的Action服務，要在Unity使用這個服務我使用了webbertakken寫的Unity-Actions。</p><ul><li><a href="https://github.com/webbertakken/unity-actions" target="_blank" rel="noopener">Unity Actions</a> - 大合集<ul><li><a href="https://github.com/marketplace/actions/unity-request-activation-file" target="_blank" rel="noopener">Request Activation File</a> - 自動取得alf檔(申請授權檔)。</li><li><a href="https://github.com/marketplace/actions/unity-test-runner" target="_blank" rel="noopener">Test Runner</a> - Unit Test for PlayMode and EditMode.</li><li><a href="https://github.com/marketplace/actions/unity-builder" target="_blank" rel="noopener">Builder</a> - Build Executable for multi-platform.</li></ul></li></ul><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>這裡先用Request Activation File下面所給的Usage code來看。</p><p>先創一個檔案放至你的repo目錄中<code>.github/workflows/activation.yml</code>。<br>內容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Acquire</span> <span class="string">activation</span> <span class="string">file</span> <span class="comment"># 該Action的名稱，將顯示在Github Action的頁面UI</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span> <span class="comment">#觸發Action的條件，目前是只要有任何push就會觸發</span></span><br><span class="line"><span class="attr">jobs:</span> <span class="comment"># 工作項目，可能平行處理。</span></span><br><span class="line">  <span class="attr">activation:</span> <span class="comment"># 工作項目的變數名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Request</span> <span class="string">manual</span> <span class="string">activation</span> <span class="string">file</span> <span class="string">🔑</span> <span class="comment"># 工作項目的顯示名稱，將顯示在Action頁面UI上。</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 運行的裝置</span></span><br><span class="line">    <span class="attr">steps:</span> <span class="comment"># 步驟，將照順序跑</span></span><br><span class="line">        <span class="comment"># Request manual activation file</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Request</span> <span class="string">manual</span> <span class="string">activation</span> <span class="string">file</span> <span class="comment"># 顯示名稱</span></span><br><span class="line">          <span class="attr">id:</span> <span class="string">getManualLicenseFile</span> <span class="comment"># 變數名</span></span><br><span class="line">          <span class="attr">uses:</span> <span class="string">webbertakken/unity-request-manual-activation-file@v1.1</span> <span class="comment"># 引用外部方法。</span></span><br><span class="line">          <span class="attr">with:</span> <span class="comment"># with用於輸入參數，可想像成上面是一個叫getManualLicenseFile()的函數/方法</span></span><br><span class="line">            <span class="attr">unityVersion:</span> <span class="number">2018.4</span><span class="string">.13f1</span> <span class="comment"># 參數，用於輸入進上方的函數/方法。</span></span><br><span class="line">        <span class="comment"># Upload artifact (Unity_v20XX.X.XXXX.alf)</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Expose</span> <span class="string">as</span> <span class="string">artifact</span> <span class="comment"># 顯示名稱</span></span><br><span class="line">          <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span> <span class="comment"># 引用外部方法，該方法為將指定路徑下的檔案上傳為artifact。</span></span><br><span class="line">          <span class="attr">with:</span> <span class="comment"># 參數</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.getManualLicenseFile.outputs.filePath</span> <span class="string">&#125;&#125;</span> <span class="comment"># 引用上面step1的輸出值(outputs)</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.getManualLicenseFile.outputs.filePath</span> <span class="string">&#125;&#125;</span> <span class="comment"># 引用上面step1的輸出值(outputs)</span></span><br></pre></td></tr></table></figure><blockquote><p>Github Action的config使用<a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">YAML</a>格式來撰寫，這邊就不說YAML的各個語法如何撰寫，只針對我們需要知道的訊息解釋。</p></blockquote><p>我在每一行都加上了註解，需要重點注意的是第2行的<code>on</code>、第6行的<code>runs-on</code>以及第14行以下的<code>Artifact</code>。</p><ul><li>on: 描述該Action是如何被觸發的，參考接下來的主題<a href="#Trigger-Methods">Trigger Methods</a>。</li><li>runs-on: 描述該Action將會運行在哪個裝置上，可參考官網給的<a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on" target="_blank" rel="noopener">裝置列表</a>。<ul><li>基本上我們都直接用ubuntu-latest運行，之後在裡面用docker跑我們要的環境即可。</li></ul></li><li>Artifact: 直翻是人工製品，在CI領域就只是輸出檔(可能有其他意義歡迎糾正我)。它將會顯示在Action頁面中供使用者下載，與release頁面的package相似。<ul><li>在上面情況是用來輸出alf檔給我們下載用。</li></ul></li></ul><h2 id="Trigger-Methods"><a href="#Trigger-Methods" class="headerlink" title="Trigger Methods"></a>Trigger Methods</h2><p>觸發Action的方式，這裡我只列下幾個我有用到的，詳情可以參考<a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener">Github官方教學</a>。</p><ol><li>push: 在任何push指令後觸發。非常實用，CI的目標就是要在專案變更時重新build一次確認運行是否正確。<ul><li>可以加上branches參數，使得它只會在你想要的branch被push時觸發，如:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Trigger the workflow on push</span></span><br><span class="line">  <span class="comment"># but only for the master branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">branch_A</span></span><br></pre></td></tr></table></figure></li></ul></li><li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request" target="_blank" rel="noopener">pull_request</a>: 在任何pull request發生時觸發。<ul><li>除了可以加上branches參數，還可以加上types參數來描述更細節的觸發方法。<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">      <span class="attr">branches:</span> <span class="string">[master]</span> <span class="comment"># 表示如果其它branch開了一個pull request to master時觸發，但它仍然是執行在其它branch上。</span></span><br><span class="line">      <span class="attr">types:</span> <span class="string">[assigned,</span> <span class="string">opened,</span> <span class="string">synchronize,</span> <span class="string">reopened]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意YAML格式要描述multi-value時有兩種方法:</p><ol><li>寫成單行的[master, branch_A]陣列(Array)形式</li><li>或是多行的清單(List)形式，如下<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">branch_A</span></span><br></pre></td></tr></table></figure></li></ol><p>另外注意沒有-符號就不是清單(List)，而是類似類別(Class)形式的欄位(Field)或屬性(Property)。</p></blockquote></li></ul></li><li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows#external-events-repository_dispatch" target="_blank" rel="noopener">repository_dispatch</a>: 由API收到特定request後觸發，也是唯一一個可以從Github以外觸發Action的方法。<ul><li>外部呼叫的API細節可參考<a href="https://developer.github.com/v3/repos/#create-a-repository-dispatch-event" target="_blank" rel="noopener">官方文件</a>，但我覺得官方文件寫得很爛，實際上是看<a href="http://www.btellez.com/posts/triggering-github-actions-with-webhooks.html" target="_blank" rel="noopener">這篇</a>才成功。</li><li>這邊我就照搬方法，如下:<ol><li>先申請Personal Access Token才能Call API</li><li>進Github帳戶Settings&gt;Developer settings&gt;Personal access tokens</li><li>Generate new token，命名note然後把repo部分全勾並Generate token。</li><li>完成後會顯示你的token，請先複製好，因為重新整理後就再也看不到，只能重新生成。</li><li>之後呼叫API要用到curl，linux跟mac應該都有內建，windows比較麻煩點要先安裝個bash。</li><li>總之有了curl之後打開bash輸入以下指令<ul><li>把TOKEN_VALUE_HERE換成剛剛上面複製的token</li><li>:owner換成你的github帳號</li><li>:repo換成你的repo名稱</li><li>CUSTOM_ACTION_NAME_HERE換成你想要傳入的event_type參數，這個參數的值可以從Action端接收到。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST https://api.github.com/repos/:owner/:repo/dispatches \</span><br><span class="line">-H <span class="string">'Accept: application/vnd.github.everest-preview+json'</span> \</span><br><span class="line">-H <span class="string">'Authorization: token TOKEN_VALUE_HERE'</span> \</span><br><span class="line">--data <span class="string">'&#123;"event_type": "CUSTOM_ACTION_NAME_HERE"&#125;'</span></span><br></pre></td></tr></table></figure></li></ul></li><li>送出，沒出錯就成了，有出錯通常是token的權限錯誤(Bad Authorization)之類的就回去github檢查。<blockquote><p>如果你發現你每次commit後你的token就莫名其妙消失/撤銷了，那要注意一下你是否有把你的token給commit進去了。<br>Github在這方面有保護機制，只要你commit的資料有包含token，它就會立刻把該token撤銷掉以防被惡意使用。<br>參考來源: <a href="https://stackoverflow.com/a/55820223" target="_blank" rel="noopener">這篇</a>以及親身經歷。</p></blockquote></li></ol></li></ul></li></ol><h2 id="1-安裝Request-Activation-File並手動授權"><a href="#1-安裝Request-Activation-File並手動授權" class="headerlink" title="1. 安裝Request-Activation-File並手動授權"></a>1. 安裝Request-Activation-File並手動授權</h2><ol><li>先安裝Request Activation File，步驟如前面說的Usage。</li><li>想辦法運行Activation(以上面的範例來說當你push這個檔案上去時應該就會觸發了)，並從Action頁面中的Artifacts裡面下載alf檔。</li><li>手動前往<a href="https://license.unity3d.com/manual" target="_blank" rel="noopener">Unity授權網站</a>，登入後上傳剛剛那個alf檔並下載ulf檔。</li><li>將ulf檔的內容全部複製。</li><li>打開你的repo頁面，到Settings&gt;Secrets&gt;Add a new secret。</li><li>命名UNITY_LICENSE，內容直接貼上第3點所複製的內容，然後保存。</li></ol><h2 id="2-安裝Test-Runner"><a href="#2-安裝Test-Runner" class="headerlink" title="2. 安裝Test-Runner"></a>2. 安裝Test-Runner</h2><ol><li>創個yml檔放在repo目錄中的<code>.github/workflows/tester.yml</code> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Tester</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span> <span class="comment"># 任何push都會觸發</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span> <span class="comment"># 環境變數</span></span><br><span class="line">  <span class="attr">UNITY_LICENSE:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.UNITY_LICENSE</span> <span class="string">&#125;&#125;</span> <span class="comment"># 將UNITY_LICENSE設定為存在secrets中的UNITY_LICENSE</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">testAllModes:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Test</span> <span class="string">in</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.testMode</span> <span class="string">&#125;&#125;</span> <span class="string">on</span> <span class="string">version</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.unityVersion</span> <span class="string">&#125;&#125;</span> <span class="comment"># matrix.testmode以及matrix.unityVersion在下面有定義</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">strategy:</span> <span class="comment"># 主要用matrix來分割job，以及帶有部分參數</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span> <span class="comment"># fail-fast若為true時，任意一個matrix中的job失敗後會立刻停止所有job的運作。</span></span><br><span class="line">      <span class="attr">matrix:</span> <span class="comment"># matrix用於分割job，它可以將一個job分成好幾個，數量由它的參數個數而定。以這裡為例，一共會有1*1*2=2個job。</span></span><br><span class="line">        <span class="attr">projectPath:</span> <span class="comment"># repo中unity project的相對路徑，若有多個project需要測試可以加在下面。</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">project</span></span><br><span class="line">        <span class="attr">unityVersion:</span> <span class="comment"># unity的版本，若有多個版本需要測試可以加在下面。</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">2018.4</span><span class="string">.13f1</span></span><br><span class="line">        <span class="attr">testMode:</span> <span class="comment"># 測試模式，一般來說只有playmode和editmode，可以依照需求註解掉不需要的。</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">playmode</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">editmode</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># checkout方法用來clone本專案(repo)到裝置內。</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">lfs:</span> <span class="literal">true</span> <span class="comment"># 要不要下載git-lfs檔，即大型檔案。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/cache@v1</span> <span class="comment"># cache方法用於儲存/還原快取檔，用以加速運行。</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.projectPath</span> <span class="string">&#125;&#125;/Library</span> <span class="comment"># 這裡我們用來快取Unity的Library資料夾，以防每次重開專案都要花時間建置Library資料夾。</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">Library-$&#123;&#123;</span> <span class="string">matrix.projectPath</span> <span class="string">&#125;&#125;</span> <span class="comment"># key即identifier，存取時需要。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">webbertakken/unity-test-runner@v1.4</span> <span class="comment"># test runner</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">projectPath:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.projectPath</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">unityVersion:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.unityVersion</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">testMode:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.testMode</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">artifactsPath:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.testMode</span> <span class="string">&#125;&#125;-TestResult</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span> <span class="comment"># 上傳artifacts</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Test</span> <span class="string">results</span> <span class="string">for</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.testMode</span> <span class="string">&#125;&#125;</span> <span class="comment"># 顯示名稱</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.tests.outputs.artifactsPath</span> <span class="string">&#125;&#125;</span> <span class="comment"># 從上一步的輸出路徑中取得檔案</span></span><br></pre></td></tr></table></figure></li><li>把一些設定改成自己需求，如projectPath、unityVersion、testMode。</li><li>push上去即可運行。<blockquote><p>Unity專案可以用NUnit寫Unit Test來測試，至於NUnit該如何使用請另找資源，這篇不含NUnit教學。</p></blockquote></li></ol><h2 id="3-安裝Builder"><a href="#3-安裝Builder" class="headerlink" title="3. 安裝Builder"></a>3. 安裝Builder</h2><ol><li>創個yml檔放在repo目錄中的<code>.github/workflows/builder.yml</code> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Builder</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span> <span class="string">&#123;</span> <span class="attr">branches:</span> <span class="string">[master]</span> <span class="string">&#125;</span> <span class="comment"># 僅在pull request to master時觸發</span></span><br><span class="line">  <span class="attr">push:</span> <span class="string">&#123;</span> <span class="attr">branches:</span> <span class="string">[master]</span> <span class="string">&#125;</span> <span class="comment"># 僅在push to master時觸發</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span> <span class="comment"># 環境變數</span></span><br><span class="line">  <span class="attr">UNITY_LICENSE:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.UNITY_LICENSE</span> <span class="string">&#125;&#125;</span> <span class="comment"># 將UNITY_LICENSE設定為存在secrets中的UNITY_LICENSE</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">buildAndTestForSomePlatforms:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">for</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.targetPlatform</span> <span class="string">&#125;&#125;</span> <span class="string">on</span> <span class="string">version</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.unityVersion</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">projectPath:</span> <span class="comment"># repo中unity project的相對路徑，若有多個project需要測試可以加在下面。</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">project</span></span><br><span class="line">        <span class="attr">unityVersion:</span>  <span class="comment"># unity的版本，若有多個版本需要測試可以加在下面。</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">2018.4</span><span class="string">.13f1</span></span><br><span class="line">        <span class="attr">targetPlatform:</span> <span class="comment"># 測試模式，僅測試過下面三種PC平台可過，iOS和WebGL不保證運行，可以依照需求註解掉不需要的。</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">StandaloneOSX</span> <span class="comment"># Build a macOS standalone (Intel 64-bit).</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">StandaloneWindows64</span> <span class="comment"># Build a Windows 64-bit standalone.</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">StandaloneLinux64</span> <span class="comment"># Build a Linux 64-bit standalone.</span></span><br><span class="line">          <span class="comment">#- iOS # Build an iOS player.</span></span><br><span class="line">          <span class="comment">#- WebGL # WebGL.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># checkout方法用來clone本專案(repo)到裝置內。</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">lfs:</span> <span class="literal">true</span> <span class="comment"># 要不要下載git-lfs檔，即大型檔案。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/cache@v1</span> <span class="comment"># cache方法用於儲存/還原快取檔，用以加速運行。</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.projectPath</span> <span class="string">&#125;&#125;/Library</span> <span class="comment"># 這裡我們用來快取Unity的Library資料夾，以防每次重開專案都要花時間建置Library資料夾。</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">Library-$&#123;&#123;</span> <span class="string">matrix.projectPath</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">matrix.targetPlatform</span> <span class="string">&#125;&#125;</span> <span class="comment"># key即identifier，存取時需要。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">webbertakken/unity-builder@v0.10</span> <span class="comment"># unity builder</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">projectPath:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.projectPath</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">unityVersion:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.unityVersion</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">targetPlatform:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.targetPlatform</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment">#customParameters: "-myParameter myValue -myBoolean -ThirdParameter andItsValue" # 自定義參數，依情況使用</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span> <span class="comment"># 上傳artifacts</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.targetPlatform</span> <span class="string">&#125;&#125;</span> <span class="string">Build</span> <span class="comment"># 顯示名稱</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">build</span> <span class="comment"># unity-builder產出的檔案路徑固定在build目錄</span></span><br></pre></td></tr></table></figure></li><li>把一些設定改成自己需求，如projectPath、unityVersion、testMode。</li><li>push上去即可運行。</li></ol><h2 id="4-把Request-Activation-File改成手動觸發"><a href="#4-把Request-Activation-File改成手動觸發" class="headerlink" title="4.把Request-Activation-File改成手動觸發"></a>4.把Request-Activation-File改成手動觸發</h2><p>由於我並不需要<strong>每一次</strong>push都生出一個alf檔佔位又浪費運算效能，希望改成當我需要重新activate時才手動呼叫。所以這裡用到上面有提過的repository_dispatch來觸發。<br>修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Acquire</span> <span class="string">activation</span> <span class="string">file</span> <span class="comment"># 該Action的名稱，將顯示在Github Action的頁面UI</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">repository_dispatch</span>  <span class="comment">#觸發Action的條件，改為repository_dispatch觸發</span></span><br><span class="line"><span class="attr">jobs:</span> <span class="comment"># 工作項目，可平行處理。</span></span><br><span class="line">  <span class="attr">activation:</span> <span class="comment"># 工作項目的變數名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Request</span> <span class="string">manual</span> <span class="string">activation</span> <span class="string">file</span> <span class="string">🔑</span> <span class="comment"># 工作項目的顯示名稱，將顯示在Action頁面UI上。</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.action</span> <span class="string">==</span> <span class="string">'request_activation_file'</span> <span class="comment"># 判斷傳入參數是否為request_activation_file，是才會運行。注意github.event.action即curl傳入的參數event_type</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 運行的裝置</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">        <span class="comment"># Request manual activation file</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Request</span> <span class="string">manual</span> <span class="string">activation</span> <span class="string">file</span> <span class="comment"># 顯示名稱</span></span><br><span class="line">          <span class="attr">id:</span> <span class="string">getManualLicenseFile</span> <span class="comment"># 變數名，內部使用</span></span><br><span class="line">          <span class="attr">uses:</span> <span class="string">webbertakken/unity-request-manual-activation-file@v1.1</span> <span class="comment"># 引用外部方法。</span></span><br><span class="line">          <span class="attr">with:</span> <span class="comment"># with用於輸入參數，可想像成上面是一個叫getManualLicenseFile()的函數/方法</span></span><br><span class="line">            <span class="attr">unityVersion:</span> <span class="number">2018.4</span><span class="string">.13f1</span> <span class="comment"># 參數，用於輸入進上方的函數/方法。</span></span><br><span class="line">        <span class="comment"># Upload artifact (Unity_v20XX.X.XXXX.alf)</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Expose</span> <span class="string">as</span> <span class="string">artifact</span></span><br><span class="line">          <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span> <span class="comment"># 引用外部方法，該方法為將指定路徑下的檔案上傳為artifact。</span></span><br><span class="line">          <span class="attr">with:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.getManualLicenseFile.outputs.filePath</span> <span class="string">&#125;&#125;</span> <span class="comment"># 引用上面step1的輸出值(outputs)</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.getManualLicenseFile.outputs.filePath</span> <span class="string">&#125;&#125;</span> <span class="comment"># 引用上面step1的輸出值(outputs)</span></span><br></pre></td></tr></table></figure><p><strong>注意第2行與第6行即可。</strong></p><p>修改後記得Push上去。<br>之後用curl呼叫API的<code>event_type</code>改為<code>request_activation_file</code>，送出即觸發Action。</p><h1 id="成果畫面"><a href="#成果畫面" class="headerlink" title="成果畫面"></a>成果畫面</h1><p>任意commit並push上去至master後自動運行Tester和Builder。</p><h2 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h2><p>測試後將成果輸出至artifacts。<br><img src="https://i.imgur.com/3mVVstT.jpg" alt=""></p><h2 id="Build-Executable"><a href="#Build-Executable" class="headerlink" title="Build Executable"></a>Build Executable</h2><p>各平台的執行檔皆會輸出至artifacts。<br><img src="https://i.imgur.com/5YmBPuA.jpg" alt=""></p><h2 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h2><p>有人開啟pull request時將會自動檢查測試一輪，並顯示是否通過。<br><img src="https://i.imgur.com/3P6eRws.jpg" alt=""></p><h2 id="Badge"><a href="#Badge" class="headerlink" title="Badge"></a>Badge</h2><p>可以在repo首頁的readme中加入badge，以便查看專案狀態。<br><img src="https://i.imgur.com/Tw8bhPe.jpg" alt=""></p><h1 id="專案網址"><a href="#專案網址" class="headerlink" title="專案網址"></a>專案網址</h1><p><a href="https://github.com/qwe321qwe321qwe321/GithubActionTest" target="_blank" rel="noopener">https://github.com/qwe321qwe321qwe321/GithubActionTest</a></p><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>目前方法的缺點還是挺嚴重的，第一是前面提過的<strong>手動授權</strong>，第二是<strong>Github的免費Storage只有1G</strong>，Build產出的執行檔通常都100M以上，三平台就300M，這樣用不到幾次就會塞滿了。</p><p>手動授權的部分目前還沒解決，考慮用爬蟲的方式可以從上面提到的github專案下去修改。</p><p>儲存空間的問題有解決了，記錄在另外一篇: <a href="/2020/02/27/Solve-the-problem-of-redundant-artifacts-in-Github-Actions/">Solve the problem of the redundant artifacts in Github Actions 清除Github Actions中多餘的Artifacts</a>試試看。<br>儲存空間的問題目前有找到一個自動清除artifacts的方法，等測試完可行再記錄。</p><h1 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h1><ul><li><a href="https://github.com/webbertakken/unity-actions" target="_blank" rel="noopener">https://github.com/webbertakken/unity-actions</a></li><li><a href="http://www.btellez.com/posts/triggering-github-actions-with-webhooks.html" target="_blank" rel="noopener">Setting up Webhooks for Github Actions</a></li><li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener">Github Actions: Events that trigger workflows</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbLTE1MTI2MjIxMTRdfQ==</li></ul><p>–&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 專案管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用PlayerLoopSystem理解Unity主迴圈，並解釋SyncTransforms的執行時機</title>
      <link href="/2019/11/17/%E7%94%A8PlayerLoopSystem%E7%90%86%E8%A7%A3Unity%E4%B8%BB%E8%BF%B4%E5%9C%88%EF%BC%8C%E4%B8%A6%E8%A7%A3%E9%87%8BSyncTransforms%E7%9A%84%E5%9F%B7%E8%A1%8C%E6%99%82%E6%A9%9F/"/>
      <url>/2019/11/17/%E7%94%A8PlayerLoopSystem%E7%90%86%E8%A7%A3Unity%E4%B8%BB%E8%BF%B4%E5%9C%88%EF%BC%8C%E4%B8%A6%E8%A7%A3%E9%87%8BSyncTransforms%E7%9A%84%E5%9F%B7%E8%A1%8C%E6%99%82%E6%A9%9F/</url>
      
        <content type="html"><![CDATA[<p><em>本篇文章撰寫於2019/11/17，版本為 Unity2018.4</em></p><h1 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h1><p>最近卡在一個問題:<br>「<a href="https://docs.unity3d.com/ScriptReference/Physics-autoSyncTransforms.html" target="_blank" rel="noopener">Physics2D.autoSyncTransforms</a> = false的情況下，Unity內部到底何時會進行Sync？」<br>根據<a href="https://forum.unity.com/threads/physics-synctransforms-questions.487424/" target="_blank" rel="noopener">官方工程師的講法</a>，如果關閉時應該是只會在FixedUpdate以前Sync一次，其他時間點不會同步。<br>但經過測試，疑似在Update期間也會Sync啊？<br>偏偏Unity官網提供的<a href="https://docs.unity3d.com/2018.4/Documentation/Manual/ExecutionOrder.html" target="_blank" rel="noopener">執行順序圖</a>根本沒有寫到何時Sync。</p><p>於是後來翻到了Unity有提供一個實驗性的底層API: <a href="https://docs.unity3d.com/2018.4/Documentation/ScriptReference/Experimental.LowLevel.PlayerLoop.html" target="_blank" rel="noopener">PlayerLoop</a><br>它號稱可以讓使用者修改Unity主迴圈，因此這對我們分析Unity執行順序非常有幫助。</p><a id="more"></a><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>將整個主迴圈Print出來:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">ROOT NODE</span><br><span class="line">Initialization</span><br><span class="line">PlayerUpdateTime</span><br><span class="line">AsyncUploadTimeSlicedUpdate</span><br><span class="line">SynchronizeInputs</span><br><span class="line">SynchronizeState</span><br><span class="line">XREarlyUpdate</span><br><span class="line">EarlyUpdate</span><br><span class="line">PollPlayerConnection</span><br><span class="line">ProfilerStartFrame</span><br><span class="line">GpuTimestamp</span><br><span class="line">AnalyticsCoreStatsUpdate</span><br><span class="line">UnityWebRequestUpdate</span><br><span class="line">ExecuteMainThreadJobs</span><br><span class="line">ProcessMouseInWindow</span><br><span class="line">ClearIntermediateRenderers</span><br><span class="line">ClearLines</span><br><span class="line">PresentBeforeUpdate</span><br><span class="line">ResetFrameStatsAfterPresent</span><br><span class="line">UpdateAllUnityWebStreams</span><br><span class="line">UpdateAsyncReadbackManager</span><br><span class="line">UpdateStreamingManager</span><br><span class="line">UpdateTextureStreamingManager</span><br><span class="line">UpdatePreloading</span><br><span class="line">RendererNotifyInvisible</span><br><span class="line">PlayerCleanupCachedData</span><br><span class="line">UpdateMainGameViewRect</span><br><span class="line">UpdateCanvasRectTransform</span><br><span class="line">XRUpdate</span><br><span class="line">UpdateInputManager</span><br><span class="line">ProcessRemoteInput</span><br><span class="line">ScriptRunDelayedStartupFrame</span><br><span class="line">UpdateKinect</span><br><span class="line">DeliverIosPlatformEvents</span><br><span class="line">TangoUpdate</span><br><span class="line">DispatchEventQueueEvents</span><br><span class="line">DirectorSampleTime</span><br><span class="line">PhysicsResetInterpolatedTransformPosition</span><br><span class="line">SpriteAtlasManagerUpdate</span><br><span class="line">PerformanceAnalyticsUpdate</span><br><span class="line">FixedUpdate</span><br><span class="line">ClearLines</span><br><span class="line">NewInputFixedUpdate</span><br><span class="line">DirectorFixedSampleTime</span><br><span class="line">AudioFixedUpdate</span><br><span class="line">ScriptRunBehaviourFixedUpdate</span><br><span class="line">DirectorFixedUpdate</span><br><span class="line">LegacyFixedAnimationUpdate</span><br><span class="line">XRFixedUpdate</span><br><span class="line">PhysicsFixedUpdate</span><br><span class="line">Physics2DFixedUpdate</span><br><span class="line">DirectorFixedUpdatePostPhysics</span><br><span class="line">ScriptRunDelayedFixedFrameRate</span><br><span class="line">PreUpdate</span><br><span class="line">PhysicsUpdate</span><br><span class="line">Physics2DUpdate</span><br><span class="line">CheckTexFieldInput</span><br><span class="line">IMGUISendQueuedEvents</span><br><span class="line">NewInputUpdate</span><br><span class="line">SendMouseEvents</span><br><span class="line">AIUpdate</span><br><span class="line">WindUpdate</span><br><span class="line">UpdateVideo</span><br><span class="line">Update</span><br><span class="line">ScriptRunBehaviourUpdate</span><br><span class="line">ScriptRunDelayedDynamicFrameRate</span><br><span class="line">ScriptRunDelayedTasks</span><br><span class="line">DirectorUpdate</span><br><span class="line">PreLateUpdate</span><br><span class="line">AIUpdatePostScript</span><br><span class="line">DirectorUpdateAnimationBegin</span><br><span class="line">LegacyAnimationUpdate</span><br><span class="line">DirectorUpdateAnimationEnd</span><br><span class="line">DirectorDeferredEvaluate</span><br><span class="line">UNetUpdate</span><br><span class="line">EndGraphicsJobsAfterScriptUpdate</span><br><span class="line">ParticleSystemBeginUpdateAll</span><br><span class="line">ScriptRunBehaviourLateUpdate</span><br><span class="line">ConstraintManagerUpdate</span><br><span class="line">PostLateUpdate</span><br><span class="line">PlayerSendFrameStarted</span><br><span class="line">DirectorLateUpdate</span><br><span class="line">ScriptRunDelayedDynamicFrameRate</span><br><span class="line">PhysicsSkinnedClothBeginUpdate</span><br><span class="line">UpdateRectTransform</span><br><span class="line">UpdateCanvasRectTransform</span><br><span class="line">PlayerUpdateCanvases</span><br><span class="line">UpdateAudio</span><br><span class="line">VFXUpdate</span><br><span class="line">ParticleSystemEndUpdateAll</span><br><span class="line">EndGraphicsJobsAfterScriptLateUpdate</span><br><span class="line">UpdateCustomRenderTextures</span><br><span class="line">UpdateAllRenderers</span><br><span class="line">EnlightenRuntimeUpdate</span><br><span class="line">UpdateAllSkinnedMeshes</span><br><span class="line">ProcessWebSendMessages</span><br><span class="line">SortingGroupsUpdate</span><br><span class="line">UpdateVideoTextures</span><br><span class="line">UpdateVideo</span><br><span class="line">DirectorRenderImage</span><br><span class="line">PlayerEmitCanvasGeometry</span><br><span class="line">PhysicsSkinnedClothFinishUpdate</span><br><span class="line">FinishFrameRendering</span><br><span class="line">BatchModeUpdate</span><br><span class="line">PlayerSendFrameComplete</span><br><span class="line">UpdateCaptureScreenshot</span><br><span class="line">PresentAfterDraw</span><br><span class="line">ClearImmediateRenderers</span><br><span class="line">PlayerSendFramePostPresent</span><br><span class="line">UpdateResolution</span><br><span class="line">InputEndFrame</span><br><span class="line">TriggerEndOfFrameCallbacks</span><br><span class="line">GUIClearEvents</span><br><span class="line">ShaderHandleErrors</span><br><span class="line">ResetInputAxis</span><br><span class="line">ThreadedLoadingDebug</span><br><span class="line">ProfilerSynchronizeStats</span><br><span class="line">MemoryFrameMaintenance</span><br><span class="line">ExecuteGameCenterCallbacks</span><br><span class="line">ProfilerEndFrame</span><br></pre></td></tr></table></figure><p>蠻複雜的，需要一個視覺化的UI比較好觀察。</p><p>在網路上找到一位網友Lotte用PlayerLoop寫了一個<a href="https://www.patreon.com/posts/unity-2018-1-16336053" target="_blank" rel="noopener">視覺化看主迴圈執行順序的腳本</a><br>這不但是一個很好參考的使用案例，更是一個功能強大的腳本。<br>也因此接下來就用這個腳本來修改成我要的功能。</p><p>首先，先建一個Singleton的測試腳本掛在有Rigidbody的物件上。<br>腳本寫了一個檢查是否Sync的方法，回傳True代表已經Sync了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">TestIfSyncTransforms</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Singleton.</span></span><br><span class="line">    <span class="keyword">if</span> (s_Instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check if sync transform.</span></span><br><span class="line">    <span class="keyword">if</span> ((Vector2)s_Instance.transform.position == s_Instance.m_Rigidbody2D.position) &#123;</span><br><span class="line">        <span class="comment">// Modify transform for next checking.</span></span><br><span class="line">        s_Instance.transform.position += Vector3.right;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Default PlayerLoop內將的每個Update之間插入一個CustomSyncTestUpdate。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改Lotte腳本內的方法</span></span><br><span class="line"><span class="function">PlayerLoopSystem <span class="title">GenerateCustomLoop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Note: this also resets the loop to its defalt state first.</span></span><br><span class="line">    <span class="keyword">var</span> playerLoop = PlayerLoop.GetDefaultPlayerLoop();</span><br><span class="line">    hasCustomPlayerLoop = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 僅插入從FixedUpdate至Update之間的所有內部Update</span></span><br><span class="line">    <span class="keyword">int</span> subSystemListFrom = <span class="number">2</span>; <span class="comment">// Fixed Update</span></span><br><span class="line">    <span class="keyword">int</span> subSystemListTo = <span class="number">4</span>; <span class="comment">// Update</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = subSystemListFrom; i &lt;= subSystemListTo; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> updateSystem = playerLoop.subSystemList[i];</span><br><span class="line">        <span class="keyword">var</span> newList = <span class="keyword">new</span> List&lt;PlayerLoopSystem&gt;(updateSystem.subSystemList);</span><br><span class="line">        <span class="comment">// Insert the start event.</span></span><br><span class="line">        newList.Insert(<span class="number">0</span>, CustomSyncTestUpdate.GetNewSystem(<span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125; Start"</span>, updateSystem.type.Name)));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; newList.Count; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> subUpdate = newList[j];</span><br><span class="line">            newList.Insert(j + <span class="number">1</span>, CustomSyncTestUpdate.GetNewSystem(<span class="keyword">string</span>.Format(<span class="string">"After &#123;0&#125;"</span>, subUpdate.type.Name)));</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// convert the list back to an array and plug it into the Update system.</span></span><br><span class="line">        updateSystem.subSystemList = newList.ToArray();</span><br><span class="line">        <span class="comment">// dont forget to put our newly edited System back into the main player loop system!!</span></span><br><span class="line">        playerLoop.subSystemList[i] = updateSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> playerLoop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> CustomSyncTestUpdate &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PlayerLoopSystem <span class="title">GetNewSystem</span>(<span class="params"><span class="keyword">string</span> testScope</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PlayerLoopSystem() &#123;</span><br><span class="line">            type = <span class="keyword">typeof</span>(CustomSyncTestUpdate),</span><br><span class="line">            updateDelegate = () =&gt; UpdateFunction(testScope)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateFunction</span>(<span class="params"><span class="keyword">string</span> testScope</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">bool</span> sync = SyncTransformsTester.TestIfSyncTransforms();</span><br><span class="line">        <span class="keyword">if</span> (sync) &#123;</span><br><span class="line">            <span class="comment">// 若有Sync則Log以紅字顯示</span></span><br><span class="line">            Debug.LogFormat(<span class="string">"&lt;color=red&gt;[&#123;0&#125;]: &#123;1&#125;&lt;/color&gt;"</span>, testScope, sync);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Debug.LogFormat(<span class="string">"[&#123;0&#125;]: &#123;1&#125;"</span>, testScope, sync);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入後的主迴圈長這樣:<br><img src="https://i.imgur.com/Hif4O3o.png" alt=""></p><p>另外在測試物件上的腳本也添加以下Code來檢查是否Sync:<br>(Log中以綠色字體顯示)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Debug.Log(<span class="string">"&lt;color=green&gt;FixedUpdate!&lt;/color&gt;"</span>);</span><br><span class="line">    <span class="keyword">bool</span> sync = TestIfSyncTransforms();</span><br><span class="line">    <span class="keyword">if</span> (sync) &#123;</span><br><span class="line">        Debug.LogFormat(<span class="string">"&lt;color=green&gt;[&#123;0&#125;]: &#123;1&#125;&lt;/color&gt;"</span>, <span class="string">"FixedUpdate"</span>, sync);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Debug.Log(<span class="string">"&lt;color=green&gt;Update!&lt;/color&gt;"</span>);</span><br><span class="line">    <span class="keyword">bool</span> sync = TestIfSyncTransforms();</span><br><span class="line">    <span class="keyword">if</span> (sync) &#123;</span><br><span class="line">        Debug.LogFormat(<span class="string">"&lt;color=green&gt;[&#123;0&#125;]: &#123;1&#125;&lt;/color&gt;"</span>, <span class="string">"Update"</span>, sync);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Debug.Log(<span class="string">"&lt;color=green&gt;LateUpdate!&lt;/color&gt;"</span>);</span><br><span class="line">    <span class="keyword">bool</span> sync = TestIfSyncTransforms();</span><br><span class="line">    <span class="keyword">if</span> (sync) &#123;</span><br><span class="line">        Debug.LogFormat(<span class="string">"&lt;color=green&gt;[&#123;0&#125;]: &#123;1&#125;&lt;/color&gt;"</span>, <span class="string">"Update"</span>, sync);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h2><p>經Log發現，僅在Physics2DFixedUpdate時更新。<br><img src="https://i.imgur.com/tzGso3d.png" alt=""><br>照順序來看，可以得知Physics2DFixedUpdate就是InternalPhysicsUpdate。<br>而且Sync只會在InternalPhysicsUpdate的時候才更新。照工程師的說法，應該是一進去就先Sync。<br>經測試，以transform.position為優先，rigidbody.position會直接被蓋掉。</p><p>但是之前若將Rigidbody.Interpolation打開，會變以下結果:<br><img src="https://i.imgur.com/b6cxaJG.png" alt=""><br>多了個Physics2DUpdate的時候會Sync。</p><p>這個Physics2DUpdate是每次Update()以前都會跑的，位於PreUpdate階段。<br><img src="https://i.imgur.com/FaOWCMG.png" alt=""><br>可以理解成，Interpolation修改transform.position的地方就是這個Physics2DUpdate。<br>所以當他發現transform.position是dirty狀態時會直接Sync，而不會覆蓋過去。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>當你要修改Rigidbody物件的座標時，不管改Transform.position或是Rigidbody.position本身都可行，但有以下注意事項:</p><ul><li>若同時修改Rigidbody和Transform，以Transform為主。</li><li>根據<a href="https://docs.unity3d.com/ScriptReference/Rigidbody-position.html" target="_blank" rel="noopener">官網說明</a>，修改Transform效能較差，因為它需要多走Sync的步驟。</li><li>關閉AutoSync的情況下:<ul><li>沒有開啟Interpolation時，每次InternalPhysics執行前才會Sync。</li><li>開啟Interpolation時，除了每次InternalPhysics執行前會Sync以外，每次Update以前也會Sync。</li></ul></li><li>所以頻繁更新Transform的情況下就別開Interpolation了，因為有開跟沒開一樣都會被蓋掉。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Gamedev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Physics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>More Examples for Practice of Cameras in Side-Scrollers (2D Platformer)</title>
      <link href="/2019/11/13/More-Examples-for-Practice-of-Cameras-in-Side-Scrollers-2D-Platformer/"/>
      <url>/2019/11/13/More-Examples-for-Practice-of-Cameras-in-Side-Scrollers-2D-Platformer/</url>
      
        <content type="html"><![CDATA[<p>​The purpose of this post is to show the latest case studies based on <a href="https://www.gdcvault.com/play/1022243/Scroll-Back-The-Theory-and" target="_blank" rel="noopener">Scroll Back: The Theory and Practice of Cameras in Side-Scrollers</a> in GDC2015.<br>Here is the article: <a href="https://docs.google.com/document/d/1iNSQIyNpVGHeak6isbP6AHdHD50gs8MNXF1GCf08efg/pub?embedded=true#h.kskmkvkk89rz" target="_blank" rel="noopener">English</a></p><p>本文目的是延續一個在GDC2015的議程<a href="https://www.gdcvault.com/play/1022243/Scroll-Back-The-Theory-and" target="_blank" rel="noopener">Scroll Back: The Theory and Practice of Cameras in Side-Scrollers</a>的個案研究，以近幾年的橫板平台遊戲的攝影機行為為例。<br>這裡有Johnson大的翻譯文章可以參考: <a href="https://igdshare.org/content/gdc2015-2d-scrolling-itay-keren" target="_blank" rel="noopener">中文</a></p><p><em>Warning: High Data Usage by GIFs</em><br><em>高流量警告: 下文有大量GIF圖</em></p><a id="more"></a><h1 id="Sampling-Method"><a href="#Sampling-Method" class="headerlink" title="Sampling Method"></a>Sampling Method</h1><p>The tool for recording and drawing: <a href="https://github.com/NickeManarin/ScreenToGif/releases" target="_blank" rel="noopener">ScreenToGif</a> - an open-source and lightweight software.</p><p>我們並沒有精準地測量準確的位置與範圍，因為目的僅分析相機的行為模式，不研究實際數值上的變化。<br>We only care about the behavior of the camera instead of the changed value of the camera position. Therefore, we didn’t measure precisely, the lines and ranges are just sketched by intuition instead.</p><h1 id="Case-Studies-in-recent-years"><a href="#Case-Studies-in-recent-years" class="headerlink" title="Case Studies in recent years"></a>Case Studies in recent years</h1><p>目前只考慮<strong>一般左右移動</strong>的攝影機行為，<strong>不考慮</strong>特定焦點、鎖敵、多重目標情形下的攝影機行為。<br>因此，有鼠標、游標、瞄準方向等會影響攝影機行為的遊戲也先<strong>不考慮</strong>。<br>For now, we <strong>only care</strong> about <strong>the horizontal movement</strong> of cameras and <strong>don’t care</strong> about the special camera behavior, such as focusing on the enemy, multiple targets, or a special target.<br>Therefore, there is <strong>no game</strong> which has a cursor, aiming arrow or aiming symbol that may affect their camera</p><h2 id="Celeste"><a href="#Celeste" class="headerlink" title="Celeste"></a>Celeste</h2><p><img src="https://i.imgur.com/4pzimXm.gif" alt=""></p><h2 id="Dead-Cells"><a href="#Dead-Cells" class="headerlink" title="Dead Cells"></a>Dead Cells</h2><p><img src="https://imgur.com/h4soFCD.gif" alt=""></p><h2 id="Death’s-Gambit"><a href="#Death’s-Gambit" class="headerlink" title="Death’s Gambit"></a>Death’s Gambit</h2><p><img src="https://imgur.com/yiTfP6l.gif" alt=""></p><h2 id="Dungeon-Muchines"><a href="#Dungeon-Muchines" class="headerlink" title="Dungeon Muchines"></a>Dungeon Muchines</h2><p><img src="https://imgur.com/raz0JIn.gif" alt=""></p><h2 id="Hollow-Knight"><a href="#Hollow-Knight" class="headerlink" title="Hollow Knight"></a>Hollow Knight</h2><p><img src="https://imgur.com/mMkwSTQ.gif" alt=""></p><h2 id="Limbo"><a href="#Limbo" class="headerlink" title="Limbo"></a>Limbo</h2><p><img src="https://imgur.com/ysQXv2T.gif" alt=""></p><h2 id="Momodora"><a href="#Momodora" class="headerlink" title="Momodora"></a>Momodora</h2><p><img src="https://imgur.com/ZdVNgL6.gif" alt=""></p><h2 id="Ori-and-the-Blind-Foreset"><a href="#Ori-and-the-Blind-Foreset" class="headerlink" title="Ori and the Blind Foreset"></a>Ori and the Blind Foreset</h2><p><img src="https://imgur.com/fOTNQh1.gif" alt=""></p><h2 id="Sundered"><a href="#Sundered" class="headerlink" title="Sundered"></a>Sundered</h2><p><img src="https://imgur.com/27HTHKK.gif" alt=""></p><h2 id="Tonhou-Luna-Night"><a href="#Tonhou-Luna-Night" class="headerlink" title="Tonhou Luna Night"></a>Tonhou Luna Night</h2><p><img src="https://imgur.com/jZcc1uX.gif" alt=""></p><h2 id="Rabi-Ribi"><a href="#Rabi-Ribi" class="headerlink" title="Rabi-Ribi"></a>Rabi-Ribi</h2><p><img src="https://imgur.com/mmBhSSG.gif" alt=""></p><h2 id="Broforce"><a href="#Broforce" class="headerlink" title="Broforce"></a>Broforce</h2><p><img src="https://imgur.com/fE1ZzP8.gif" alt=""></p><h2 id="Terraria"><a href="#Terraria" class="headerlink" title="Terraria"></a>Terraria</h2><p><img src="https://imgur.com/Jj6HiOy.gif" alt=""></p><h2 id="Starbound"><a href="#Starbound" class="headerlink" title="Starbound"></a>Starbound</h2><p><img src="https://imgur.com/WghtRBz.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Gamedev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game Research </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

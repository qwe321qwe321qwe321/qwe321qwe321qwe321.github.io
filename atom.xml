<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PE工具箱</title>
  
  <subtitle>Just a record of the bullshit I encountered in game development.</subtitle>
  <link href="https://qwe321qwe321qwe321.github.io/atom.xml" rel="self"/>
  
  <link href="https://qwe321qwe321qwe321.github.io/"/>
  <updated>2023-07-17T10:43:20.974Z</updated>
  <id>https://qwe321qwe321qwe321.github.io/</id>
  
  <author>
    <name>PeDev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>G8、台北、夏日電玩展參展比較</title>
    <link href="https://qwe321qwe321qwe321.github.io/2023/07/17/expo2023/"/>
    <id>https://qwe321qwe321qwe321.github.io/2023/07/17/expo2023/</id>
    <published>2023-07-17T10:43:20.974Z</published>
    <updated>2023-07-17T10:43:20.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>上週 2023 夏日電玩展剛結束，想來寫一下目前國內北部最大的三個獨立遊戲可以參加的展覽比較。<br />會是比較以個人想法出發的文章，鮮少客觀的論述，有什麼寫不好或搞錯的事項勞請告知，會盡快修正。<br />身為參展商也可以順便寫一點逛展心得 + 分享一些因為 <em>有逛展實際玩過才認識</em> 的潛力作品（非常私心、單憑個人喜好的推薦），感謝 Kevin 長時間顧攤 &lt;(_ _)&gt;。</p><h1 id="g-eight-遊戲展-12-月"><a class="markdownIt-Anchor" href="#g-eight-遊戲展-12-月"></a> G-EIGHT 遊戲展 （12 月）</h1><p>我們的參展初體驗是 22 年底的 G-EIGHT 遊戲展，其實這也是他們第一次辦展，所以可能有些生澀之處。</p><p>但也幸好我們是第一次參展，所以對方有甚麼相對做不好的地方我們可能也比較無感。</p><p>首先主辦方為我們參展商做了蠻多事情，比如：</p><ul><li>免費印製背板</li><li>免費印製場內的交換卡片（但只有 100 張是缺陷）</li><li>場內有個小豬撲滿的人氣投票活動（雖然永遠打不贏赤燭、SIGONO 那種大牌子，但也是個給予開發者鼓勵的好物）</li><li>可以免費借椅子（這是其他攤跟我說的）</li></ul><p>參加的這次是主辦方第一次辦展，沒想到人數還爆滿，超級意外。<br />而且也因為展覽內也就只有我們這些獨立遊戲在展，撇除一些本來就超知名的團隊（赤燭、SIGONO、炎姬）和部分知名海外發行商的遊戲（Devolver Digital），玩家會非常積極嘗試各攤位的遊戲。<br />甚至因為人潮實在太多了導致不少玩家整個下午逛下來只玩到 2 - 3 款遊戲的窘境，不過對我們開發者來說就是<strong>完全不怕沒有人來玩你的遊戲</strong>這樣。</p><p><img src="/images/expo2023/g8.jpg" alt="" /></p><p>比較特別的還有這是唯一一個可以展黃遊的遊戲展，還有展覽時間是罕見的從下午一點到晚上九點這種阿宅作息，很棒。</p><p>身為參展商稍微不滿的幾個點大概就：</p><ol><li>撤展的時間給得太緊，表定 21:00 玩家離場但同時也是廠商離場時間，時間一到就會瘋狂趕人，真的很趕。</li><li>背板跟交換卡片的立意良善，但稍微美中不足的是一些聯絡上的疏失（檔案格式、數量），但就只是經驗不足的問題。</li><li>有些活動的舞台音量很吵，我們離舞台有段距離都感覺被精神轟炸了，很難想像那些緊鄰的攤位怎麼想。</li></ol><blockquote><p>今年 12 月準備舉辦的第二屆改了一些東西，像是展覽時間提早了兩個小時（11:00 - 19:00），必須要有可遊玩版本等等。<br />應該可以期待上面這些缺點會改進。</p></blockquote><h2 id="逛展才發現的潛力作品"><a class="markdownIt-Anchor" href="#逛展才發現的潛力作品"></a> 逛展才發現的潛力作品</h2><ul><li><a href="https://twitter.com/Bacat0307">孽白 White Sin</a> 很老式的惡魔城感，美術讚。</li><li><a href="https://store.steampowered.com/app/2169950/_/">百劍討妖傳綺譚</a> 有妹子、武士刀、流暢操作、打擊感、巨大 BOSS 戰，就是舒服。</li><li><a href="https://store.steampowered.com/app/1858450/_/">即刻離職</a> Beat’em up 類型，遊戲概念蠻有梗的，精緻的戰鬥終結技動畫做的很棒。</li></ul><p>因為太忙了實在沒玩到幾攤，不然其實很多學生畢業團隊的攤我是挺想試的。</p><h1 id="2023-台北國際電玩展2-月"><a class="markdownIt-Anchor" href="#2023-台北國際電玩展2-月"></a> 2023 台北國際電玩展（2 月）</h1><p>這次我們因為是獨立遊戲獎勵計畫的補助團隊，所以攤位被合併升級至「獨立遊戲獎勵計畫」區裡面，所以體驗心得大概會和一般獨立遊戲參展不太一樣。<br />參展費用跟一般攤位一樣是一萬元整，好處是那一區比較特別（？）加上主辦方有額外提供一些服務：</p><ul><li>免費幫我們印製攤位的背板</li><li>免費製作人形立牌</li><li>有個螢幕會輪播遊戲影片</li><li>提供一些配備使用（電腦、螢幕、瓶裝水）</li></ul><p>然後為了讓我們整區的與一般獨立遊戲攤位與眾不同，主辦方搞了個 <em>有設計感</em> 的攤位設計。<br />雖然立意良好，但以結論而言對我們是反效果。</p><p>我們的位置是整區攤位朝內，然後靠近走道的部分又直接被一根大柱子擋住。<br />從走道要看到我們攤位的話必須要從單一方向路過才有辦法看到（另一個方向是完全被擋住的），而且只要旁邊攤位的排隊人潮稍微多一點就會擋住我們攤位的視線。<br /><img src="/images/expo2023/tgs.gif" alt="" /></p><p>然後說這整個展區的架構真的有「特別顯眼」嗎？我持相反意見。<br />我相信會特地來逛獨立遊戲攤位的人多少是看中獨立遊戲那種低成本、小團隊的氣質，而因為我們位置是在兩大塊「獨立遊戲專區」的正中間通道處，再旁邊就是大型商業攤了（大型發行商、硬體零售商、大型營運手遊、LoL 競技舞台等等），所以路過的人很容易也把我們當成某種大型商業攤位，而不會直接認為我們也只是個獨立遊戲攤，所以直接忽略。</p><p>要證實這件事情也意外地簡單，<br />因為展覽期間我很喜歡順便去逛展，遇到稍微熱情的開發者都會聊個幾句，當然聊一聊也會問我們攤位在哪，這時候很有趣的是有幾位會直接說「什麼！？原來這裡有攤位喔，路過完全沒注意到」。</p><p>總之，撇開升級攤位的好意有點過頭之外，台北電玩展的其他方面是還不錯，比如人潮多、逛展有趣（？）、參展事項明顯熟稔很多（包括撤場時間非常寬融）。<br />而且參展的國際廠商很多，能感受到這是個對開發者來說 Social 意義比宣傳意義要重很多的展覽。</p><blockquote><p>實際上我同事也是在這個展勾搭到任天堂發行部門的人，我們才有機會申請 Nintendo 開發帳號，這大概是整個參展最有價值的一件事。</p></blockquote><p>另外有趣的是身為參展商你不只可以在 B2C 的會場逛展，你還可以去 B2B 的會場看看那些還不打算給普羅大眾看到的遊戲，也是個蠻有趣的體驗。</p><h2 id="steam-特賣活動"><a class="markdownIt-Anchor" href="#steam-特賣活動"></a> Steam 特賣活動</h2><p>國內這三個展只有台北電玩展有這個超級大的行銷 BUFF ，就是官方在活動期間會同步舉辦一個 Steam 上的特賣活動，會有一個專屬特賣頁面如下：<br /><a href="https://store.steampowered.com/sale/tgs2023">https://store.steampowered.com/sale/tgs2023</a></p><p>這種活動頁面的流量很高，遠高於自然流量本身，如圖：<br /><img src="/images/expo2023/tgs_impression.png" alt="" /><br /><em>2/2 - 2/6 是台北電玩展活動頁面帶來的流量，每天有 13 萬左右曝光。</em></p><p>台北電玩展這幾天帶來的願望清單也井噴：<br /><img src="/images/expo2023/tgs_wl.png" alt="" /><br /><em>2/3 那天的 Spike 是同時有 reddit 爆文才會噴這麼高，但 2/2 當天我們沒有做任何行銷動作也噴了 600 多，所以估計這個活動頁面帶來的平均願望清單日流量是 600 多。</em></p><h2 id="逛展才發現的潛力作品-2"><a class="markdownIt-Anchor" href="#逛展才發現的潛力作品-2"></a> 逛展才發現的潛力作品</h2><ul><li><a href="https://store.steampowered.com/app/2125840/Planet/">Planet Ü</a> 日本，有 undertale 那種 ㄎㄧㄤ 感，很讚。</li><li><a href="https://www.youtube.com/watch?v=dpa_Fqvj6TY">薔薇と椿</a> 日本，好像是手機還是 Flash 遊戲重製，有趣。</li><li><a href="https://www.facebook.com/Glitchport">17號當鋪</a>  台灣，雖然早就看過，但現場玩覺得美術更屌了。</li><li><a href="https://store.steampowered.com/app/2323140/Ringash/">Ringash</a> 台灣，國產 dmc-like ，酷。</li><li><a href="https://store.steampowered.com/app/1592540/_/">Loretta 蘿厲塔</a> 日本發行商，懸疑驚悚敘事，氛圍與畫面表達很好。</li><li><a href="https://store.steampowered.com/app/1336380/Gripper/">Gripper</a> 保加利亞，美術很猛的摩托車戰鬥遊戲（？ 不過操作有點微妙。</li><li><a href="https://www.facebook.com/illamsoft/">錯覺視界：米拉渚的危機</a>  新加坡，結合視覺錯覺（e.g. 紀念碑谷）和<a href="https://store.steampowered.com/app/353540/Stephens_Sausage_Roll/">史蒂芬烤香腸</a>的 Puzzle Game。</li><li><a href="https://store.steampowered.com/app/1801110/_/">不同的冬天</a> 日本，在 B2B 區，資訊不共享的橫向雙人合作。</li><li><a href="https://store.steampowered.com/app/2286780/_/">亞路塔</a> 台灣，在 B2B 區，雖然學生時期的版本早看過，但商業化改良之後的玩法這是第一次見，美術讚，戰鬥手感也不錯。</li></ul><h1 id="2023-夏日電玩展-7-月"><a class="markdownIt-Anchor" href="#2023-夏日電玩展-7-月"></a> 2023 夏日電玩展 （7 月）</h1><p>這次單純就是想說有展覽就參加，說真的也沒什麼測試目的或宣傳目的，比較佛系。</p><p>主辦跟台北電玩展是同樣的單位，和 G-EIGHT 是一樣的場地（花博爭艷館）。</p><p>也因為參加過台北電玩展有折扣，就買了 10,000 元的進階方案試試。<br />但實際上我個人還蠻不滿意這個進階方案的，如果是 15,000 的話一定不會買這個。</p><p>第一是我們攤位的位置不好，位置已經在邊邊還面朝牆壁，是個除非你人走進來否則完全看不到的慘狀（其實台北電玩展有些攤位也是這樣）。<br /><img src="/images/expo2023/sgs.jpg" alt="" /></p><p>再來是桌子跟椅子高度不合，桌子已經換成高的組合桌（可站姿遊玩的高度）了，椅子卻還是普通的折疊椅，這樣完全沒有辦法讓玩家坐著好好玩，而我自己又是個很討厭長時間站著玩遊戲的人，腳已經夠痠了還要站著。<br />所以當我發現葉開罐工作室他們有高腳椅之後馬上也跟著租了高腳椅兩張（花了 1,260 元）。<br />另外為了這攤位也額外花了 1,300 來印海報來貼。</p><p>總之這裡的參展體驗跟台北電玩展差不多，但逛展體驗差了不少，因為攤位少，而且也幾乎沒國際大廠的新作，較為無趣。<br />跟台北電玩展不同的是，明顯感覺的到夏日電玩展的桌遊攤位非常多，若對桌遊感興趣的人比較適合來這裡。</p><p>前面寫了一堆，不過攤位少也不全然是缺點，反而產生了一些有趣的新現象，比如說「<strong>單一玩家願意待在同一個攤位的時間變長了</strong>」。<br />因為我們遊戲的 demo 超級長，有 1 - 2 小時的內容，多虧了這個新現象才讓這次試玩的破關率明顯比台北電玩展高了不少（當然在經歷過新品節後的關卡曲線已經很安定了很少有過於勸退的體驗也是因素之一）。<br />甚至有一位玩家是先花了一個小時多把我們 Demo 版 1 - 4 關破完之後去其他攤逛，逛一逛又繞回來挑戰我們這次追加的兩個未經驗證過的關卡（花了 40 分鐘破完）。而且他破完之後還繼續多待了一個小時邊看下一個人玩邊跟我聊他的心得，而我也順勢問他關於新關卡的體驗與想法。</p><p>總之這種性質的展覽的玩家與開發者雙方都不會太忙碌於其他事情，所以會相對比較容易跟進行深度地遊戲測試與交流想法，也算是非常有收穫的一次參展經驗。</p><h2 id="逛展才發現的潛力作品-3"><a class="markdownIt-Anchor" href="#逛展才發現的潛力作品-3"></a> 逛展才發現的潛力作品</h2><ul><li><a href="https://gnn.gamer.com.tw/detail.php?sn=252989">Immune Simulator</a> 畫面有特色、玩法特別，感覺蠻有品味的遊戲，不過我試玩範圍內還玩不出什麼心得。</li><li><a href="https://store.steampowered.com/app/2391350/_/">蝴蝶旅社—潛伏</a> 其實在 G8 展就有出沒的點擊冒險遊戲，但那時候我沒玩到。這次現場的試玩體驗蠻好的，美術超棒，流程雖然超短但是故事發展有勾起我的好奇心，想知道後續。</li><li><a href="https://store.steampowered.com/app/1335360/_/">大廚老陳</a> 橫向捲軸版的 <a href="https://store.steampowered.com/app/448510/Overcooked/">Overcooked</a> ，特別的是加入了戰鬥打怪元素，現場遊玩的效果挺好的，稍微意外的是平台跳躍的手感做得不錯。</li><li><a href="https://www.instagram.com/kid77421/">鬼壓床</a> 環境與光影效果處理的很棒的第一人稱恐怖遊戲。</li></ul><h1 id="最後比較一下"><a class="markdownIt-Anchor" href="#最後比較一下"></a> 最後比較一下</h1><table><thead><tr><th></th><th>G-EIGHT</th><th>台北國際電玩展（獨立遊戲獎勵計畫專區）</th><th>夏日電玩展（標準方案）</th><th>夏日電玩展（進階方案）</th></tr></thead><tbody><tr><td>費用</td><td>10,000（未稅）</td><td>10,500</td><td>4,500</td><td>15,000（有參加過台北電玩展折 5,000）</td></tr><tr><td>桌子</td><td>一張 180cm</td><td>一張高桌（不知道多寬）</td><td>一張 180cm</td><td>一張 240cm 組合桌，高度適合站立遊玩</td></tr><tr><td>椅子</td><td>兩張</td><td>兩張高腳椅</td><td>兩張</td><td>兩張，但是高度不合桌子</td></tr><tr><td>攤位裝潢</td><td>背板</td><td>背板、人形立牌</td><td>桌上立牌</td><td>公司名稱的橫幅</td></tr><tr><td>其他</td><td>酒精、延長線、可額外免費借椅子</td><td>電腦、螢幕、瓶裝水、延長線</td><td>無</td><td>32 吋螢幕</td></tr><tr><td>玩家活動</td><td>集換式卡片 100 張、撲滿投票</td><td>玩家集點活動、留言板</td><td>玩家集點活動</td><td>玩家集點活動</td></tr><tr><td>ONE-PASS 公關票</td><td>5</td><td>10</td><td>不確定</td><td>20</td></tr><tr><td>廠商證</td><td>3 張</td><td>2 張</td><td>不確定</td><td>5 張</td></tr><tr><td>展出時間</td><td>13:00 - 21:00</td><td>09:00 - 17:00</td><td>10:00 - 18:00</td><td>10:00 - 18:00</td></tr><tr><td>Steam 特賣頁面</td><td>無</td><td>有</td><td>無</td><td>無</td></tr></tbody></table><h1 id="結論"><a class="markdownIt-Anchor" href="#結論"></a> 結論</h1><p>你如果是做小黃遊的團隊就只能去 G-EIGHT，不過我覺得獨立遊戲團隊也都蠻適合去 G-EIGHT ，玩家數量非常多而且全部都是針對獨立遊戲、小黃遊來的，不像其他兩個的多數受眾還是大型手遊、三廠主機遊戲為主。<br />但 G-EIGHT 非常忙，你也幾乎沒辦法去別攤閒聊，因為他們也很忙，就只有開展前後的時間可以去晃。<br />因為人潮很多，也不建議拿長時數的 Demo 來這個場合，會讓人流塞到不行。</p><p>想跟開發者、廠商社交 、找合作機會順便逛逛遊戲展的話推薦去台北電玩展，我不確定可不可以只買 B2B 方案然後去逛 B2C ，如果可以的話推薦這樣做。<br />已經有 Steam 頁面<strong>需要衝願望清單</strong>也必參加這個，也只要買 B2B 就可以加進去名單了，這我確認過。</p><p>最後是夏日電玩展，若想進行<strong>長時間試玩測試</strong>，或者希望玩家可以進行比較長時間的交流（例如玩完之後希望他們填寫較為詳盡的問卷）的話，推薦來這裡參展。另外如果你是桌遊愛好者、製作者也推薦參加這個。<br />然後我個人會覺得買 4,500 的攤就好了，攤位小一點但是夠塞兩台電腦，而曝光程度也不會差太多，作為玩家我會更喜歡矮桌子坐著玩，比較方便待久一點。</p><blockquote><p>平衡報導一下：長時間顧攤的同事 Kevin 是認為進階方案的攤位海報、背板會比較吸引人注目，而標準攤位只有一個桌上小立牌。若你被安排到的位置不好，只要人潮稍微多一點就什麼都看不到，需要自行斟酌。</p></blockquote>]]></content>
    
    
    <summary type="html">上週 2023 夏日電玩展剛結束，想來寫一下目前國內北部最大的三個獨立遊戲可以參加的展覽比較。</summary>
    
    
    
    
    <category term="Gamedev" scheme="https://qwe321qwe321qwe321.github.io/tags/Gamedev/"/>
    
    <category term="Marketing" scheme="https://qwe321qwe321qwe321.github.io/tags/Marketing/"/>
    
    <category term="Game Expo" scheme="https://qwe321qwe321qwe321.github.io/tags/Game-Expo/"/>
    
  </entry>
  
  <entry>
    <title>我參加了 GMTK Game Jam 2023</title>
    <link href="https://qwe321qwe321qwe321.github.io/2023/07/11/GMTKJam2023/"/>
    <id>https://qwe321qwe321qwe321.github.io/2023/07/11/GMTKJam2023/</id>
    <published>2023-07-10T21:01:04.000Z</published>
    <updated>2023-07-10T21:01:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>這篇文沒有打算認真介紹 GMTK Game Jam，隨意聊聊單人參賽的心得。</p></blockquote><p>週末六日 48 小時參加了線上的 GMTK Game Jam，主題是「ROLES REVERSED」，是要我們改變遊戲的操作對象，在一個常見的遊戲類型中以一個不常見的角度來遊玩（這我的解釋）。<br />舉例說 「Tetris 但你操作的是整個關卡」、「 Pong but you play as the ball 」之類的。<br />或者更單純的敵我雙方反轉（<a href="https://store.steampowered.com/app/953490/CARRION/">Carrion</a>、<a href="https://store.steampowered.com/app/629820/Maneater/">Maneater</a>）也符合主題。<br />需要更多解釋可以直接看主題影片：<a href="https://www.youtube.com/watch?v=7JhCPhqWTas">This year’s theme is…</a><br />（純照字面意思的話 <a href="https://store.steampowered.com/app/70300/VVVVVV/">VVVVVV</a> 不知道能不能過，如果不能，那一定是因為複數 <code>S</code> 在搞。）</p><p>我直到禮拜五才想到報名，實際看了主題後我才真正決定要參賽，因為「OOO but XXX」就是個常見的優秀創作公式，感覺很有趣。<br />我之前參加 game jam 的經驗都是組隊，儘管 GMTK Game Jam 是線上的活動，我之前兩次經驗也都是找認識的人窩在 LAB 裡面做。<br />但我其實一直都挺想嘗試 solo 參賽，一方面所有決定自己做很爽、完全沒有溝通成本，也符合我彆扭的個性；另一方面壓力沒那麼大（跟我的 side projects 一樣毫無責任感，沒做完就沒做完）。</p><p>缺點也很顯而易見，時間已經夠少了（48hr）還要處理所有事情，從發想設計、程式、美術、音樂、到投稿資料等雜事都要幹。<br />剩下的缺點倒還好 – 像是沒人幫你踩剎車，容易自我感覺良好或是瘋狂浪費時間在沒意義的小事上。<br />但我覺得那些也不全然是壞事，我自己就很喜歡看到一些開發者鑽牛角尖在一個超小的事情上打轉，這種工程主義與個人執著的碰撞才是 Indie 的浪漫。<br />當然在有金錢壓力的商業作品上這樣幹是欠揍啦，但 game jam 這種鼓勵發揮想法的活動放飛一下也無所謂吧（但請不要害到隊友）。</p><h1 id="發想遊戲玩法"><a class="markdownIt-Anchor" href="#發想遊戲玩法"></a> 發想遊戲玩法</h1><p>畢竟這次是非常玩法導向的主題（其實每次都是），而且我自己做遊戲也全都是玩法優先的設計，理所當然要先決定玩法才有辦法開始做。<br />大概前 1 個小時我完全是無頭蒼蠅狀態，我覺得這是一個好發揮的主題，但要怎麼發揮地不落入俗套就很難了，尤其我有自覺我只能靠純玩法噱頭來來顯現差異性。<br />總之是一邊看著 Discord 群組各個參賽者的討論，一邊跟一個在當兵放假的朋友隨意閒聊想法，內心想著還是我乾脆不做了。<br />其實也是我那位朋友的一句話讓我有了這次遊戲的確切想法<br />「還是骰子遊戲？你當上帝」<br />「靠杯」<br />最後就有了這次的遊戲標題<br /><strong>「Turn-based strategy but you are RNG」</strong><br />簡單說就是在一個回合制策略的遊戲架構之下，你扮演的不是角色本身，而是「RNG （亂數產生器）」。<br />其實「玩弄亂數表」的概念是我曾思考過的遊戲點子之一。發想起點是玩某些戰棋遊戲被敵人 1% 爆擊搞死、或是我方 90% 命中率卻打不中這種會想「幹你 RNG 」的場面氣到，進而想到如果玩家扮演的就是 RNG 本身那是否還蠻有趣的 –<br /><strong>你要想盡辦法讓亂數的順序有利於我方士兵，以達成小蝦米搏贏大鯨魚的奇蹟場面</strong>。<br />但這個點子一直沒有做出來也只是因為我覺得這個架構的大前提是要有一個足夠有趣的戰棋遊戲本身，但戰棋遊戲的系統之繁多，實在沒空做。</p><p>要在 Game Jam 做出這個概念的話我不可能真的去做我從未做過的 「戰略遊戲（tactics）」，也就是那些有空間概念、移動指令、範圍攻擊的策略遊戲，那實在太複雜了。<br />而且我的目標是用亂數玩弄命中率、爆擊率等機率數值，那其實完全不需要空間概念才對，所以最後做成了很純粹的帶有命中、爆擊的回合制戰鬥遊戲。</p><h1 id="設定美術風格"><a class="markdownIt-Anchor" href="#設定美術風格"></a> 設定美術風格</h1><p>因為我本身也就只是個程式，想要 solo 參賽首先要克服的最大的問題是我根本不會畫畫。<br />這對我來說應該是起頭最難的一件事情，我知道有些工程師完全可以在不仰賴美術的前提下開發。但至少在創作上，我個人是非常吃重視覺效果的，更可以說很多功能設計也都是先有美術風格後才有辦法順水推舟發展出來的結果。我非常難做出「先設計一個泛用風格但功能完整，最後才決定美術風格」的遊戲，我相信經驗老道的製作人有辦法，但我個人還是著重在以現有內容迭代新想法的設計。</p><p>總之要解決美術風格的問題，大概剩這幾種解法：</p><ol><li>挑一個不怎麼需要畫畫技術的美術風格（最好是 Shader 套上去就可以讓基礎 3D 模型完美展現出風格的那種）</li><li>買現成素材瘋狂 bashing （大部分人應該是這樣，缺點是蒐集素材跟美術 Sense 很難搞）</li><li>AI Art（但這次參賽規則明確禁止任何 Generative AI）</li><li>完全不管美術，意思到了就好 （那遊戲會很挑玩家）</li></ol><p>我最後是用 1. + 4.解<br />主要是想參考 <a href="https://store.steampowered.com/developer/sokpop">Sokpop</a> 或 <a href="https://store.steampowered.com/app/736260/Baba_Is_You/">BABA IS YOU</a> 的那種塗鴉風，那首先需要的就是「抖抖抖」的視覺效果。<br />實作參考這篇 <a href="https://www.alanzucconi.com/2019/04/16/sprite-doodle-shader-effect/">Sprite Doodle Shader Effect</a><br />之後嘗試搭配我小學生等級的破爛畫技看看<br />先看沒動的樣子：<br /><img src="/images/gmtk2023/doodle_0.png" alt="" /></p><p>開抖：<br /><img src="/images/gmtk2023/doodle_1.gif" alt="" /></p><p>可能是我自我感覺良好，但我覺得抖抖風格已經十足有效了，小學生等級的畫技都可以凹成生動活潑的塗鴉風格，最棒的是我甚至不需要為了人物以外的圖片畫多張 Sprite 動畫（一般實現這種抖抖感是 2 到 3 張 Sprites 交替顯示）。<br />所以好了，美術風格就這樣吧。</p><p>說的容易啦，但視覺摸索到這個階段我已經花了<strong>整整 15 小時</strong>。<br />期間有朝幾個方向嘗試：</p><ul><li>點陣風格，素材全用現成 + <a href="https://assetstore.unity.com/packages/vfx/shaders/fullscreen-camera-effects/propixelizer-177877">ProPixelizer</a><ul><li>ProPixelizer 買了很久但現在是第一次用，因為他是 Per Object Shader 所以不太好用，優點是可以訂製個別物件的細節啦，但我求速成就不好用。</li></ul></li><li>寫實風格，素材全用現成的。做成像是在打桌遊的感覺，不需要有人物。（可參考 Tabletop Simulator 或 Inscryption 、Hands of Fate 這種）<ul><li>太久沒碰 3D Lighting ，一時弄不出好看的光影效果，而且 HDRP 不支援 WebGL 最後就放棄。</li></ul></li></ul><h1 id="本篇重點所以單人參賽會有什麼問題"><a class="markdownIt-Anchor" href="#本篇重點所以單人參賽會有什麼問題"></a> 本篇重點，所以單人參賽會有什麼問題？</h1><p>假設你把以上問題都克服了，像我一樣自豪自己已經算某種成功的 solodev 的話，請你還是多留 1 小時給你的 itch 設定，尤其你如果完全沒有上傳經驗的話更應該如此。</p><p>最後實在太慌亂 + 沒有投稿經驗（過去所有參加 Game Jam 的經驗都是由別人投稿）。<br />我大概剩 20 分鐘的時候才點開 GMTK Game Jam 的 itch 投稿頁，<br />點了 Submit ，<br />沿著彈出窗口選了 Create New Project ，<br />填寫標題、介紹、上傳封面、 Windows 版遊戲，<br />Save。<br />好了安心了，剩下一點時間我來試試 WebGL build 好了，因為照之前的經驗沒有 WebGL 版本的話很難讓人去試玩和評價。<br />Build 是 Build 出來了，但上傳之後遇到一些狗屎問題：</p><ul><li>預設的 Compression Format 是 gzip，而 itch 不支援（改用 Brotli 或 Disabled 就可以）</li><li>輸出 Resolution 有問題，我以 1920x1080 為標準開發，但是在 itch 上預設會變成一個很小而且長寬比錯誤的解析度（好像是640x480之類的）而且不能全螢幕= =，搞了很久還跑去載了個 <a href="https://seansleblanc.itch.io/better-minimal-webgl-template">Better Minimal WebGL Template</a> 來套也一樣。結果是在 itch 的設定裡面有 Embed options 可以直接改大小和全螢幕按鈕顯示與否。</li><li>某些超短的音效在 WebGL 版中消失了，我後來開 Audacity 去拉長音軌重新 build 才修好。</li></ul><blockquote><p>在打這篇文的時候才查到羽毛的這篇 <a href="https://featherchung.wordpress.com/2020/08/23/unity-build-to-itch-io/">將 Unity 專案上傳至 itch.io 經驗談</a>，有把 WebGL 和 itch 的坑都寫出來了，請參加 Game Jam 前都讀一下。</p></blockquote><p>最後其實主辦方最後有延長一個小時讓我們上傳，所以我才有空修這堆 WebGL 和 itch 的屎，但修完之後也差不多壓線了。<br />截止時間過了之後，我鬆了一口氣，有好好完賽了。</p><p>正當我想要好好欣賞 6K 多個投稿作品，順便看一下自己封面圖在這之中足不足夠顯眼的時候，</p><p>我發現我搜尋不到自己的遊戲。</p><p>反覆確認之後，我搞懂了，<strong>我 根 本 沒 有 投 稿</strong>。<br />對，我確實在截止時間前，我是把遊戲做出來了也上傳 <a href="http://itch.io">itch.io</a> 了，但我沒有投稿進 GMTK Game Jam。</p><p>後來問了同樣有參賽的友人，正確的流程是在 Create New Project 之後，你還要再回去 Game Jam 頁面按 Submit 並選擇符合資格的專案才代表參賽。</p><p>總而言之，我之所以文思泉湧、洋洋灑灑地寫了這一大篇文章就只為了一件事 –</p><p>.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.</p><p><em><strong>沒錯，就是抱怨！哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊啊啊</strong></em></p><p>.<br />.<br />.</p><p>好啦都讀到這裡了，還是曬一下完成的作品</p><blockquote><p><a href="https://pedev.itch.io/turn-based-strategy-but-you-are-rng">Turn-based strategy but you are RNG 遊戲頁面</a><br />（教學說明請直接看遊戲頁面底下的圖片）</p></blockquote><div class="video-container"><iframe src="https://www.youtube.com/embed/maALEyZyyQA" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
    
    
    <summary type="html">這篇文沒有打算認真介紹 GMTK Game Jam，隨意聊聊單人參賽的心得。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="Gamedev" scheme="https://qwe321qwe321qwe321.github.io/tags/Gamedev/"/>
    
    <category term="Game Design" scheme="https://qwe321qwe321qwe321.github.io/tags/Game-Design/"/>
    
    <category term="Game Jam" scheme="https://qwe321qwe321qwe321.github.io/tags/Game-Jam/"/>
    
    <category term="Visual Design" scheme="https://qwe321qwe321qwe321.github.io/tags/Visual-Design/"/>
    
  </entry>
  
  <entry>
    <title>以雙螢幕輸出來進行試玩測試</title>
    <link href="https://qwe321qwe321qwe321.github.io/2022/12/13/%E4%BB%A5%E9%9B%99%E8%9E%A2%E5%B9%95%E8%BC%B8%E5%87%BA%E4%BE%86%E9%80%B2%E8%A1%8C%E8%A9%A6%E7%8E%A9%E6%B8%AC%E8%A9%A6/"/>
    <id>https://qwe321qwe321qwe321.github.io/2022/12/13/%E4%BB%A5%E9%9B%99%E8%9E%A2%E5%B9%95%E8%BC%B8%E5%87%BA%E4%BE%86%E9%80%B2%E8%A1%8C%E8%A9%A6%E7%8E%A9%E6%B8%AC%E8%A9%A6/</id>
    <published>2022-12-13T04:44:27.000Z</published>
    <updated>2022-12-13T04:44:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>這篇其實是心得雜談，沒甚麼實作經驗分享。</p></blockquote><p>上週五六日我們團隊參加了實體的遊戲展，這是我們第一次參加這種實體展，也算是第一次開放讓一般玩家試玩的機會。</p><p>之前聽朋友說有一種測試方式是用雙螢幕輸出不同內容，一邊是單純的遊戲畫面，另一邊是會顯示 log、fps 等各種 debug 資訊的遊戲畫面。<br />這樣一來就能在不打擾玩家的前提下有效紀錄所有發生的問題。<br />我覺得寫這個好像很好玩，於是決定在這次參展試試。</p><span id="more"></span><h1 id="雙螢幕輸出的成果"><a class="markdownIt-Anchor" href="#雙螢幕輸出的成果"></a> 雙螢幕輸出的成果</h1><p>總而言之先上成果，具體來說我到底希望做到什麼樣子，不過我照片拍很少所以也有點難正確地示意。<br /><img src="/images/g8-1.jpg" alt="現場照片" /> <em>我們遊戲是第一排的 Bionic Bay</em></p><p>以玩家視角來看，我們攤位上其實就只有兩個螢幕、兩隻手把、兩隻耳機在桌上的配置。</p><p>而實際上的這個時候的我是位在背板後方的小房間內，看著其中一台是筆電的螢幕來檢視玩家當前有沒有發生任何異樣。</p><p><img src="/images/g8-2.jpg" alt="後台的螢幕畫面" /></p><p>主要檢查點有：</p><ul><li>Console 有沒有噴error ？</li><li>Frame Rate 在哪個場景是否突然不穩？</li><li>長期運行之下有沒有 Memory Leak 的狀況？</li><li>玩家是否需要顯示提示？</li></ul><p>以結果來說執行上還蠻成功的，唯二當下遇到但沒處理好的事情是：</p><ol><li>雙螢幕輸出的垂直同步出現問題，某一邊的螢幕會無法正確垂直同步導致螢幕撕裂。</li><li>OBS 錄影設定沒搞好，最後錄影變成還是錄玩家看到的遊戲畫面那一端</li></ol><h1 id="實作與執行"><a class="markdownIt-Anchor" href="#實作與執行"></a> 實作與執行</h1><h2 id="雙螢幕輸出"><a class="markdownIt-Anchor" href="#雙螢幕輸出"></a> 雙螢幕輸出</h2><p>具體實作很簡單，<br />參考這篇官方文檔即可： <a href="https://docs.unity3d.com/Manual/MultiDisplay.html">https://docs.unity3d.com/Manual/MultiDisplay.html</a></p><h2 id="in-game-console"><a class="markdownIt-Anchor" href="#in-game-console"></a> In-game console</h2><p>功能寫出來之後我才想到，好像可以接個 in game console，這樣子在玩家的遊玩過程中甚至可以偷打指令。<br />於是翻了各個github開源專案，找到一個最能滿足我需求的repo，功能極強：<br /><a href="https://github.com/DavidF-Dev/Unity-DeveloperConsole">https://github.com/DavidF-Dev/Unity-DeveloperConsole</a><br />於是就花一天接進去了。</p><h2 id="沒教學"><a class="markdownIt-Anchor" href="#沒教學"></a> 沒教學</h2><p>然後展出前幾天又想到，我們到現在教學都還因為各種原因生不出來，但現場口頭告知感覺很破壞體驗。<br />所以最後幾天才很隨便地寫一個文字提示系統，然後又開始爭論到底哪裡要顯示哪裡不需要顯示，破不破壞沉浸感，會不會讓玩家覺得自己被當白癡(戰神的案例)。</p><p>最後就…全部手動按。</p><p>往好處想，手動按也可以是一種測試項目，可以量化得知到底哪些提示是不需要，哪些是必須的。<br />也好在我可以雙螢幕躲在後面按，玩家比較不會覺得是被工作人員提示到，甚至因為有接了 console ，基本上想打甚麼內容都可以。</p><p>不過理想歸理想，最後還是很常靠我同事現場提示。<br />而且雙螢幕+錄影計畫會把我的筆電燒爆，導致有 lag 發生，好險玩家沒怎麼抱怨。</p><h1 id="關卡設計的修正與迭代"><a class="markdownIt-Anchor" href="#關卡設計的修正與迭代"></a> 關卡設計的修正與迭代</h1><p>這也是我第一次充分感受到我們遊戲的 standalone editor + 雲端更新功能在實體展有奇效。<br />正好展出時間是從下午開始，能夠克服時差，造就了我們能夠：</p><ul><li>同事站在外面招待玩家</li><li>我窩在裡面看雙螢幕的debug畫面分析問題，然後同步回報給開發夥伴(第二天開始改成dc實況)</li><li>開發夥伴在家修正關卡問題並更新上傳</li><li>等這位玩家結束之後立刻下載更新關卡<br />也好險能這樣修正，否則第一天初期的幾個遊玩過程真是慘不忍睹。<br />不過程式上的bug當然現場就沒辦法修，只能晚上回家一邊看錄影一邊修正。</li></ul><p>三天下來，有破完的平均遊戲時間是 33.9 分鐘 -&gt; 30.1 分鐘 -&gt; 27.8 分鐘。<br />全部破完百分比是71% -&gt; 75% -&gt; 84%，剩下枝微末節的改進內容和數據可能有機會會寫成別篇文章吧。</p><p>最後還是很感謝G8主辦也很感謝友人邀請，這是我們第一次參加實體展，雖然爆幹累，但意外地有很多收穫。為我們畸形的合作開發模式注入了一劑強心針，也讓我損失了一隻xbox手把。</p><h1 id="插曲"><a class="markdownIt-Anchor" href="#插曲"></a> 插曲</h1><p>因為我們後台房間其實是四組共用的，而我基本上一整天都窩在裡面盯後台螢幕，所以別組的人每次一進來就是看到我這個怪人坐在地板上駝背看筆電。<br />應該是在第一天快結束的時候，我們後方的<a href="https://store.steampowered.com/app/1858450/_/?l=tchinese">即刻離職</a>開發者就問說：「嗯？你們怎麼不把外面的桌子往前移一點點，然後把筆電放在螢幕後方這樣子」</p><p><img src="https://i.imgur.com/prF8oK2.png" alt="圖片來源: https://www.youtube.com/watch?v=pG0dwHAiLUw" /></p><p>「靠，真的耶，我是白痴」</p>]]></content>
    
    
    <summary type="html">上週五六日我們團隊參加了實體的遊戲展，這是我們第一次參加這種實體展，也算是第一次開放讓一般玩家試玩的機會。

之前聽朋友說有一種測試方式是用雙螢幕輸出不同內容，一邊是單純的遊戲畫面，另一邊是會顯示 log、fps 等各種 debug 資訊的遊戲畫面。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Embed GlslEditor in Markdown</title>
    <link href="https://qwe321qwe321qwe321.github.io/2022/10/11/Embed-GlslEditor-in-Markdown/"/>
    <id>https://qwe321qwe321qwe321.github.io/2022/10/11/Embed-GlslEditor-in-Markdown/</id>
    <published>2022-10-11T08:14:24.431Z</published>
    <updated>2022-10-11T08:14:24.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="glsleditor"><a class="markdownIt-Anchor" href="#glsleditor"></a> GlslEditor</h1><p><a href="https://github.com/patriciogonzalezvivo/glslEditor">GlslEditor by patriciogonzalezvivo</a></p><h1 id="2d-random"><a class="markdownIt-Anchor" href="#2d-random"></a> 2D Random</h1><p>Source code is from <a href="https://thebookofshaders.com/10/">TheBookOfShaders</a></p><div  class="glslEditorCanvas"><textarea>// Author @patriciogv - 2015// http://patriciogonzalezvivo.com#ifdef GL_ESprecision mediump float;#endifuniform vec2 u_resolution;uniform vec2 u_mouse;uniform float u_time;float random (vec2 st) {    return fract(sin(dot(st.xy,                         vec2(12.9898,78.233)))*        43758.5453123);}void main() {    vec2 st = gl_FragCoord.xy/u_resolution.xy;    float rnd = random( st );    gl_FragColor = vec4(vec3(rnd),1.0);}</textarea></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;glsleditor&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#glsleditor&quot;&gt;&lt;/a&gt; GlslEditor&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/patriciogonzalezvivo</summary>
      
    
    
    
    
    <category term="Shader" scheme="https://qwe321qwe321qwe321.github.io/tags/Shader/"/>
    
    <category term="Web" scheme="https://qwe321qwe321qwe321.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Unity/C#.Net 常用的 Memory Allocation 優化整理</title>
    <link href="https://qwe321qwe321qwe321.github.io/2022/04/14/Unity-CSharp-DotNet-%E5%B8%B8%E7%94%A8%E7%9A%84Memory%20Allocation%E5%84%AA%E5%8C%96%E6%95%B4%E7%90%86/"/>
    <id>https://qwe321qwe321qwe321.github.io/2022/04/14/Unity-CSharp-DotNet-%E5%B8%B8%E7%94%A8%E7%9A%84Memory%20Allocation%E5%84%AA%E5%8C%96%E6%95%B4%E7%90%86/</id>
    <published>2022-04-13T23:24:00.000Z</published>
    <updated>2022-04-13T23:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>正式 full-time 開發目前這個 2D 遊戲專案前後也有快 2 年半左右，前前後後時常在優化性能，這篇文想單純整理一下我優化記憶體來盡量達成 Zero Allocation 的方式。</p><h1 id="zero-allocation"><a class="markdownIt-Anchor" href="#zero-allocation"></a> Zero Allocation</h1><p>Zero Allocation 嚴格定義是指不做任何 dynamic/heap memory allocation，不過在 Unity/C#.Net 這裡我會比較喜歡解釋成「不做任何重複的heap allocation」，所以使用 object pooling 時第一次必要的 allocation 可以被接受，之後要二次使用時會從 pool 中拿回之前使用過的 memory 以避免第二次 allocate。</p><h1 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why?</h1><p>首先 memory allocation 本身算是一個大開銷，再者 C# 語言有 Garbage Collection 這個大坑，GC 讓你不需要也沒辦法主動釋放你申請使用的 heap memory，更會無預警的執行 <code>GC.Collect()</code> 導致那個瞬間的遊戲畫面卡頓。</p><blockquote><p>可能有人會說你可以主動執行 <code>GC.Collect()</code> 來主動釋放記憶體，但執行這個方法的代價很高，它會掃一遍所有的記憶體來尋找 unused，這個搜尋行為本身就貴到不能隨便使用了。</p></blockquote><p>所以優化方向當然是盡可能地減少 memory allocation ，並大幅地重複利用它們。</p><p>特別是Unity的那些 <code>Update</code> , <code>FixedUpdate</code>, <code>LateUpdate</code> 等幾乎每個frame都會執行的方法絕對要是Zero Allocation，這算是我自己對專案的最基本優化要求。</p><p><em>因為我們的環境是在 unity 底下，所以以下我會直接把 Heap Memory Allocation 稱為 <strong>GC.Alloc</strong></em>，這是在 Unity Profiler 中使用的名詞，也方便我們直接觀察。</p><span id="more"></span><h1 id="when-is-heap-memory-allocated"><a class="markdownIt-Anchor" href="#when-is-heap-memory-allocated"></a> When is heap memory allocated?</h1><p>首先我們要知道哪些行為會導致GC.Alloc，其實就是: <strong>實例化一個類別(class)物件</strong>。</p><p>最直接的方法就是用<code>new</code>關鍵字:<code>Class a = new Class();</code>，這樣就會發生allocation。要注意只有class/reference type才會GC.Alloc，而struct/value type就不會有。<br />所以要了解這件事你要先理解struct和class的實質差別在哪裡，我之前有一篇文有講到這個: <a href="/2020/12/14/More-Effective-C-2nd-%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/#%E5%8D%80%E5%88%86%E5%AF%A6%E5%80%BCvalue%E8%88%87%E5%8F%83%E8%80%83reference%E5%9E%8B%E5%88%A5">More-Effective-C-2nd-讀書筆記</a>。</p><p>其他比較間接的方法之所以會產生GC.Alloc都是它們方法內部有偷偷幫你做了這個動作但你不知道而已，反正最後在Unity Profiler都可以很清楚地發現問題。</p><p>總之我接下來會整理一些我自己很常見的案例以及改善方法，以下的順序和出現頻率無關，單純只是我撰寫的時候想到什麼就寫什麼。</p><h1 id="cases"><a class="markdownIt-Anchor" href="#cases"></a> Cases</h1><h2 id="1-能用struct就不要用class"><a class="markdownIt-Anchor" href="#1-能用struct就不要用class"></a> 1. 能用struct就不要用class</h2><p>new class是最直接的發生原因，而有些人會濫用class，即使它明明該是個value type的結構也通通寫成class，如下面案例。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Transform2DValue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Vector2</span> position<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> rotation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Vector2</span> scale<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Transform2DValue</span><span class="token punctuation">(</span><span class="token class-name">Transform</span> transform<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rotation <span class="token operator">=</span> transform<span class="token punctuation">.</span>eulerAngles<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">=</span> transform<span class="token punctuation">.</span>localScale<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Apply</span><span class="token punctuation">(</span><span class="token class-name">Transform</span> destination<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        destination<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>        destination<span class="token punctuation">.</span>eulerAngles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        destination<span class="token punctuation">.</span>localScale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CopyTransformTo</span><span class="token punctuation">(</span><span class="token class-name">Transform</span> source<span class="token punctuation">,</span> <span class="token class-name">Transform<span class="token punctuation">[</span><span class="token punctuation">]</span></span> destinations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Transform2DValue</span> transformValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Transform2DValue</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc!</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> destinations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        transformValue<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個案例的<code>Transform2DValue</code>是用來儲存2D物件的transform資訊的值，之後可以把這個值Apply到傳入參數的目標上來達成複製transform的功能。</p><h3 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h3><p>很顯然這個方法會因為new而造成GC.Alloc，但我們其實根本不需要把<code>Transform2DValue</code>定義成class阿。首先它本來就是拿來做為Value儲存使用，那它應該是Value Type才符合定義，改成struct就解決了。</p><p>而且struct在各種使用上<strong>通常</strong>都會比class有效率，除非你是一個成員欄位龐大或需要長期使用的型別，否則大多時候能用struct就用，特別是案例這種僅在method scope內暫時使用的local variable。</p><p>延伸: <a href="https://mdfarragher.medium.com/whats-faster-in-c-a-struct-or-a-class-99e4761a7b76">What Is Faster In C#: A Struct Or A Class?</a></p><h2 id="2-non-constant-string"><a class="markdownIt-Anchor" href="#2-non-constant-string"></a> 2. Non-constant string</h2><p>string是一個特殊基礎型別，它是一個盡量實作成Value Type的Reference Type Class，一般的Assign operator不會有問題，但一些需要copy/new操作的方法就幾乎避免不了GC.Alloc，最常見的是<code>string.Concat</code>或以<code>operator+</code>表示<code>stringA + stringB</code>操作，以及任何object都有的<code>ToString()</code>方法。</p><blockquote><p>這邊有特別強調是Non-constant string，因為constant string會從一個內部的pool申請出來，兩個constant string的reference是一樣的，這點你可以用<code>ReferenceEquals()</code>方法來驗證。</p></blockquote><p>這邊舉幾個例子:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Constant strings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// These cases are allocation-free.</span>    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> constant <span class="token operator">=</span> <span class="token string">"constant"</span><span class="token punctuation">;</span>    <span class="token function">StringParameter</span><span class="token punctuation">(</span><span class="token string">"constant"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">StringParameter</span><span class="token punctuation">(</span>constant<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> constantStringConcat <span class="token operator">=</span> <span class="token string">"string"</span> <span class="token operator">+</span> <span class="token string">"concat"</span><span class="token punctuation">;</span> <span class="token comment">// Compiler optimize it as "stringconcat" directly.</span>    <span class="token class-name"><span class="token keyword">string</span></span> constantStringConcat2 <span class="token operator">=</span> <span class="token string">"string"</span> <span class="token operator">+</span> constant<span class="token punctuation">;</span> <span class="token comment">// Compiler optimize it as "stringconcat" directly.</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Non-constant string concat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> nonConstant <span class="token operator">=</span> <span class="token string">"nonConstant"</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> nonConstantConcat <span class="token operator">=</span> <span class="token string">"string"</span> <span class="token operator">+</span> nonConstant<span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"string.Concat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> stringConcat <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"concat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"MethodConcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> methodConcat <span class="token operator">=</span> <span class="token function">MethodConcat</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"concat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"int.ToString()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> intString <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StringParameter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> nonConstant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">MethodConcat</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> lhs<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lhs <span class="token operator">+</span> rhs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打開Profiler驗證無誤:<br /><img src="https://i.imgur.com/30u0Cpn.png" alt="" /></p><h3 id="solution-2"><a class="markdownIt-Anchor" href="#solution-2"></a> Solution</h3><p>string其實還挺無解的，平常就盡量避免使用，某些情形可以改用<code>enum</code>取代。不過最終還是一定有需要用string的地方，這時候我就只能推這個大神寫的library了: <a href="https://github.com/Cysharp/ZString">ZString - Zero Allocation StringBuilder for .NET Core and Unity.</a>。</p><p>ZString主要是它自己重新定義自己的string型別，然後把原先.net內建的StringBuilder class改成struct結構，最後還自己管理一個inner buffer(allocated from ArrayPool)使得多數資源可以重複回收利用。當然你最後還是會有<code>ToString()</code>流程來取得最後的<code>string</code>才能把它當成原本的<code>string</code>使用，不過它可以大幅減少內部運算複製來複製去的GC.Alloc開銷。總之是一個很強的lib，細節可以去看<a href="https://neuecc.medium.com/zstring-zero-allocation-stringbuilder-for-net-core-and-unity-f3163c88c887">作者這篇文</a>。</p><h2 id="3-yield"><a class="markdownIt-Anchor" href="#3-yield"></a> 3. yield</h2><p><code>yield</code>是<a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/keywords/yield">C#的一個語法糖</a>，要使用此關鍵字你必須寫在一個<code>IEnumerator</code>或<code>IEnumerable</code>的方法內，譬如以下例子。</p><blockquote><p>想要了解<code>yield</code>與<code>IEnumerator</code>的原理的建議去google一下，這邊不會花太多的篇幅解釋。</p></blockquote><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"SimpleEnumerator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IEnumerator</span> simpleEnumerator <span class="token operator">=</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>yield</code>會使compiler把這個方法包裝成一個實作IEnumerator的class，而這個class會在第一次<code>MoveNext()</code>後取得null的值便迭代結束(return false)，我們假設這個內部class命名為<code>SimpleEnumertor_Class</code>。之後這個<code>SimpleEnumertor()</code>會被改成類似下面這樣:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleEnumerator_Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>發現了嗎? 他會new一個class出來，這就是導致當我們呼叫<code>SimpleEnumerator()</code>的時候會有GC.Alloc的原因。</p><blockquote><p>你可能會想那為什麼compiler要把它做成class而不是struct呢？</p><p>換個方向想，假設它會自動被做成struct然後return，注意你的回傳型別仍然是<code>IEnumerator</code>，這代表它會發生boxing，那始終還是會有GC.Alloc。</p><p><a href="https://stackoverflow.com/questions/34757759/why-is-the-compiler-generated-enumerator-for-yield-not-a-struct">Stackoverflow相關討論</a></p></blockquote><h3 id="solution-3"><a class="markdownIt-Anchor" href="#solution-3"></a> Solution</h3><p>說真的我直到現在都對這個情況沒有一個好的解法，只要你想使用這個語法糖就必然要承受這個負擔。因為這個自動包裝好的<code>IEnumerator</code><strong>甚至沒有實作<code>Reset()</code>方法</strong>，所以連想要重複利用都沒辦法。總而言之只能注意不要在重複呼叫的程式碼區塊中使用到它吧。</p><p>真要解決的話就不能使用<code>yield</code>語法糖來製作<code>IEnumerator</code>物件，而是要自己定義一個實作<code>IEnumerator</code>的struct然後想辦法重現一樣的運行邏輯，但這樣寫起來就完全失去語法糖提供的便利性了。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">SimpleEnumerator_Struct</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerator</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...implementation</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不過這裡有個特定情形的優化方法，假設你有一個長這樣的class關係:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ClassBase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ClassBase</span></span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ClassA</code>必須實作這個<code>SimpleEnumerator()</code>方法，但你希望它甚麼都不做，這時候你可能會這樣寫:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但這兩種寫法都還是會在呼叫時造成GC.Alloc，所以你其實可以這樣寫:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">SimpleEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>這樣就不會造成任何GC.Alloc了，因為你沒有使用<code>yield</code>語法糖所以它就只是一個會回傳null的普通方法。</p><blockquote><p>前兩種寫法你拿到的回傳值仍是一個實體的<code>IEnumerator</code>物件，第三種回傳值是真的null，回傳後的處理要注意這點。</p></blockquote><h2 id="4-startcoroutine"><a class="markdownIt-Anchor" href="#4-startcoroutine"></a> 4. StartCoroutine()</h2><p>前一個提到<code>IEnumerator</code>，它主要在Unity中就是給Coroutine使用的。不過我想已經網路上有很多文章提及過<code>StartCoroutine(DoSomething())</code>會有GC.Alloc所以要注意使用，這邊我要強調一下之所以會造成GC.Alloc是有兩個因素:</p><ol><li>上面提到的<code>yield</code>語法糖所做的new classobject()開銷</li><li><code>StartCoroutine</code>內部會new一個<code>Coroutine</code>物件並回傳出來，可參考<a href="https://docs.unity3d.com/ScriptReference/Coroutine.html">官方doc</a></li></ol><h3 id="solution-4"><a class="markdownIt-Anchor" href="#solution-4"></a> Solution</h3><p>第一點請參考上面一個案例，第二點無解。所以還是一樣，能少用就少用。</p><p>另一個改善方案是改用同是CySharp大神寫的library: <a href="https://github.com/Cysharp/UniTask">UniTask</a>, which provides an efficient allocation free async/await integration for Unity.</p><p>不過換成UniTask的寫法與原理完全不同，它是使用C#7.0的新功能<a href="https://github.com/dotnet/roslyn/blob/main/docs/features/task-types.md">Async Task Types in C#</a>來實作的，更換過去需要適應一段時間。我目前看下來UniTask要全面汰換Coroutine應該完全沒問題，甚至能做出來的效果也遠比Coroutine多很多。</p><p>作者花了不少功夫在Zero Allocation:</p><ul><li>透過以struct實作的<code>UniTask</code>來取代內建的<code>Task</code> class</li><li>透過以struct實作的<code>AsyncMethodBuilder</code>來取代內建的Builder</li><li>Task Pool可以重複回收利用</li><li>Compiler內部自動生成的<code>AsyncStateMachine</code>在debug(developement) mode下會是class，在release mode下會優化成struct(所以在unity profiling要注意這點，詳情可見<a href="https://github.com/Cysharp/UniTask#allocation-on-profiler">這裡</a>)</li></ul><p>其他細節可以看看<a href="https://neuecc.medium.com/unitask-v2-zero-allocation-async-await-for-unity-with-asynchronous-linq-1aa9c96aa7dd">作者的文</a></p><p>這裡放個比較範例:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// I'll run this method 1000 times.</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"StartCoroutine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    coroutineProxy<span class="token punctuation">.</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Coroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"TaskAsync().Forget()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TaskAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Forget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">Coroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">UniTaskVoid</span> <span class="token function">TaskAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> UniTask<span class="token punctuation">.</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在unity2020 editor改成release mode後查看profiler:<br /><img src="https://i.imgur.com/cfEUXdD.png" alt="" /></p><p><em>這裡有提前多跑幾次後才profiling，因為pooling的特性需要多次使用才能顯現</em></p><h2 id="5-yieldinstruction系列的class"><a class="markdownIt-Anchor" href="#5-yieldinstruction系列的class"></a> 5. YieldInstruction系列的class</h2><p>這裡指的是<code>WaitForSeconds</code>, <code>WaitForSecondsRealtime</code>, <code>WaitForEndOfFrame</code>, <code>WaitForFixedUpdate</code>這些會用在Coroutine內部的類別。很多文章大概都講過這部分就是要cache它們重複使用，避免直接在內部new一個出來。我同意這個說法，但其實針對各個不同的類別有不同的改善方法。</p><h3 id="waitforseconds"><a class="markdownIt-Anchor" href="#waitforseconds"></a> WaitForSeconds</h3><p>直接看案例5.a</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Case 5.a</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForSeconds</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token comment">// Do something..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個案例的確可以事前存好<code>WaitForSeconds</code>物件然後重複使用，像這樣:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Case 5.a</span><span class="token class-name">WaitForSeconds</span> wait1sec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForSeconds</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cached.</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> wait1sec<span class="token punctuation">;</span> <span class="token comment">// free</span>    <span class="token comment">// Do something..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但這種改善法有個問題，如果秒數本身是傳入參數要怎麼處理，如案例5.b</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Case 5.b</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> seconds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForSeconds</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token comment">// Do something..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因為<code>WaitForSeconds</code>並不能在constructor以外的地方修改等待的秒數，上面的方法就很難用了。</p><p>所以比起用cache法，我更推薦以下這樣改善:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Case 5.b</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">DelayWaitForSeconds</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> seconds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> time <span class="token operator">&lt;</span> seconds<span class="token punctuation">;</span> time <span class="token operator">+=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// free.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Do something..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣的好處是:</p><ul><li>更改方便快速，你不用在method scope外增加任何東西。</li><li>萬一之後需要progress動畫之類的東西就可以直接在while裡面處理</li><li>在<a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">Unity order of execution</a>中，yield null和yield WaitForSeconds的位置在同一區，多數時候不會發生改變執行順序產生的問題。</li><li>若傳入參數<code>seconds</code>是非正數，那它根本不會進去for迴圈也不會多等一個frame，反觀用<code>WaitForSecond</code>就必然要等至少一個frame。</li></ul><p>缺點是有些人可能看不懂這在寫什麼，可讀性較低一點。但我自己覺得只要團隊有介紹過這種寫法就不會有看不懂的問題。</p><h3 id="waitforsecondsrealtime"><a class="markdownIt-Anchor" href="#waitforsecondsrealtime"></a> WaitForSecondsRealtime</h3><p>這個與<code>WaitForSeconds</code>性質一樣，把<code>Time.deltaTime</code>換成<code>Time.unscaledDeltaTime</code>就可以了。</p><h3 id="waitforendofframe-waitforfixedupdate"><a class="markdownIt-Anchor" href="#waitforendofframe-waitforfixedupdate"></a> WaitForEndOfFrame &amp; WaitForFixedUpdate</h3><p>這兩個的性質一樣，就是要等到下一個執行迴圈的指定時間點繼續，看以下案例5.c</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Case 5.c</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">DelayToDoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">DelayToDoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// wait for 3 end of frames</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForEndOfFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForEndOfFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForEndOfFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token comment">// Do something..</span>        <span class="token comment">// wait for 3 fixed updates.</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForFixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForFixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForFixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc</span>    <span class="token comment">// Do something..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其實這兩個類別的實體毫無意義，內部實作是類似於</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WaitForFixedUpdate</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>來判定的。所以說我們根本不需要每次使用都new一個實體使用，最方便的方式是開一個static shared variable供所有人使用就好了。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Case 5.c</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">DelayToDoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">DelayToDoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// wait for 3 end of frames</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> WaitForInstances<span class="token punctuation">.</span>WaitForEndOfFrame<span class="token punctuation">;</span> <span class="token comment">// Free</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> WaitForInstances<span class="token punctuation">.</span>WaitForEndOfFrame<span class="token punctuation">;</span> <span class="token comment">// Free</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> WaitForInstances<span class="token punctuation">.</span>WaitForEndOfFrame<span class="token punctuation">;</span> <span class="token comment">// Free</span>    <span class="token comment">// Do something..</span>        <span class="token comment">// wait for 3 fixed updates.</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> WaitForInstances<span class="token punctuation">.</span>WaitForFixedUpdate<span class="token punctuation">;</span> <span class="token comment">// Free</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> WaitForInstances<span class="token punctuation">.</span>WaitForFixedUpdate<span class="token punctuation">;</span> <span class="token comment">// Free</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> WaitForInstances<span class="token punctuation">.</span>WaitForFixedUpdate<span class="token punctuation">;</span> <span class="token comment">// Free</span>    <span class="token comment">// Do something..</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WaitForInstances</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">WaitForFixedUpdate</span> WaitForFixedUpdate <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForFixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">WaitForEndOfFrame</span> WaitForEndOfFrame <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForEndOfFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="waituntil-waitwhile"><a class="markdownIt-Anchor" href="#waituntil-waitwhile"></a> WaitUntil &amp; WaitWhile</h3><p>這兩個完全沒有理由要去使用，只要你知道<code>yield return null</code>的用法基本上就不需要這兩個類別了。</p><p>而且它們兩個還需要傳入<code>Func&lt;bool&gt;</code>，一般會用到Lambda expression，反而造成更多GC.Alloc。</p><h3 id="profiling"><a class="markdownIt-Anchor" href="#profiling"></a> Profiling</h3><p><img src="https://i.imgur.com/fwjzPmY.png" alt="" /></p><p>字尾加Fix的是修正後的結果</p><h2 id="6-delegate-lambda-expression-delegate-operator-anonymous-function"><a class="markdownIt-Anchor" href="#6-delegate-lambda-expression-delegate-operator-anonymous-function"></a> 6. Delegate (Lambda expression / delegate operator / anonymous function)</h2><p>名詞解釋就省略了，總之就是如下的範例:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"delegate implicit operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ActionParameter</span><span class="token punctuation">(</span>DoSomething<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6.a</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"delegate explicit operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ActionParameter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Action<span class="token punctuation">)</span>DoSomething<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6.b</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Lambda Experssion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ActionParameter</span><span class="token punctuation">(</span> <span class="token comment">// 6.c</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"delegate operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ActionParameter</span><span class="token punctuation">(</span><span class="token keyword">delegate</span> <span class="token punctuation">&#123;</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6.d</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ActionParameter</span><span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    action<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上abcd四種寫法都會有GC.Alloc，畢竟他就是無法避免地需要建立一個delegate物件出來。</p><blockquote><p>有些人可能會有個誤解 ─ 以為直接把一個方法當作delegate不會有GC.Alloc(第一種寫法)，因為你可能會覺得方法本身是唯一的、是一個常數，那我拿到這個唯一的方法的delegate不就是allocation free嗎?<br />當然不是。</p><p>我們必須要有這個認知 ─ delegate也是object，delegate本身是可以重組合併其他delegate的(<code>operator+=</code> 和 <code>operator-=</code>)，所以它當然不是唯一的常數。</p></blockquote><h3 id="solution-5"><a class="markdownIt-Anchor" href="#solution-5"></a> Solution</h3><p>Lambda匿名函式寫法可能會跟外部的captured variable有關聯所以我沒辦法提供通用解法，不過你如果只是像範例1和2的寫法，我一般來說會cache起來優化:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">System<span class="token punctuation">.</span>Action</span> m_ActionDoSomething<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_ActionDoSomething <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m_ActionDoSomething <span class="token operator">=</span> DoSomething<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Cached Action (Fix)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ActionParameter</span><span class="token punctuation">(</span>m_ActionDoSomething<span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當然免不了第一次使用時還是會有GC.Alloc，但至少可以重複利用。</p><p>缺點是你要開很多<code>System.Action</code>成員在類別內，可能會造成撰寫便利性和可讀性降低。</p><p>附上profiler:</p><p><img src="https://i.imgur.com/abyczvK.png" alt="" /></p><h2 id="7-captured-variable-陷阱"><a class="markdownIt-Anchor" href="#7-captured-variable-陷阱"></a> 7. Captured Variable 陷阱</h2><p>使用lambda匿名函式時有時候會用到<code>captured variable</code>的C#語言特性，簡單來說就是當你的匿名函式內部有使用到外面的變數時，compiler會自動幫你把指定的變數的reference儲存起來放入匿名函數內，且因為他是儲存reference，所以有時候會有不直覺的結果，可以參考案例: <a href="https://stackoverflow.com/questions/271440/captured-variable-in-a-loop-in-c-sharp">Captured variable in a loop in C#</a>。</p><p>但我這篇不是要講邏輯上的陷阱，而是GC.Alloc的陷阱，直接看範例:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CapturedVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> var1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token function">ActionParameter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> var2 <span class="token operator">=</span> var1<span class="token punctuation">;</span> <span class="token comment">// &lt;--- captured variable.</span>            <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這單純是一個簡單的captured variable使用例子，沒甚麼問題，但是我使用上有時候會有下面這種情況:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token function">CapturedVariablePitfall</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc!</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CapturedVariablePitfall</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> var1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc at this line for captured variable below.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Even if condition==false, there is still GC.Alloc</span>        <span class="token function">ActionParameter</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">int</span></span> var2 <span class="token operator">=</span> var1<span class="token punctuation">;</span> <span class="token comment">// &lt;--- because of this captured variable.</span>                <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上面這種寫法會有GC.Alloc！</strong><br /><strong>上面這種寫法會有GC.Alloc！</strong><br /><strong>上面這種寫法會有GC.Alloc！</strong><br />很不直覺的一個坑，第一次遇到的時候花了好一陣子才搞懂。</p><p>這段code的<code>CapturedVariablePitfall</code>方法本身是<strong>根據傳入參數來決定是否執行ActionParameter()</strong>，而我第一行使用會傳入<code>false</code>，直覺上code根本不會進到<code>if</code>內部所以也根本不會建立匿名函數，那怎麼會有GC.Alloc?</p><p>以結果來說，在方法的第一行就會產生GC.Alloc了，這點你可以用Profiler抓抓看就能驗證。至於為什麼，要看看Compiler到底編譯了甚麼東西出來才清楚，我直接用SharpLab這個網站來看看<a href="https://sharplab.io/#v2:EYLgHgbALANAJiA1AHwAICYAMBYAUBgRjz1QGYACDcgMQHlbyBvPc111KcgYQEMAHAC4BXAE4BTOADUeIgJY9gAGzEAKAJRMWbbbIB2A8gDcZBcgF5yBTJgDc5APT3yAcS4A6AIKLFAewDG5DwGAgAWsgDO5Ip6YuQAZj4i5H78wuJwRjLySrHAYr4A7m5a2uwE6AAKMjwAtmICYiIqJaXq5gB8mrilPeR6BsYi6OaZIgR2juQAPAC0c+R5KULhsT5x5KERyamiEqPZysXdvQC+ajYtJy0tHOQAcj68grtSWQrKbczHPf2jphZWWwOJyuTzefyBYJhSLRXSxBJJFLPdL7d65fI+IotbSocpVES1eqNZrfVoaMydL69UrYthnC6kq6km6cJ5pCTSORoiqyARxHjeFTAHw+RTJHy6OC82QSjRU3q/Qb/SzWCYg9xeXwBIIbaFRGLxRLbZF7QYHdGFI7U2TrFR+CVSgQy3Ry4HkACihjEuj663tkulErMZn5ihWMF1jViW3CTu8Lg14L8tJ6uMq1TqDSaKep5DaFK6uaLfX0o2GFiVaumcxmCzESxW5DWuq2SPZGTNaKtxe09JzTN711wLMoeIzRKauLcacCfidssLvR4c+dbgAkrpDD4ANaqc6XPAnIA==">編譯結果</a>:</p><p>C#原始碼編譯前:<br /><img src="https://i.imgur.com/VblsShi.png" alt="" /></p><p>因為IL語言比較難看懂，這邊直接看編譯後的C#表示法就行了，編譯後C#:<br /><img src="https://i.imgur.com/IBIn6oo.png" alt="" /></p><p>有對照組很明顯看得出問題點吧，Captured Variable實際上是在那個變數宣告的地方就馬上capture成一個object了，這也就是為什麼會有GC.Alloc。</p><h3 id="solution-6"><a class="markdownIt-Anchor" href="#solution-6"></a> Solution</h3><p>理解GC.Alloc的原因後要修正就很簡單了，因為原本那個變數可能有其他人要使用，一般來說沒辦法直接移到if內部，所以多數情況都是在if內部再創一個變數使用即可。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CapturedVariablePitfallFix</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> var1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> var1Copy <span class="token operator">=</span> var1<span class="token punctuation">;</span> <span class="token comment">// GC.Alloc at this line for captured variable below.</span>        <span class="token function">ActionParameter</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">int</span></span> var2 <span class="token operator">=</span> var1Copy<span class="token punctuation">;</span> <span class="token comment">// &lt;--- captured variable.</span>                <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打開Profiler驗證一下:</p><p><img src="https://i.imgur.com/AlYuR6u.png" alt="" /></p><h2 id="8-local-arrayliststackqueuehashsetdictionary"><a class="markdownIt-Anchor" href="#8-local-arrayliststackqueuehashsetdictionary"></a> 8. Local array/list/stack/queue/hashset/dictionary</h2><p>有時候會需要在一個方法內部創建一個暫時的容器使用，如以下程式碼:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TemporaryArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// do something with numbers array.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立容器避免不了GC.Alloc，不過你可以用Pooling解決這件事。這時候我會推薦導入一些unity沒有使用到的.net內建dll檔，你可以從<a href="https://github.com/Cysharp/ZString/tree/master/src/ZString.Unity/Assets/Plugins">ZString的專案找到它們</a>，這樣你就可以使用<code>System.Buffers.ArrayPool</code>這個類別，改成以下這樣:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"> <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TemporaryArrayFix1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> System<span class="token punctuation">.</span>Buffers<span class="token punctuation">.</span>ArrayPool<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">.</span>Shared<span class="token punctuation">.</span><span class="token function">Rent</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rent an array from shared pool.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    System<span class="token punctuation">.</span>Buffers<span class="token punctuation">.</span>ArrayPool<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">.</span>Shared<span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Return an array to the pool.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般來說這些dll應該可以正常使用(至少有ZString背書)，不過如果還是有專案沒辦法導入這些dll的話，你也可以自己寫一個<code>ArrayPool</code>。</p></blockquote><p>除了Array以外的容器你也希望pooling的話你就得自己寫個類別來用，以下是一個未經驗證優化的簡單實作:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListPool<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListPool<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> Shared <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ListPool<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span><span class="token punctuation">></span></span> m_Inactived <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token function">Rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m_Inactived<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> pop <span class="token operator">=</span> m_Inactived<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> pop<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Return</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        list<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_Inactived<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Expand capacity規則什麼的還有優化空間，不過上面這樣就能解決GC.Alloc問題了，其他容器pool也依樣畫葫蘆。</p><p>另外暫用的小型Array我個人會更喜歡下面這種寫法，這也需要仰賴上面提到的dll檔:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TemporaryArrayFix2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System<span class="token punctuation">.</span>Span<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> numbers <span class="token operator">=</span> <span class="token keyword">stackalloc</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>System.Span</code>是C# 7.2的新類別，可以用來表示一個記憶體區塊。</p><p><code>stackalloc</code> 是C# 8.0的新功能，可以在stack建立一個連續的記憶體區塊，其實就相當於一堆local variables，所以他會在方法return時自動捨棄掉。</p><p>這才是名符其實的Zero Allocation寫法，這是我在讀ZString原始碼的時候學到的，非常實用。</p><p>缺點是Stack記憶體有限制大小，超出範圍會throw StackOverflowException要注意。還有它不支援不確定實際長度的Managed class，所以基本上幾乎所有class都不能用。</p><p>延伸閱讀: <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.span-1?view=net-6.0">Span<T> 結構</a>、<a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/operators/stackalloc">stackalloc 運算式 (c # 參考)</a></p><h2 id="9-boxing"><a class="markdownIt-Anchor" href="#9-boxing"></a> 9. Boxing</h2><p>Boxing的定義和原理網路上很多資料查一下就有，這邊只討論發生的時機點和如何避免。</p><p>boxing會在一個Value Type物件被轉型成Reference Type時發生，具體來說的boxing是會發生在:</p><ul><li>Value Type物件被轉型成<code>object</code></li><li>Value Type物件被轉型成interface</li><li>struct物件被轉型成<code>System.ValueType</code>(這是一個內部的abstract class)</li></ul><p>範例程式碼:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">KindOfStruct</span> kindOfStructA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KindOfStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">KindOfStruct</span> kindOfStructB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KindOfStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Object boxing: Parameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ObjectParameter</span><span class="token punctuation">(</span>kindOfStructA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boxing: KindOfStruct -> object</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Object boxing: Equals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kindOfStructA<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>kindOfStructB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// double boxing: KindOfStruct -> System.ValueType and KindOfStruct -> object</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Object boxing: GetHashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kindOfStructA<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boxing: KindOfStruct -> System.ValueType</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Interface boxing: Parameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InterfaceParameter</span><span class="token punctuation">(</span>kindOfStructA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boxing: KindOfStruct -> IKindOfInterface</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ObjectParameter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InterfaceParameter</span><span class="token punctuation">(</span><span class="token class-name">IKindOfInterface</span> kindOfInterface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    kindOfInterface<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">IKindOfInterface</span> <span class="token punctuation">&#123;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">KindOfStruct</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IKindOfInterface</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是很常見會發生boxing的方式。</p><h3 id="solution-7"><a class="markdownIt-Anchor" href="#solution-7"></a> Solution</h3><p>傳入參數轉型成<code>object</code>/interface這種情境相關的問題就沒辦法，不過<code>Equals</code>和<code>GetHashCode</code>這兩個boxing是可以完全解決的，只要你乖乖地在struct內實作這些方法就行了:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">KindOfStructFix</span> kindOfStructFixA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KindOfStructFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">KindOfStructFix</span> kindOfStructFixB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KindOfStructFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Object boxing: Equals (Fix)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kindOfStructFixA<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>kindOfStructFixB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No boxing as it's implemented method.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"Object boxing: GetHashCode (Fix)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kindOfStructFixA<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No boxing as it's implemented method.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">KindOfStructFix</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IKindOfInterface</span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>IEquatable<span class="token punctuation">&lt;</span>KindOfStructFix<span class="token punctuation">></span></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">KindOfStructFix</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">value</span> <span class="token operator">==</span> other<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>正確地撰寫一個struct應該要實作哪些interface和方法，關於這個問題我之前的一篇文章 <a href="/2020/12/14/More-Effective-C-2nd-%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/#%E4%BA%86%E8%A7%A3%E5%A4%9A%E7%A8%AE%E7%9B%B8%E7%AD%89%E6%A6%82%E5%BF%B5%E4%B9%8B%E9%96%93%E7%9A%84%E9%97%9C%E4%BF%82">More Effective C# 筆記 #1 資料型別</a> 有寫到相關內容。</p></blockquote><h2 id="10-params-array-as-method-paramters"><a class="markdownIt-Anchor" href="#10-params-array-as-method-paramters"></a> 10. <code>params</code> Array as method paramters</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"params int[] as method paramters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc for int array.</span>    <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4564</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc for int array.</span>    <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4564</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC.Alloc for int array.</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// GC.Alloc for int array.</span>    <span class="token class-name"><span class="token keyword">int</span></span> max <span class="token operator">=</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             max <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個蠻好懂的吧，雖然用了語法糖<code>params</code>但傳入的參數仍然會轉成<code>int[]</code>，既然是陣列那自然免不了GC.Alloc。</p><h3 id="solution-8"><a class="markdownIt-Anchor" href="#solution-8"></a> Solution</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"overload method paramters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MaxFix</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MaxFix</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4564</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MaxFix</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4564</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MaxFix</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> v1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> v1 <span class="token operator">></span> <span class="token class-name">v2 <span class="token punctuation">?</span></span> v1 <span class="token punctuation">:</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MaxFix</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> v1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> v2<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> v3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> v1 <span class="token operator">></span> v2 <span class="token punctuation">?</span> <span class="token punctuation">(</span>v1 <span class="token operator">></span> <span class="token class-name">v3 <span class="token punctuation">?</span></span> v1 <span class="token punctuation">:</span> v3<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>v2 <span class="token operator">></span> <span class="token class-name">v3 <span class="token punctuation">?</span></span> v2 <span class="token punctuation">:</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MaxFix</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> v1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> v2<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> v3<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> v4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> v1 <span class="token operator">></span> v2 <span class="token punctuation">?</span>         <span class="token punctuation">(</span>v1 <span class="token operator">></span> v3 <span class="token punctuation">?</span> <span class="token punctuation">(</span>v1 <span class="token operator">></span> <span class="token class-name">v4 <span class="token punctuation">?</span></span> v1 <span class="token punctuation">:</span> v4<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>v3 <span class="token operator">></span> <span class="token class-name">v4 <span class="token punctuation">?</span></span> v3 <span class="token punctuation">:</span> v4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>         <span class="token punctuation">(</span>v2 <span class="token operator">></span> v3 <span class="token punctuation">?</span> <span class="token punctuation">(</span>v2 <span class="token operator">></span> <span class="token class-name">v4 <span class="token punctuation">?</span></span> v2 <span class="token punctuation">:</span> v4<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>v3 <span class="token operator">></span> <span class="token class-name">v4 <span class="token punctuation">?</span></span> v3 <span class="token punctuation">:</span> v4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最直接的方法就是overload，寫起來麻煩但也沒辦法。</p><blockquote><p>其實這種overload方法很容易在別人寫的lib裡面看到，常見的會搭配Template使用。一般來說<code>params</code>版本的overload也會留著以防使用者真的不幸用超過了上限數量。</p></blockquote><h2 id="11-enumhasflag"><a class="markdownIt-Anchor" href="#11-enumhasflag"></a> 11. Enum.HasFlag()</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Flags</span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">enum</span> <span class="token class-name">AttackAttribute</span> <span class="token punctuation">&#123;</span>    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Poison <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>    Burning <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>    Death <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Attack1</span><span class="token punctuation">(</span><span class="token class-name">AttackAttribute</span> attackAttribute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attackAttribute<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>AttackAttribute<span class="token punctuation">.</span>Poison<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// poison.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attackAttribute<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>AttackAttribute<span class="token punctuation">.</span>Burning<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// burning.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attackAttribute<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>AttackAttribute<span class="token punctuation">.</span>Death<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// death.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上的寫法。由於<code>HasFlag</code>的定義是<code>System.Enum.HasFlag(System.Enum flag)</code>，理論上這樣呼叫會有兩個boxing ─ 一個是caller的一個是param的。<br /><strong>但是!</strong><br /><strong>但是!</strong><br /><strong>但是!</strong><br />你如果用Unity Profiler看，會發現它竟然沒有GC.Alloc！ (on Unity2019LTS and 2020LTS)<br /><img src="https://i.imgur.com/2kJ1FDC.png" alt="" /></p><p>這個疑惑我拿去餵google也沒有找到一個明確的解答，我也用了SharpLab和dnSpy看編譯後的IL也都顯示會有boxing才對。<br />所以只好不負責任地用猜的了:</p><blockquote><p>就是Compiler有針對這種情況優化，可能類似Array和List的foreach沒有GC.Alloc那樣的優化。<br />另外有查到Mono 4.0 2015年有針對HasFlag方法優化快了60倍，猜測可能是unity有同步這次更新，<a href="https://www.mono-project.com/docs/about-mono/releases/4.0.0/#fine-tuning">文章在這</a>。</p></blockquote><h3 id="所以enumhasflag可以放心使用了"><a class="markdownIt-Anchor" href="#所以enumhasflag可以放心使用了"></a> 所以<code>Enum.HasFlag()</code>可以放心使用了?</h3><p>不，這次看看以下的寫法:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"> <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Attack2</span><span class="token punctuation">(</span><span class="token class-name">AttackAttribute</span> attackAttribute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HandleFlag</span><span class="token punctuation">(</span>attackAttribute<span class="token punctuation">,</span> AttackAttribute<span class="token punctuation">.</span>Poison<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// poison.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HandleFlag</span><span class="token punctuation">(</span>attackAttribute<span class="token punctuation">,</span> AttackAttribute<span class="token punctuation">.</span>Burning<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// burning.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HandleFlag</span><span class="token punctuation">(</span>attackAttribute<span class="token punctuation">,</span> AttackAttribute<span class="token punctuation">.</span>Death<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// death.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">HandleFlag</span><span class="token punctuation">(</span><span class="token class-name">AttackAttribute</span> attackAttribute<span class="token punctuation">,</span> <span class="token class-name">AttackAttribute</span> flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attackAttribute<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣寫就冒出6次的GC.Alloc了: <img src="https://i.imgur.com/OqvAdxp.png" alt="" /><br />也就是變回Compiler沒有優化了的情形。</p><p>總之就是，<strong>當<code>HasFlag</code>的輸入參數<code>flag</code>不是一個常數時，GC.Alloc就會出現了</strong>。</p><p>所以扯了一圈，我還是建議<strong>完全不要使用<code>HasFlag()</code>，改用位元運算子</strong>:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Attack2Fix</span><span class="token punctuation">(</span><span class="token class-name">AttackAttribute</span> attackAttribute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HandleFlagFix</span><span class="token punctuation">(</span>attackAttribute<span class="token punctuation">,</span> AttackAttribute<span class="token punctuation">.</span>Poison<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// poison.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HandleFlagFix</span><span class="token punctuation">(</span>attackAttribute<span class="token punctuation">,</span> AttackAttribute<span class="token punctuation">.</span>Burning<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// burning.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HandleFlagFix</span><span class="token punctuation">(</span>attackAttribute<span class="token punctuation">,</span> AttackAttribute<span class="token punctuation">.</span>Death<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// death.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">HandleFlagFix</span><span class="token punctuation">(</span><span class="token class-name">AttackAttribute</span> attackAttribute<span class="token punctuation">,</span> <span class="token class-name">AttackAttribute</span> flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>attackAttribute <span class="token operator">&amp;</span> flag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>執行效率絕對比<code>HasFlag</code>高且絕對不會有GC.Alloc，唯一的缺點是可讀性比較差一點而已。</p><blockquote><p>如果有一個工程師跟我說他看不懂位元運算子，那我也沒什麼話好跟他說了。</p></blockquote><h2 id="12-unityapi-any-reference-type-as-return-value"><a class="markdownIt-Anchor" href="#12-unityapi-any-reference-type-as-return-value"></a> 12. UnityAPI: Any reference type as return value.</h2><p>其實不只unity API，照理來說任何安全的library提供的API在回傳reference type的東西的時候都會額外copy一份出來以免被使用者搞壞，這也導致了GC.Alloc發生。</p><p>並且要注意property getter基本上跟function return是一樣的行為，所以通常也都會做copy的動作。</p><p>一般來說UnityAPI都有提供Zero Allocation的API來代替，但還是有些功能就是沒提供，下面就直接列出來我自己常用到的一些APIs。</p><table><thead><tr><th>GC.Alloc</th><th>Zero Allocation</th></tr></thead><tbody><tr><td><code>GameObject.tag == &quot;Player&quot;</code></td><td><code>GameObject.CompareTag(&quot;Player&quot;)</code></td></tr><tr><td><code>Physics2D.RaycastAll()</code> <em>and other CastAll methods</em></td><td><code>Physics2D.RaycastNonAlloc()</code> <em>and other CastNonAlloc and single Cast methods</em></td></tr><tr><td><code>Physics2D.OverlapCircleAll()</code> <em>and other OverlapAll methods</em></td><td><code>Physics2D.OverlapCircleNonAlloc()</code> <em>and other OverlapNonAlloc and single Overlap methods</em></td></tr><tr><td><code>Collision2D.contacts</code></td><td><code>Collision2D.GetContacts()</code> and <code>Collision2D.GetContact(i)</code></td></tr><tr><td><code>Renderer.sharedMaterials</code></td><td><code>Renderer.GetSharedMaterials</code>()</td></tr><tr><td><code>Mesh.vertices</code>, <code>Mesh.normals</code>, <code>Mesh.tangents</code>, <code>Mesh.uv</code>, <code>Mesh.colors</code>, <code>Mesh.triangles</code> and <code>Mesh.boneWeights</code></td><td><code>Mesh.GetVertices()</code>,<code>Mesh.GetNormals()</code>, <code>Mesh.GetTangents()</code>, <code>Mesh.GetUVs()</code>, <code>Mesh.GetColors()</code>, <code>Mesh.GetTriangles()</code> and <code>Mesh.GetBoneWeights()</code></td></tr><tr><td></td><td></td></tr></tbody></table><p>一時之間想不到還有哪些常見的API，之後有想到會陸陸續續補上來。</p><h1 id="repository"><a class="markdownIt-Anchor" href="#repository"></a> Repository</h1><p>在撰寫這篇文時我也順便開了一個unity project來驗證，本篇文提及的所有原始碼和Profiler結果都包含在裡面。</p><p><a href="https://github.com/qwe321qwe321qwe321/Unity-Avoid-GC-Alloc-Cases">https://github.com/qwe321qwe321qwe321/Unity-Avoid-GC-Alloc-Cases</a></p><p>測試環境: Unity2020.3.31f1 Win10</p><h1 id="後話"><a class="markdownIt-Anchor" href="#後話"></a> 後話</h1><p>這篇文前前後後花了4天以上才寫完，比起初預想的時間還要久很多很多。主要是一些知識在撰寫的途中才發現自己好像還沒有十足的把握，才花了更多的時間去驗證它們。<br />不過這樣也好，寫文章的目的一直以來都是為了自己:O</p>]]></content>
    
    
    <summary type="html">正式 full-time 開發目前這個 2D 遊戲專案前後也有快 2 年半左右，前前後後時常在優化性能，這篇文想單純整理一下我優化記憶體來盡量達成 Zero Allocation 的方式。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="C#" scheme="https://qwe321qwe321qwe321.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>初學遊戲物理: 簡介</title>
    <link href="https://qwe321qwe321qwe321.github.io/2021/01/11/%E5%88%9D%E5%AD%B8%E9%81%8A%E6%88%B2%E7%89%A9%E7%90%86-%E7%B0%A1%E4%BB%8B/"/>
    <id>https://qwe321qwe321qwe321.github.io/2021/01/11/%E5%88%9D%E5%AD%B8%E9%81%8A%E6%88%B2%E7%89%A9%E7%90%86-%E7%B0%A1%E4%BB%8B/</id>
    <published>2021-01-10T21:44:00.000Z</published>
    <updated>2021-01-10T21:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><em><strong>先說接下來這段跟本文內容沒什麼關聯，更多的是自己的心得碎碎念。</strong></em></p><p>去年很榮幸有機會參加到一個遊戲物理的線下講座，由FB社團Unity應用領域主辦，講者是版上著名的頑皮狗工程師cjcat/Allen Chou大大。</p><span id="more"></span><p>我覺得程式背景的遊戲開發者都應該去看看他的自傳和所有ptt GameDesign版上的文章:</p><ul><li><a href="http://allenchou.net/2015/07/digipen-the-game-school-i-went-to-chinese/">DigiPen: 我的遊戲學校</a></li><li><a href="http://allenchou.net/2014/02/joining-naughty-dogs-kennel-chinese/">加入Naughty Dog的狗窩</a></li></ul><p>我在大學時讀到他的這些生涯心得分享後有如被灌了甚麼超級雞湯一樣，不斷冒出國外讀書應徵大遊戲公司的想像，我覺得他的故事如此勵志的一大原因是他根本不是本科系畢業的卻能有如此成就，會讓你有種就算現在從零開始也完全沒問題的想像。<br /><s>但你根本不會想到人家在大學讀電機的期間就有辦法投稿全英文的遊戲引擎教學文章以及強大的語言能力差距</s></p><p>說來也真神奇，就在我發現cj大大的文章後不過幾天就出現這個遊戲物理講座的消息。<br />所以會參加這個講座可能有9成的理由都只是因為憧憬，在這之前我對於遊戲物理根本也沒太多的想法。<br />因為主流遊戲引擎都馬內建好物理引擎了，何況就算要自己寫遊戲引擎也幾乎都是用現成的lib，像Unity和Unreal其實也都只是porting用別人現成的物理引擎。<br />不過當時就有一種學習引擎底層才算是遊戲工程師的抱負，就抱著試試看的心情報名。</p><p>看了一下報名表單，問題來了，表單內容要求要有一定的基本物理學知識，但學校的物理課離我實在太久遠了。<br />首先我大學的資工系根本沒物理必修，再者我讀高職的物理課也就只有高一還是高二有上過而已。</p><p>不過好險報名的日期距離當下有兩週時間，以及在我朋友的慫恿兼鼓勵之下，覺得兩週時間應該夠學到基礎程度，於是就找了台大的開放課程影片<a href="https://www.youtube.com/playlist?list=PLil-R4o6jmGglmhup8juuCnAQdOIcpwBb">普通物理學-張寶棣</a>來看。當下估計是到第八章左右就足夠了，所以規劃一天看3片就好。</p><p>最後兩週過去是的確補完了一些基本概念跟公式了，其實後面幾章都在講題目也沒看完，但我自己覺得應該是夠用了。<br />讀過物理後也的確讓我對接下來這個講座更有自信能學到東西。</p><p>講座是三週分三次，當下學習完回去也能複習投影片和看原始碼。<br />投影片跟專案原始碼都有放到<a href="https://github.com/TheAllenChou/unity-physics-constraints">Github</a></p><p>結論是我真的蠻感謝這個講座，我自己學過之後對開發上的幫助有:</p><ol><li>本來我在之前是完全看不懂 Unity的Physics2D設定中的那堆參數到底有什麼鬼意義，網路上的討論資料也少得可憐，就只能亂調亂調完全不知道怎麼優化。學過之後再加上有去研究Box2D的原始碼，那些設定值的意義就能理解了</li><li>當然也接觸過講座我才有勇氣去研究Box2D的原始碼以及了解到關於遊戲物理的用詞、關鍵字與領域。</li><li>我也沒想到現在專案真的有用上這項技術 ─ 在Unity內刻一個Partial Physics Simulation。</li></ol><hr /><p>寫著寫著有點離題先回來，總之</p><p>我在學習遊戲物理，有鑑於網路上的中文資料真的很少很少，真的有做深入分析教學的就<a href="http://allenchou.net/game-physics-series/">Allen Chou大大的blog</a>，但也不是中文資料，作為中文圈的新手入門還是有些難度。</p><p>這篇文會介紹遊戲物理引擎的運作流程與各階段的行為概述，深入的實作方法當然就不會講解了。<br />就只是當個開頭，真要了解各階段的實作方法可以查查這些關鍵字以及演算法。</p><p>預計之後應該會繼續寫幾篇紀錄自己學習遊戲物理的系列文章，希望能持續下去。</p><p><em>本篇很多來源是取自<a href="http://allenchou.net/2013/12/game-physics-introduction/">Game Physics: Introduction &amp; Acknowledgements</a></em></p><h1 id="基本名詞定義"><a class="markdownIt-Anchor" href="#基本名詞定義"></a> 基本名詞定義</h1><ul><li><strong><a href="https://zh.wikipedia.org/wiki/%E5%88%9A%E4%BD%93">Rigidbody 剛體</a></strong>: 不會變形的固定物體，所有質點到中心的距離都不會改變，一般物理引擎都是以剛體為最基礎的運動物件，下文會直接用Body來代替。</li><li><strong>Collider</strong>: 剛體的一部份，可碰撞的形狀。剛體如果不帶有Collider則它就只是一個質點，Collider就相當於剛體本身的形狀。一個剛體可有多個Collider組成。</li><li><strong>Collision 碰撞</strong>: 當兩個Collider有交疊時我們會稱之為碰撞。</li><li><strong>Contact Point 接觸點</strong>: 當兩個Collider發生碰撞會產生一個以上的接觸點，之後都會直接簡稱Contact。</li><li><strong>Contact Manifold</strong>: 收集兩個Collider之間的所有Contact的一個集合，它本身算是紀錄兩個collider之間的交疊(intersection)情形的資料</li></ul><p>再來因為我主要的學習來源都是取自<a href="https://box2d.org/">Box2D</a>，它是一套開源的2D物理引擎，Unity的Physics2D也是直接porting它的。<br />所以很常會提到它的作者Erin Catto(現任暴雪的遊戲物理工程師)的演講內容以及投影片。</p><h1 id="主流程"><a class="markdownIt-Anchor" href="#主流程"></a> 主流程</h1><p>遊戲物理引擎在一次物理更新(Step)中會做的整個流程:<br /><img src="https://i.imgur.com/Zldf07P.png" alt="" /><br />可能不是所有物理引擎都是這套流程，不過至少Box2D是走這條。</p><h1 id="broadphase"><a class="markdownIt-Anchor" href="#broadphase"></a> Broadphase</h1><p>這階段主要目的是 <strong>找到所有可能發生碰撞的組合(Pair)</strong> ，所以會用比較粗略但高效率的演算法把不可能發生碰撞的物件組合剔除，常見的有動態AABB Tree、Quad Tree/Octree、Kd Tree、BSP Tree等等。(Box2D使用動態AABB Tree)<br />如果沒做Broadphase，那就是拿到所有Body彼此之間的組合，也就會有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>個組合，這又稱為N-squared broadphase。<br /><img src="http://allenchou.net/wp-content/uploads/2014/02/thin-AABB-tree.png" alt="如圖是一個動態AABB Tree" /></p><hr /><p>Broadphase相關內容:</p><ul><li><a href="http://davidhsu666.com/archives/quadtree_in_2d/">碰撞檢測的優化-四叉樹(Quadtree)</a></li><li><a href="http://allenchou.net/2014/02/game-physics-broadphase-dynamic-aabb-tree/">Game Physics: Broadphase – Dynamic AABB Tree</a></li><li><a href="https://blog.csdn.net/cg0206/article/details/8293049">Box2d源码学习&lt;六&gt;动态树的实现</a></li></ul><h1 id="collision-detection-narrowphase"><a class="markdownIt-Anchor" href="#collision-detection-narrowphase"></a> Collision Detection (Narrowphase)</h1><p>這個階段就是要真正確定兩物件是否有碰撞。<br />何謂碰撞？粗略的定義就是兩個Collider有沒有重疊。<br />理論上這階段只在乎<strong>有沒有重疊</strong>，也就是一個True或False的答案而已。</p><p>不過為了後續resolve碰撞結果，通常這裡的演算法都會支援輸出額外資訊如:</p><ul><li>最小穿透量(Minimum Translation Vector)或稱Penetration :離開碰撞的最短路徑</li><li>碰撞點(Contact point): 兩形狀穿透最深的兩個點，通常相減就是最小穿透量</li></ul><p><img src="http://allenchou.net/wp-content/uploads/2013/12/contacts-figure.png" alt="圖片取自: http://allenchou.net/2013/12/game-physics-resolution-contact-constraints/" /></p><p>一般物理引擎常見的做法是會分成 <strong>Primitive case</strong> 和 <strong>Convex polygon case</strong> 來處理所有情形:</p><ul><li><strong>Primitive case</strong>: 準備好所有基本形狀的碰撞檢測，而且各種組合的碰撞檢測也要處理。<ul><li>舉例來說，這裡只準備Box和Circle兩種形狀，就會需要有這些演算法:<ol><li>Box vs Box</li><li>Circle vs Circle</li><li>Box vs Circle</li></ol></li></ul></li><li><strong>Convex polygon case</strong>: 凸多邊形的情況有蠻多演算法可以使用，常見的有SAT和GJK，主流應該是GJK+MPR，可以檢測高效率任何凸多邊形的碰撞且拿的到碰撞點與穿透量。</li><li><strong>Concave polygon case</strong>: 凹多邊形通常會被decomposite成多個凸多邊形的組合來算。</li></ul><h2 id="continuous-collision-detection"><a class="markdownIt-Anchor" href="#continuous-collision-detection"></a> Continuous  Collision Detection</h2><p>這個階段的一大難題之一，簡述問題就是<br /><strong>「當Body速度過快導致兩次更新之間直接穿透了中間的物件而沒有檢測到碰撞」</strong><br /><img src="https://i.gyazo.com/f1bdf861993edeab99c0bb9c9ca50791.png" alt="" /><br />也有分各大門派的解法，Box2D的解法是: <a href="https://www.youtube.com/watch?v=7_nKOET6zwI">Physics for Game Programmers; Continuous Collision</a> by Erin Catto</p><hr /><p>Collision Detection相關內容:</p><ul><li><a href="http://davidhsu666.com/archives/gamecollisiondetection/">遊戲中的碰撞檢測Collision Detection</a> - 實作SAT</li><li><a href="https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169">Collision Detection Using the Separating Axis Theorem</a></li><li><a href="https://box2d.org/files/ErinCatto_GJK_GDC2010.pdf">Computing Distance using GJK — GDC 2010 </a> - Box2D作者 Erin Catto做的關於GJK的手把手教學，步驟超細，非常簡單易懂。<ul><li><a href="https://caseymuratori.com/blog_0003">Implementing GJK (2006) - By Casey Muratori</a> - 強推，建議先有看完上面那篇，對GJK的基本了解再看。主要是以程式角度實作GJK，影片一直嘴論文作者寫了一堆<strong>學術</strong>爛方法導致閱讀不易，其實GJK並沒有那麼難，重點是影片裡面提到不少實務上的優化方法。</li></ul></li><li><a href="http://allenchou.net/2013/12/game-physics-collision-detection-gjk/">Game Physics: Collision Detection – GJK</a><ul><li><a href="http://allenchou.net/2013/12/game-physics-contact-generation-epa/">Game Physics: Contact Generation – EPA</a></li></ul></li><li><a href="https://www.amazon.com/Real-Time-Collision-Detection-Interactive-Technology/dp/1558607323">Real-Time Collision Detection</a> - 遊戲物理聖經本之一，整本書都在講Collision Detection的各種演算法。</li></ul><h1 id="resolution"><a class="markdownIt-Anchor" href="#resolution"></a> Resolution</h1><p>這個階段是在解決(Resolve)各種約束(Constraint)，舉例來說兩物件的碰撞就算是一種Contact Constraint，而解決它就可以讓兩物件不再碰撞。</p><h2 id="約束constraint"><a class="markdownIt-Anchor" href="#約束constraint"></a> 約束(Constraint)</h2><p><strong>Constraint之於Physics如同Shader之於Graphics。</strong><br />所有物理效果都仰賴Constraint來達成，若想要做出自己的物理效果也可以仰賴建構Constraint來達成。</p><p>可以想像成，物理世界中有各種約束，<br />基本款的碰撞約束代表的是「兩個Collider之間不能重疊」。所以當兩者重疊了，這個約束就被違反了。</p><p>也因此，解碰撞就是要解<strong>Contact Constraint</strong>。</p><p>又以Joint為例，假設是一般的Fixed Joint(Weld Joint)，他的約束就是「兩個anchor必須在同一個點上」。<br />假設世界中這兩個約束都<strong>解決了(Resolved)</strong>，那代表兩者的Collider沒有重疊但兩者的anchor是在同一個位置上。</p><blockquote><p>又Collider沒重疊又anchor重疊聽起來很矛盾，所以一般情況下當你用Joint連起兩物件時都會預設取消掉兩者的碰撞檢測，會把雙方當作沒有撞到彼此也就不需要解Contact。</p></blockquote><p>所以中心思想就是「當物理世界中所有約束都成立的情況下，整個世界的物理運作就是正確的」。</p><h2 id="constraint-solver"><a class="markdownIt-Anchor" href="#constraint-solver"></a> Constraint Solver</h2><p>解開約束有很多方法，但這裡的門派就有點五花八門了，我只有研究過Erin Catto的方法，所以就只介紹他的方法Sequential Impulse。</p><p>關於Sequential Impulse的教學，我很推薦直接看Allen Chou這個中文教學影片<a href="https://www.youtube.com/playlist?list=PLMihZLLy0z5catQbdqo7Ey1-Ij-Nda4dA">遊戲物理約束系列</a></p><p>我之後應該會寫一篇自己學習後對Sequential Impulse的理解，這篇就先點到為止。</p><hr /><p>Constraint &amp; Sequential Impulse相關內容:</p><ul><li><a href="https://allenchou.net/2013/12/game-physics-constraints-sequential-impulse/">Game Physics: Resolution – Constraints &amp; Sequential Impulse</a> - 跟上面的中文教學影片的內容一樣的英文文字版本</li><li><a href="http://allenchou.net/2013/12/game-physics-resolution-contact-constraints/">Game Physics: Resolution – Contact Constraints</a> - 跟上面的中文教學影片的內容一樣的英文文字版本</li><li><a href="https://box2d.org/files/ErinCatto_SequentialImpulses_GDC2006.pdf">Fast and Simple Physics using Sequential Impulse</a> - Erin Catto 在GDC2006的投影片</li><li><a href="https://www.youtube.com/watch?v=SHinxAhv1ZE">Physics for Game Programmers: Understanding Constraints</a> - Erin Catto 在GDC2014的影片</li></ul><h2 id="velocity-constraint-position-constraint"><a class="markdownIt-Anchor" href="#velocity-constraint-position-constraint"></a> Velocity Constraint &amp; Position Constraint</h2><p>約束也有分種類，在Box2D中有速度約束(Velocity Constraint)也有位置約束(Position Constraint)。<br />速度約束自然是在約束剛體的速度，位置約束就是在約束剛體的位置。<br />舉實際例子來看，假設兩物件碰撞了，會希望發生兩件事:</p><ol><li>兩物件不再碰撞(交疊)</li><li>兩者因為產生彈性或非彈性碰撞而改變速度</li></ol><p>1.的情況雖然速度約束通常也能解決，但直接用位置約束來強迫兩者分開會更有效率。<br />2.的情況就完全要仰賴速度約束了。</p><h2 id="integration"><a class="markdownIt-Anchor" href="#integration"></a> Integration</h2><p>在解完Velocity Constraint之後，我們會需要讓Body套用它的Velocity，使其修改Body的Transform來形成運動。這個過程就是把速度積分成位置位移量，也就是Velocity Integration。<br />主流只模擬Position和Rotation，所以存有Linear Velocity和Angular Velocity，但就算要模擬Scale運動也是可行的(不過這可能就不符合剛體物理的定義了)。<br />另外加速度或加加速度也是可以模擬的，就看這個物理需要多精準。</p><p>這方面的積分方法也有不少選擇，Box2D是用Semi-implicit Euler method，其他還有像是Verlet method也是常看到的選擇。</p><p>積分方法的選擇會影響到運動路徑的準確性、穩定度當然還有效能問題，另外也與timestep的可接受變化程度息息相關。常見的作法都會<strong>讓timestep為一個固定值</strong>，這樣在各個積分方法上都會相對穩定。</p><hr /><p>Integration相關內容:</p><ul><li><a href="https://www.youtube.com/watch?v=kxWBXd7ujx0">Math for Game Developers - Spaceship Orbits (Semi-Implicit Euler)</a></li><li><a href="https://www.youtube.com/watch?v=AZ8IGOHsjBk">Math for Game Developers - Verlet Integration</a></li></ul><h1 id="結論"><a class="markdownIt-Anchor" href="#結論"></a> 結論</h1><p>可以發現各個階段的學問都不少，要完全造出整套物理引擎的難度是很高的。</p><p>我寫下這篇文是希望能當作一個Roadmap，當我之後對哪一部分有實作需求時就可以直接針對那方面來學習。</p><p>事實上我自己有實作過的範疇也幾乎都是Resolution階段，之後有機會可以來寫一篇我在Unity上刻的Partial Physics Simulation的實作心得。</p><p>下一篇我應該會寫Sequential Impulse，以及會把Box2D的各種Constraints分析一輪。</p><p><em><strong>本篇文如果有任何錯誤的見解麻煩告知，我會盡快修正</strong></em></p>]]></content>
    
    
    <summary type="html">這篇文會介紹遊戲物理引擎的運作流程與各階段的行為概述，深入的實作方法當然就不會講解了。
就只是當個開頭，真要了解各階段的實作方法可以查查這些關鍵字以及演算法。</summary>
    
    
    
    
    <category term="Gamedev" scheme="https://qwe321qwe321qwe321.github.io/tags/Gamedev/"/>
    
    <category term="GamePhysics" scheme="https://qwe321qwe321qwe321.github.io/tags/GamePhysics/"/>
    
  </entry>
  
  <entry>
    <title>Unity Copy Paste Animator Transitions</title>
    <link href="https://qwe321qwe321qwe321.github.io/2020/12/26/Unity-Copy-Paste-Animator-Transitions/"/>
    <id>https://qwe321qwe321qwe321.github.io/2020/12/26/Unity-Copy-Paste-Animator-Transitions/</id>
    <published>2020-12-25T20:53:00.000Z</published>
    <updated>2020-12-25T20:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>RT，我因為要修改人物動畫而需要調整Animator State，一般來說可能是要將一個動畫clip切成多個階段(如Intro -&gt; Loop -&gt; Outro)，又或者是我打算把一個clip state改成blend tree以方便用參數調整動畫。</p><p>而主要問題就是Unity從來不提供<strong>複製Transition</strong>的功能。</p><p>這件事在專案開發初期還好，反正本來也就幾條transition而已我就手動加。但<strong>修改動畫狀態機</strong>這件事其實<strong>一再發生</strong>，直到今天我的人物狀態機已經複雜到不行了，簡單描述如下:</p><ul><li>幾乎每個狀態都有6 ~ 8個transition</li><li>transition中可能有1 ~ 3個condition</li><li>包含大量跨sub state machine的連結</li></ul><p><em>(這部分我也有架構上的問題沒解決才導致狀態機如此混亂)</em></p><p>但我真的受不了要自己重拉線這件事了，誰知道未來還有多少次這種折磨。</p><span id="more"></span><p>不過我其實google了好幾次都沒找到有人做過這種工具，於是就有了這次的實作。</p><h1 id="實作"><a class="markdownIt-Anchor" href="#實作"></a> 實作</h1><p>我理想中的使用方法是可以直接拿到AnimatorWindow的狀態來做複製貼上。</p><p>首先測試了一下<code>Selection.objects</code>拿的到選取的<code>AnimatorStateTransitions</code>和<code>AnimatorState</code>，這兩個的關係甚麼呢？我翻一下<code>AnimatorController</code>內的所有屬性，整個階層架構展開大概長這樣:</p><pre class="line-numbers language-none"><code class="language-none">AnimatorController|-AnimatorStateMachine  |-layers (AnimatorLayer)    |-states (AnimatorState)      |-transitions (AnimatorTransition)        |-destinationState (AnimatorState)      |-subStateMachines (StateMachine)  ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意<code>AnimatorTransition</code>本身不包含他的source state，所以我用Selection拿到的transition時也拿不到他的source，這樣就無法複製Ingoing transition了。</p><p>因此我只好直接暴力搜尋當前layer內所有的transition來找source state。</p><p>不過有個問題是我實在找不到<strong>取得AnimatorWindow當前的AnimatorController以及Layer</strong>的方法，本來我也decompile了<code>UnityEditor.dll</code>且在裡面找到這兩個field:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token class-name">AnimatorController</span> lastActiveController <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> lastActiveLayerIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>想說這看起來跟<a href="https://docs.unity3d.com/ScriptReference/SceneView-lastActiveSceneView.html"><code>SceneView.lastActiveSceneView</code></a>和<a href="https://docs.unity3d.com/ScriptReference/GUILayoutUtility.GetLastRect.html"><code>GUILayoutUtility.GetLastRect()</code></a>的命名邏輯很像，應該可以拿到最近一次focus的Controller了。</p><p>但用了Reflection.GetValue拿到的始終是<code>null</code>，只好作罷。</p><p>於是改成了<strong>使用者需要自己設定好目標AnimatorController以及Layer才能開始複製貼上</strong>，弄這個也多花時間在做錯誤處理(防範使用者複製貼上到不同的controller或layer)。</p><p>老實說剩下就沒什麼好紀錄的，頂多就一些小細節，如資訊要完整複製、Transition的order要維持或支援undo/redo這種，畢竟就只是很單純的寫一個EditorWindow的工具而已。</p><p>---- 隔了一天的更新 20/12/26 ----</p><p>才怪，有幾件非常重要的事情我沒處理。</p><h2 id="1-unity專案重啟後那些transition就沒了"><a class="markdownIt-Anchor" href="#1-unity專案重啟後那些transition就沒了"></a> 1. Unity專案重啟後那些transition就沒了</h2><p>這件事很嚴重，因為這樣根本不能用，害我馬上把github專案改回private緊急維修。</p><p>原因很單純，那些AnimatorStateTransition根本沒有存進專案內(AnimatorController內部)。我原本是直接用constructor new了一個出來，如下:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> transition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AnimatorStateTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span><span class="token function">AddTransition</span><span class="token punctuation">(</span>transition<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我本以為那個<code>AddTransition</code>的方法已經會幫我處理這塊了，結果並沒有。因為內部是長這樣:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">///   &lt;para>Utility function to add an outgoing transition.&lt;/para></span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="transition">The transition to add.&lt;/param></span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddTransition</span><span class="token punctuation">(</span><span class="token class-name">AnimatorStateTransition</span> transition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>undoHandler<span class="token punctuation">.</span><span class="token function">DoUndo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Transition added"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AnimatorStateTransition<span class="token punctuation">[</span><span class="token punctuation">]</span></span> transitions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transitions<span class="token punctuation">;</span>ArrayUtility<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AnimatorStateTransition<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">ref</span> transitions<span class="token punctuation">,</span> transition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>transitions <span class="token operator">=</span> transitions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而其他參數的多載方法是長這樣:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">AnimatorStateTransition</span> <span class="token function">AddTransition</span><span class="token punctuation">(</span><span class="token class-name">AnimatorStateMachine</span> destinationStateMachine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">AnimatorStateTransition</span> animatorStateTransition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">CreateTransition</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    animatorStateTransition<span class="token punctuation">.</span>destinationStateMachine <span class="token operator">=</span> destinationStateMachine<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AddTransition</span><span class="token punctuation">(</span>animatorStateTransition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> animatorStateTransition<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以發現它有一個Create方法來產生Transition，裡面是:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name">AnimatorStateTransition</span> <span class="token function">CreateTransition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> setDefaultExitTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">AnimatorStateTransition</span> animatorStateTransition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AnimatorStateTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    animatorStateTransition<span class="token punctuation">.</span>hasExitTime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    animatorStateTransition<span class="token punctuation">.</span>hasFixedDuration <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">bool</span></span> flag <span class="token operator">=</span> AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        AssetDatabase<span class="token punctuation">.</span><span class="token function">AddObjectToAsset</span><span class="token punctuation">(</span>animatorStateTransition<span class="token punctuation">,</span> AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    animatorStateTransition<span class="token punctuation">.</span>hideFlags <span class="token operator">=</span> HideFlags<span class="token punctuation">.</span>HideInHierarchy<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>setDefaultExitTime<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SetDefaultTransitionExitTime</span><span class="token punctuation">(</span><span class="token keyword">ref</span> animatorStateTransition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> animatorStateTransition<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flag</code>那個判斷式就是重點了，他在確認目前的<code>AnimatorState</code>有存在於專案之中後會把這個transition物件塞進去。</p><p>把這部分處理完之後就解決這問題了。</p><h2 id="2-anystate-entrystate-and-exitstate"><a class="markdownIt-Anchor" href="#2-anystate-entrystate-and-exitstate"></a> 2. AnyState, EntryState, and ExitState</h2><p>這三個State都沒有實體物件存在，所以我的舊版本都沒處理它們。</p><p>這三種State都有個特性是<strong>存在於每個StateMachine之中</strong>，起初我還在煩惱要區分不同stateMachine的實體很麻煩，但後來想想 <strong>跨state machine連結這三個state根本沒意義</strong> ，於是就簡單很多了。</p><p>實作後發現有個小坑: <strong>AnyState的Transitions只存在於Layer第一層的AnimtorStateMachine.anyTransitions內，並不受sub state machine管理</strong>。</p><h2 id="3-transition-with-state-machines"><a class="markdownIt-Anchor" href="#3-transition-with-state-machines"></a> 3. Transition with State Machines</h2><p>事實上不只有AnimatorState可以互相連結，你也可以在編輯器中連結<strong>StateMachine以及State</strong>或是<strong>StateMachine彼此互聯</strong>。</p><p>但是，我實在找不到<strong>取得StateMachine的outgoing transitions</strong>的方法，完全翻不到相關欄位屬性方法。唯一比較像的是<code>GetStateMachineTransitions()</code>，但不管怎麼使用都是拿到空陣列[0]就作罷。</p><p>結論就…放生吧，事實上我的使用情境是完全沒用到StateMachine的連結啦，所以應用上很OK了。</p><h3 id="20221119更新"><a class="markdownIt-Anchor" href="#20221119更新"></a> <em>2022/11/19更新</em></h3><p>過了兩年，收到一個<a href="https://github.com/qwe321qwe321qwe321/Unity-AnimatorTransitionCopier/pull/3">Pull Request#3</a>，他加了一個小功能支援State -&gt; StateMachine的transition，只要透過Transition屬性中的 <code>destinationStateMachine</code> 即可做到。</p><p>我在順手修一些陳舊爛code的時候順便重新審視了整個實作，而這次我經過一些測試後總算搞懂 <a href="https://docs.unity3d.com/ScriptReference/Animations.AnimatorStateMachine.GetStateMachineTransitions.html">AnimatorStateMachine.GetStateMachineTransitions()</a> 的用法了，官方文檔真的是爛斃了。</p><h3 id="animatorstatemachinegetstatemachinetransitions"><a class="markdownIt-Anchor" href="#animatorstatemachinegetstatemachinetransitions"></a> AnimatorStateMachine.GetStateMachineTransitions()</h3><pre class="line-numbers language-none"><code class="language-none">public AnimatorTransition[] GetStateMachineTransitions(Animations.AnimatorStateMachine sourceStateMachine);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這個方法最讓我疑惑的點是「他是一個AnimatorStateMachine的成員方法然後又需要傳入參數AnimatorStateMachine」，到底這兩個AnimatorStateMachine是代表什麼？</p><p>總之，經過測試加上<a href="https://csharp.hotexamples.com/examples/-/AnimatorStateMachine/-/php-animatorstatemachine-class-examples.html">這段code</a>之後確認了一件事：「如果你要取得stateMachineA的outgoing transitions，你要透過其parent state machine來呼叫方法，並傳入stateMachineA作為參數。」</p><pre class="line-numbers language-none"><code class="language-none">transitions &#x3D; parentStateMachine.GetStateMachineTransitions(stateMachine);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搞懂這個之後，全功能總算是做完了<a href="https://github.com/qwe321qwe321qwe321/Unity-AnimatorTransitionCopier/pull/4">PR#4</a>。</p><h1 id="成果"><a class="markdownIt-Anchor" href="#成果"></a> 成果</h1><h2 id="copy-selected-transitions"><a class="markdownIt-Anchor" href="#copy-selected-transitions"></a> Copy selected transitions</h2><p><img src="https://github.com/qwe321qwe321qwe321/Unity-AnimatorTransitionCopier/raw/main/images/copy_selected_transitions.gif" alt="" /></p><h2 id="copy-all-transitions-of-selected-state"><a class="markdownIt-Anchor" href="#copy-all-transitions-of-selected-state"></a> Copy all transitions of selected state</h2><p><img src="https://github.com/qwe321qwe321qwe321/Unity-AnimatorTransitionCopier/raw/main/images/copy_selected_state.gif" alt="" /></p><p>還挺滿意的~ 除了EditorWindow沒辦法即時刷新小可惜(要滑鼠滑上去才更新)。</p><p>– 20/12/26更新 –</p><h2 id="anystate-entrystate-and-exitstate"><a class="markdownIt-Anchor" href="#anystate-entrystate-and-exitstate"></a> AnyState, EntryState, and ExitState</h2><p><img src="https://github.com/qwe321qwe321qwe321/Unity-AnimatorTransitionCopier/raw/main/images/copy_selected_special_states.gif" alt="" /></p><h1 id="後話"><a class="markdownIt-Anchor" href="#後話"></a> 後話</h1><p><s>功能做出來也花不到4小時吧，剩下時間也只是在修UI跟一些錯誤處理。我實在搞不懂Unity官方為什麼不做這個功能，我相信他們工程師要搞的話一天內就能做好整個功能包測試。</s></p><p>更新後又花了快半天，那我覺得Unity官方至少一個禮拜內能搞定吧。</p><h1 id="專案網址"><a class="markdownIt-Anchor" href="#專案網址"></a> 專案網址</h1><p><a href="https://github.com/qwe321qwe321qwe321/Unity-AnimatorTransitionCopier">https://github.com/qwe321qwe321qwe321/Unity-AnimatorTransitionCopier</a></p>]]></content>
    
    
    <summary type="html">RT，我因為要修改人物動畫而需要調整Animator State，一般來說可能是要將一個動畫clip切成多個階段(如Intro -&gt; Loop -&gt; Outro)，又或者是我打算把一個clip state改成blend tree以方便用參數調整動畫。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="Gamedev" scheme="https://qwe321qwe321qwe321.github.io/tags/Gamedev/"/>
    
    <category term="Tool" scheme="https://qwe321qwe321qwe321.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>More Effective C# 筆記 #1 資料型別</title>
    <link href="https://qwe321qwe321qwe321.github.io/2020/12/14/More-Effective-C-2nd-%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    <id>https://qwe321qwe321qwe321.github.io/2020/12/14/More-Effective-C-2nd-%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/</id>
    <published>2020-12-13T16:57:00.000Z</published>
    <updated>2020-12-13T16:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>本篇內容大多來自於*《More Effective C# 寫出良好C#程式的50個具體做法 第二版》Ch.1 處理資料型別*，加上一些網路上查詢的相關內容學習紀錄。</p><p>主要目的是了解C#語言的一些細節與效能陷阱，以便撰寫更好的程式碼。</p><span id="more"></span><h1 id="使用屬性property取代public欄位field"><a class="markdownIt-Anchor" href="#使用屬性property取代public欄位field"></a> 使用屬性(Property)取代public欄位(Field)</h1><ul><li>屬性(Property): 抽象的存取介面，本身不包含資料，僅提供getter和setter的method。可以把它直接當成getter &amp; setter methods來看待。</li><li>欄位(Field): 實體的資料內容。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">punlic <span class="token keyword">class</span> <span class="token class-name">GameObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> m_Name<span class="token punctuation">;</span> <span class="token comment">// private field</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token comment">// public property</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token comment">// getter</span>            <span class="token keyword">return</span> m_Name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> <span class="token comment">// setter</span>            m_Name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span> <span class="token comment">// public field &lt;---應避免使用，改以public proerpty的方式取代</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>實作索引子(Indexer)  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> m_Array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// private field</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Indexer, e.g. foo[0] = 0;</span>        <span class="token keyword">get</span> <span class="token operator">=></span> m_Array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> <span class="token operator">=></span> m_Array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2-dims Indexer, e.g. foo[0, 0] = 0;</span>        <span class="token keyword">get</span> <span class="token operator">=></span> m_Array<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> m_Array<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> <span class="token operator">=></span> m_Array<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> m_Array<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token comment">// with string parameters.</span>        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token function">DoSomething</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用屬性的好處:<ol><li>抽象化資料內容不外露，能自由定義存取時的行為。</li><li>分別定義getter和setter的存取範圍(public/protected/private)</li><li>可以使用virtual、abstract關鍵字，能被繼承覆寫。</li><li>能定義在interface內(視同method)</li></ol></li><li>使用屬性的限制:<ol><li>不能用ref或out關鍵字把屬性傳遞給方法。</li></ol></li><li>屬性對外的使用方式與欄位相同，但是會產生不同的中繼語言MSIL指令(instruction)，即使他們在使用語法與資料來源是相容的，但是他們的機械碼是不相容的。這將會被迫更新一個已經deploy的assembly。</li><li>效能方面，當JIT編譯器內嵌屬性存取子時，屬性與欄位的效能是一樣的。縱使沒有內嵌，效能差異也只有一個function call，這個差異幾乎可以忽視。<ul><li>內嵌屬性存取子: 意旨getter方法只是很單純的return一個field的值，這樣編譯器就以inline的方式最佳化，所以沒有function call。</li><li><a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/programming-guide/classes-and-structs/using-properties">https://docs.microsoft.com/zh-tw/dotnet/csharp/programming-guide/classes-and-structs/using-properties</a></li></ul></li></ul><h2 id="in-unity"><a class="markdownIt-Anchor" href="#in-unity"></a> In Unity</h2><ul><li>在Unity內，我們一般會很習慣直接用public field來expose我們的成員變數到editor inspector上顯示。</li><li>當我們打算以屬性來取代欄位時，可以透過[SerializeField]來expose私有欄位。<ul><li>並且m_的命名開頭能夠被Unity忽略掉，算是一種unity-supported的coding style。</li></ul>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> health<span class="token punctuation">;</span> <span class="token comment">// public field which is bad.</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token comment">// private field with this attribute can be exposed to inspector.</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> m_Health<span class="token punctuation">;</span> <span class="token comment">// "m_" will not be displayed in Unity inspector.</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Health <span class="token punctuation">&#123;</span> <span class="token comment">// public property</span>    <span class="token keyword">get</span> <span class="token operator">=></span> m_Health<span class="token punctuation">;</span>    <span class="token keyword">set</span> <span class="token operator">=></span> m_Health <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="可變動的資料優先使用隱含式屬性"><a class="markdownIt-Anchor" href="#可變動的資料優先使用隱含式屬性"></a> 可變動的資料優先使用隱含式屬性</h1><ul><li>隱含式屬性 Auto-Implemented property: 編譯器會自動建立支援欄位(backing field)，由於支援欄位的名稱是由編譯器產生，你無法直接使用支援欄位。  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// Auto-Implemented property</span>    <span class="token comment">// equals</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> m_Name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token operator">=></span> m_Name<span class="token punctuation">;</span>        <span class="token keyword">set</span> <span class="token operator">=></span> m_Name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用隱含式屬性的好處:<ol><li>撰寫方便+可讀性較佳</li><li>限制使用者無法直接存取欄位</li><li>當有需要把隱含式屬性用具體的實作取代時(如setter需要做資料驗證)，你將會是針對你的類別做機器碼相容的改變。</li></ol></li><li>缺點:<br />       * 對於Serialization的attribute不友善</li></ul></li></ul><h2 id="in-unity-2"><a class="markdownIt-Anchor" href="#in-unity-2"></a> In Unity</h2><ul><li>直接在隱含式屬性上加[SerializeField]是沒有效果的，是要改成使用[field: SerializeField]才有效。</li><li>缺點是在inspector的顯示名稱很難看，建議不要在這種情況下使用隱含式比較好。</li><li>但一般來說如果你有不需要被Serialized的屬性的話用隱含式就很方便了。  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">   <span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">field</span><span class="token punctuation">:</span> <span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Health <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// auto-implemented property</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="實值型別value-types優先使其具不可變性"><a class="markdownIt-Anchor" href="#實值型別value-types優先使其具不可變性"></a> 實值型別(value types)優先使其具不可變性</h1><ul><li>不可變的型別(immutable types): 型別在建立後，它們成為常數。</li><li>實質型別以struct實作，使其符合純資料的組合(composition)。</li><li>example: 可變動的Address結構  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">sturct</span> Address <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> state<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> zipCode<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Line1 <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Line2 <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> State <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token operator">=></span> state<span class="token punctuation">;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            <span class="token function">ValidateState</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            state <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ZipCode <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token operator">=></span> zipCode<span class="token punctuation">;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            <span class="token function">ValidateZip</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            zipCode <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>使用範例:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Use case</span><span class="token class-name">Address</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>Line1 <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>City <span class="token operator">=</span> <span class="token string">"Taipei"</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span>ZipCode <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span> <span class="token comment">// Assume it is valid zip.</span><span class="token comment">// Edit.</span>a1<span class="token punctuation">.</span>City <span class="token operator">=</span> <span class="token string">"New Taipei City"</span><span class="token punctuation">;</span> <span class="token comment">// Now zip is invalid.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>內部狀態改變代表有可能違反了物件的不變性(immutable)，在你替換City欄位時，a1已經成為一個錯誤的資料，他的ZipCode不再合法。</li><li>違反物件的不變性更會導致多執行緒發生問題。</li></ul></li><li>因此好的做法應該是要讓Address物件成為一個不可變的struct，把所有public properties改成唯讀，如下:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">sturct</span> Address <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Line1 <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Line2 <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ZipCode <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> line1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> line2<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> city<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> zipCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Line1 <span class="token operator">=</span> line1<span class="token punctuation">;</span>        Line2 <span class="token operator">=</span> line2<span class="token punctuation">;</span>        City <span class="token operator">=</span> city<span class="token punctuation">;</span>        <span class="token function">ValidateZip</span><span class="token punctuation">(</span>zipCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        ZipCode <span class="token operator">=</span> zipCode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>如此一來，每當你要更換資料內容時，都必須重新new一個出來，這樣就能維持資料的不變性。</li><li>注意可能會有reference type的field，在ctor時要deep clone而非直接assgin。  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 有漏洞</span><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">PhoneList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Phone<span class="token punctuation">[</span><span class="token punctuation">]</span></span> phones<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PhoneList</span><span class="token punctuation">(</span><span class="token class-name">Phone<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        phones <span class="token operator">=</span> ph<span class="token punctuation">;</span> <span class="token comment">// Phone[] 是reference type，因此在外部更改也會影響內部的值。</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Phone<span class="token punctuation">></span></span> Phones <span class="token operator">=></span> phones<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 正確的做法</span><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">PhoneList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ImmutableList<span class="token punctuation">&lt;</span>Phone<span class="token punctuation">></span></span> phones<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PhoneList</span><span class="token punctuation">(</span><span class="token class-name">Phone<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        phones <span class="token operator">=</span> ph<span class="token punctuation">.</span><span class="token function">ToImmutableList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 會額外生成一個不可變的List(clone)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Phone<span class="token punctuation">></span></span> Phones <span class="token operator">=></span> phones<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="區分實值value與參考reference型別"><a class="markdownIt-Anchor" href="#區分實值value與參考reference型別"></a> 區分實值(value)與參考(reference)型別</h1><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">實值型別(value types)</th><th style="text-align:center">參考型別(reference types)</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">Struct</td><td style="text-align:center">Class</td></tr><tr><td style="text-align:center">記憶體位置</td><td style="text-align:center">Stack</td><td style="text-align:center">物件記憶體存放於Heap，Stack上僅存其指標</td></tr><tr><td style="text-align:center">繼承與多型</td><td style="text-align:center">無法繼承，可實作Interface</td><td style="text-align:center">支援任何繼承與實作</td></tr><tr><td style="text-align:center">NULL</td><td style="text-align:center">永遠都有數值，並沒有NULL</td><td style="text-align:center">可為NULL(視同空指標)</td></tr><tr><td style="text-align:center">建構子Constructor</td><td style="text-align:center">不能自行定義無參數建構子，但任何struct都保證會有default的無參數建構子(所有欄位塞0)，且在定義建構子中要求對所有欄位成員賦值。</td><td style="text-align:center">可自由定義</td></tr><tr><td style="text-align:center">Assign operator</td><td style="text-align:center">完全複製實值</td><td style="text-align:center">複製指標(因此還是會指向同一塊heap記憶體)</td></tr><tr><td style="text-align:center">Memory overhead</td><td style="text-align:center">No(Unless boxing)</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">GC</td><td style="text-align:center">No GC.Allocate (Unless boxing)</td><td style="text-align:center">Yes</td></tr></tbody></table><ul><li><a href="https://stackoverflow.com/questions/13049/whats-the-difference-between-struct-and-class-in-net">What’s the difference between struct and class in .NET?<br /></a></li></ul><h2 id="memory-overhead"><a class="markdownIt-Anchor" href="#memory-overhead"></a> Memory overhead</h2><ul><li><p>由於參考型別相當於用指標去參考指定物件，勢必得分配記憶體給這個「指標」使用，一般來說與int的長度相同為32bits=4Bytes，而memory overhead就是指這個額外的指標記憶體花費。</p></li><li><p>舉例來說，分別以struct和class來製作兩種型別:</p>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">FooStruct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> intValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> intValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然後用分配一個長度為100的array，它們實際上分配的記憶體如下</p>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">FooStruct<span class="token punctuation">[</span><span class="token punctuation">]</span></span> structArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FooStruct</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Memory = 陣列型別的指標記憶體(4Bytes) + 100 * FooStruct的記憶體(等同int的記憶體=4Bytes)</span><span class="token class-name">FooClass<span class="token punctuation">[</span><span class="token punctuation">]</span></span> classArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FooClass</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Memory = 陣列型別的指標記憶體(4Bytes) + 100 * FooClass指標記憶體(4Bytes)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>雖然這樣看起來兩者的記憶體使用量是一樣的，但事實上structArray這時候已經有值了(為0)，而classArray存的全是空指標，因此還需要下面步驟兩者才算相等:</p>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Assign每一個陣列元素</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    classArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FooClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 跑完後的Memory使用量為: 陣列型別的指標記憶體(4Bytes) + 100 * FooClass指標記憶體(4Bytes) + 100 * FooClass的記憶體(等同int的記憶體=4Bytes)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此時我們就可以說classArray的memory overhead接近50%(100 / 201)，所謂overhead的部分就是指標所額外占用的比率(陣列使用的指標不計)。</p></li><li><p>參考資料</p><ul><li><a href="https://stackoverflow.com/a/2860543">What is “overhead”?</a></li></ul></li></ul><h2 id="boxing"><a class="markdownIt-Anchor" href="#boxing"></a> Boxing</h2><ul><li>Boxing是指將實質型別(value type)轉換為<code>object</code>類型或是由這個實值型別實作之任何介面。</li><li>直接用程式碼來表示:</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment">// a value type</span><span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token comment">// boxing (implicit casting value type to System.Object)</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>   <span class="token comment">// unboxing (explicit casting from System.Object to value type)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>這樣的過程相當於new一個只包著int i的class，有可能有效能上的隱憂。</p></li><li><p>一些非常容易發生的boxing:</p><ol><li>String.Format</li></ol>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Format</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> format<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以注意到參數args的型別是object，因此一般在使用上可能會如下:</p>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">float</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token number">1f</span><span class="token punctuation">;</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"value is &#123;0&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value is 1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>後面的value本來是float實值型別，但是它將會被boxing成<code>object</code> type。<br />如果要避免boxing可以提前用<code>ToString()</code>方法來轉型成string (string本身就是reference type沒有boxing的問題，可以參考<a href="https://stackoverflow.com/a/8478712">這篇討論</a>)</p><blockquote><p>$“value is {value}” 字串插值這個語法糖在大多數情況是等同於String.Format()，編譯器會根據使用情境來優化選擇方法。 詳情參閱: <a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/tokens/interpolated">$ - 字串插值(C# 引用)</a></p></blockquote><ol start="2"><li>拿value type當作Dictionary的key(尤其是Enum)</li></ol>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">enum</span> <span class="token class-name">ConnectionType</span> <span class="token punctuation">&#123;</span>    Signal<span class="token punctuation">,</span>    Reference<span class="token punctuation">,</span>    Parent<span class="token punctuation">&#125;</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>ConnectionType<span class="token punctuation">,</span> GameObject<span class="token punctuation">></span></span> connectionTo<span class="token punctuation">;</span> <span class="token comment">// enum as dictionary key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣會產生boxing的原因是hash-based collection是透過Object.GetHashCode()來產生hash，所以它一律都會把key值轉回object來呼叫GetHashCode()方法。</p><p>想要避免boxing可以透過繼承<code>IEqualityComparer</code>來建立一個自定義的Comparer來避免做Object.GetHashCode()的行為，如下:</p>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionTypeComparer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>ConnectionType<span class="token punctuation">></span></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">ConnectionType</span> x<span class="token punctuation">,</span> <span class="token class-name">ConnectionType</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token class-name">ConnectionType</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 用dictionary建構子替換default的comparer</span>connectionTo <span class="token operator">=</span> <span class="token generic-method"><span class="token function">Dictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConnectionType<span class="token punctuation">,</span> GameObject<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionTypeComparer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又或者可以透過struct包裝value reference的key並實作<code>IEquatable</code>介面來使其呼叫覆寫的<code>GetHashCode()</code>，這部分的原理詳情可參考這篇: <a href="https://www.jacksondunstan.com/articles/5148">Collections Without the Boxing</a></p>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">struct</span> <span class="token class-name">IntStruct</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEquatable<span class="token punctuation">&lt;</span>IntStruct<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">IntStruct</span> other<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Value <span class="token operator">==</span> other<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Value<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基本上就是<strong>多注意generic function，通常會有boxing的隱憂</strong>。</p></li><li><p>參考</p><ul><li><a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/programming-guide/types/boxing-and-unboxing">Boxing 和 Unboxing (C# 程式設計手冊)</a></li><li><a href="https://isdaniel.github.io/Boxing_UnBoxing/">C# Boxing vs UnBoxing</a></li></ul></li></ul><h1 id="了解多種相等概念之間的關係"><a class="markdownIt-Anchor" href="#了解多種相等概念之間的關係"></a> 了解多種相等概念之間的關係</h1><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">System</span><span class="token punctuation">.</span>Object <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReferenceEquals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> left<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> left<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">MyClass</span> left<span class="token punctuation">,</span> <span class="token class-name">MyClass</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="referenceequalsobject-left-object-right"><a class="markdownIt-Anchor" href="#referenceequalsobject-left-object-right"></a> <code>ReferenceEquals(object left, object right)</code></h2><ul><li>判斷兩者的<strong>物件識別(object identity)相同</strong>，即兩者<strong>參考的記憶體對象</strong>是否相同。<ul><li>用這個方法檢測實值型別的相等永遠傳回false。</li></ul>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// value types never reference equals.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Never happends.</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Always happens.</span><span class="token punctuation">&#125;</span><span class="token comment">// Even if itself</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Never happends.</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Always happens.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>因為boxing的緣故，即使你以一個實值型別和自己相比也會回傳false。</li></ul><h2 id="equalsobject-left-object-right"><a class="markdownIt-Anchor" href="#equalsobject-left-object-right"></a> <code>Equals(object left, object right)</code></h2><ul><li>一個靜態泛型(generic)的比較相等方法，具體實作與以下類似:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Check object identity</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> left<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Return false if one of them is null.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>    Object<span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// return left's Equals() method.</span><span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以發現這個方法完全沒有實際的比較，具體的比較內容是仰賴<code>ReferenceEquals</code>和實體(intance)方法<code>Equals(object right)</code>來實作。</li></ul></li></ul><h2 id="equalsobject-right"><a class="markdownIt-Anchor" href="#equalsobject-right"></a> <code>Equals(object right)</code></h2><ul><li>可繼承覆寫的實體的方法</li><li>預設沒繼承的<code>Object.Equals(object right)</code>的功能與<code>Object.ReferenceEquals</code>完全一樣</li><li>實值型別其實都是繼承自<code>System.ValueType</code>，包含所有struct，而<code>ValueType</code>是已經有覆寫(override)這個Equals方法了。</li><li>但記住，因為它是所有實值型別的基底，為了做正確的ValueType Equals檢測它會仰賴Refelction來比較所有欄位(field)的值是否一致。</li><li>因此<strong>基本上你應該要為所有struct型別覆寫<code>Equals</code>以得到最好的效能</strong>。</li><li>當你想要讓你的參考型別以實值語法(Value semantic)來比較相等時，才會需要覆寫Equals方法</li><li>如string就是一個典型的參考型別+實值語法的類別。</li><li>當你要實作時，記住你需要尊重相等的數學性質: 反身性(reflexive)、對稱性(symmetric)和遞移性(transitive)。<ul><li>反身性(reflexive): 任何物件和自身相等，不管是哪一種型別，a == a 永遠都為true。</li><li>對稱性(symmetric): 次序不影響結果，如果 a == b 為true，則b == a 為true。</li><li>遞移性(transitive): 如果 a == b &amp;&amp; b == c 為true，則 a == c 為true。</li></ul></li><li><code>IEquatable&lt;T&gt;</code>提供了強型別(strong-type)的參數，在Collection類別中可以省去Type檢查以及boxing，細節可以參考 <a href="https://www.jacksondunstan.com/articles/5148">Collections Without the Boxing</a> 以及 <a href="https://blog.paranoidcoding.com/2009/01/15/if-you-implement-iequatable-t-you-still-must-override-object-s-equals-and-gethashcode.html">If You Implement Iequatable T You Still Must Override Object S Equals And Gethashcode</a><ul><li>所以基本上，每當你想要覆寫<code>Object.Equals</code>時都應該實作<code>IEquatable&lt;T&gt;</code>以獲得最大效能。</li></ul></li><li>一個典型的class覆寫Equals範例如下:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEquatable<span class="token punctuation">&lt;</span>Foo<span class="token punctuation">></span></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">objet</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Check null.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Check object identity</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">.</span><span class="token function">ReferenceEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Check type</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> right<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>right <span class="token keyword">as</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// IEquatable&lt;Foo> implementation.</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 省略</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>注意Type檢查的部分，一般來說可能會寫成下面這種:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 有問題的寫法</span><span class="token class-name">Foo</span> rightAsFoo <span class="token operator">=</span> right <span class="token keyword">as</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rightAsFoo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>rightAsFoo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>這種情況可能會發生一個很嚴重的問題，當一個繼承關係的兩個類別進行比較時如下:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Boo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Foo</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boo</span> boo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Boo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// correct.</span>boo<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// always return false, because foo as Boo == null.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>會破壞相等的<strong>對稱性</strong>，因此進行精準的強型別檢查是必須的。</li><li><code>operator ==()</code><ul><li>當你建立一個實值型別時，就應當重新定義運算子==()，原因跟<code>Equals</code>相同。</li></ul></li></ul><h1 id="了解gethashcode的陷阱"><a class="markdownIt-Anchor" href="#了解gethashcode的陷阱"></a> 了解GetHashCode()的陷阱</h1><ul><li>每當你打算覆寫GetHashCode()時，應當依循以下三個規則:<ol><li>如果兩個物件是相等的(如Equals方法的結果)，則它們必須產生相同的雜湊值。(但不代表相同雜湊值就一定Equals)</li><li>對於任何物件A，A.GetHashCode()必須是不會因實體而改變。無論呼叫A的任何一個方法，GetHashCode()都必須傳回相同的值。(不得在外部修改，確保能在collection中正確的存取)</li><li>雜湊函式必須使所有典型的輸入集均勻的分佈在所有整數上。理想上，你會想避免產生的值集中在某些值的附近以避免bucket內的物件過多。(不強制，但這關乎到hashmap的效率)</li></ol></li><li>預設的<code>System.Object.GetHashCode</code>使用System.Object類別中的一個internal欄位來產生雜湊值(相當於參考指標)。</li><li>預設的<code>System.ValyeType.GetHashCode</code>為所有實值型別提供了預期行為。它依據型別中定義的第一個欄位來傳回雜湊碼(透過Reflection)，看以下例子:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DateTime</span> date<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>則MyStruct的雜湊碼就是由<code>msg</code>欄位所產生的雜湊碼。因此以下程式碼:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">MyStruct</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>會回傳true。<br />但這也代表一件事，<strong>所有訊息一樣的MyStruct物件</strong>都會有<strong>一樣的雜湊碼</strong>，這樣一來hash-based collection的效率就會降低(都被放在同一個bucket內)。<br />換個情形來看，如果只是改個位置:  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">DateTime</span> date<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>此時的MyStruct仰賴<code>date</code>產出HashCode，這樣一來同一天的所有訊息都會<strong>有同一個hash</strong>，<strong>效能會大大降低(變O(N))</strong>，完全失去hash的優點。</p><h2 id="gethashcode到底該不該覆寫"><a class="markdownIt-Anchor" href="#gethashcode到底該不該覆寫"></a> <code>GetHashCode</code>到底該不該覆寫?</h2><ul><li>對於參考型別的物件<ul><li>一般來說<code>System.Object.GetHashCode</code>就足夠使用了，但是如果有覆寫<code>Equals</code>或<code>operator ==()</code>時則要注意規則1.是否有遵循。</li><li>萬一真的要覆寫的話，記得規則2.的內容，不能因為欄位的值變動了而改動HashCode。</li></ul></li><li>對於實值型別的物件<ul><li>基本上不建議使用其預設的hash(Reflection + 分散效果差)。</li><li>為了遵循規則2.，最好是做成不可改變的型別(immutable)或是hash的參考對象是不可改變的。</li><li>為了效率起見遵循規則3.，要找到適當產生hash的方法是足夠分散且不碰撞的。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">本篇內容大多來自於*《More Effective C# 寫出良好C#程式的50個具體做法 第二版》Ch.1 處理資料型別*，加上一些網路上查詢的相關內容學習紀錄。

主要目的是了解C#語言的一些細節與效能陷阱，以便撰寫更好的程式碼。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="C#" scheme="https://qwe321qwe321qwe321.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Unity AnimationCurve with Easing Functions</title>
    <link href="https://qwe321qwe321qwe321.github.io/2020/11/22/Unity-AnimationCurve-with-Easing-Functions/"/>
    <id>https://qwe321qwe321qwe321.github.io/2020/11/22/Unity-AnimationCurve-with-Easing-Functions/</id>
    <published>2020-11-21T20:57:00.000Z</published>
    <updated>2020-11-21T20:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>因為專案需求，我需要用 Unity 在 runtime 生成一個 particle system ，並且一些 curve 參數的曲線需要套用 easing function 的曲線。</p><p>而 Unity 的曲線一律都是 AnimationCurve ，但 goo 了一下也沒找到有人做過 Easing AnimationCurve ，大概都只有硬拆 N 個 sample 點直接當 AnimationCurve 的 keyframes 這種暴力解。我不喜歡這種方法，理由其一他的使用效能絕對比較爛，再來是結果的形狀也不見得足夠接近。</p><p>理論上應該可以找到盡可能小的 keyframe 數量來建構 EasingFunction 的方法，所以就有了這次的嘗試。</p><span id="more"></span><h2 id="準備環境"><a class="markdownIt-Anchor" href="#準備環境"></a> 準備環境</h2><ul><li>Unity2019.4.12f1 LTS</li><li>在Unity能直接使用的EasingFunction類別 <a href="https://gist.github.com/cjddmut/d789b9eb78216998e95c">EasingFunction.cs</a> by cjddmut</li></ul><h1 id="實作"><a class="markdownIt-Anchor" href="#實作"></a> 實作</h1><p>首先我們都知道AnimationCurve的實作就是<a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">Cubic Bezier Curve</a><br /><img src="/images/bezier.png" alt="Cubic Bezier Curve from wiki" /></p><p>所以大方向就是要找方法把Easing Function轉成Bezier Curve的表示法，這方面有很多現成的實作方法與函式庫。</p><p>但是AnimationCurve的參數是如何對應到Bezier Curve的，Unity Document沒有給出很明確的解釋。</p><p>因此第二步是把BezierCurve轉回AnimationCurve。</p><p>然後就大功告成。</p><h1 id="easing-function-to-bezier-curve"><a class="markdownIt-Anchor" href="#easing-function-to-bezier-curve"></a> Easing Function to Bezier Curve</h1><p>這裡我翻到了一篇2016的paper <a href="https://www.researchgate.net/publication/308007569_Easing_Functions_in_the_New_Form_Based_on_Bezier_Curves">Easing Functions in the New Form Based on Bézier Curves</a> by Dariusz Sawicki<br />他直接提供了所有Easing function以Cubic Bezier來表達的各個係數項與算出來的平方差，完美地解決了我的需求。</p><p>但是，我使用的<code>EasingFunction.cs</code>有額外寫了個<code>Spring</code>函數，它不是典型的EasingFunction所以沒有在paper中出現。而我強迫症發作，覺得這個函數必須要一起支援轉換成AnimationCurve才對。</p><p>所以還是回歸初心，找一些Bezier Curve Approximation的方法或函式庫來使用。<br />最後翻到這篇</p><blockquote><p><a href="https://stackoverflow.com/questions/5525665/smoothing-a-hand-drawn-curve">https://stackoverflow.com/questions/5525665/smoothing-a-hand-drawn-curve</a></p></blockquote><p>解答者很好心地給了一個<em>quick and dirty C# port of FitCurves</em>的source code，那就直接拿來用囉。</p><p>應用就只是在指定的function先暴力sample N個點，然後套這個fitting function來得到Bezier的係數。效果還不錯，但還是paper給的係數比較整齊乾淨，所以最後我也只在spring function上使用這套方法得到的係數。</p><h1 id="bezier-curve-to-animationcurve"><a class="markdownIt-Anchor" href="#bezier-curve-to-animationcurve"></a> Bezier Curve to AnimationCurve</h1><p>這部分網路上稍微有一點討論度，因為Unity Documentation真的寫得很模糊。<br />我直接給整理吸收完的結論:</p><ul><li>AnimationCurve上的點稱為Keyframe，代表bezier curve中的p0或p3</li><li>Keyframe的inTangent, outTangent屬性代表它in(left)和out(right)的斜率，所以它會影響bezier中的p1和p2</li><li>Keyframe中的inWeight, outWeight屬性代表p1-p0或p3-p2的長度(length or magnitude)除以他們的x距離(p3.x - p1.x)</li><li>然後注意inWeight和outWeight需要仰賴<code>weightedMode</code>屬性為<code>Both</code>才會被考慮，否則預設情況<code>WeightedMode.None</code>的情形會使兩個值都固定為0.33333333f(預設p1, p2分別在1/3, 2/3的位置)</li><li>所以:<ul><li>p0 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>Keyframe0</mtext></mrow><annotation encoding="application/x-tex">\text{Keyframe0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">Keyframe0</span></span></span></span></span></li><li>p1 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>Keyframe0’s </mtext><mo stretchy="false">(</mo><mtext>outTangent</mtext><mo>∗</mo><mtext>outWeight</mtext><mo>∗</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo stretchy="false">(</mo><mtext>Keyframe0.x</mtext><mo>−</mo><mtext>Keyframe1.x</mtext><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{Keyframe0&#x27;s}\ (\text{outTangent} * \text{outWeight} * length(\text{Keyframe0.x} - \text{Keyframe1.x}))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Keyframe0’s</span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord text"><span class="mord">outTangent</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">outWeight</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord text"><span class="mord">Keyframe0.x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Keyframe1.x</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li><li>p2 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>Keyframe1’s </mtext><mo stretchy="false">(</mo><mtext>inTangent</mtext><mo>∗</mo><mtext>inWeight</mtext><mo>∗</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo stretchy="false">(</mo><mtext>Keyframe0.x</mtext><mo>−</mo><mtext>Keyframe1.x</mtext><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{Keyframe1&#x27;s}\ (\text{inTangent} * \text{inWeight} * length(\text{Keyframe0.x} - \text{Keyframe1.x}))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Keyframe1’s</span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord text"><span class="mord">inTangent</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">inWeight</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord text"><span class="mord">Keyframe0.x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Keyframe1.x</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li><li>p3 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>Keyframe1</mtext></mrow><annotation encoding="application/x-tex">\text{Keyframe1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">Keyframe1</span></span></span></span></span><br />   <br />圖示:<br /><img src="/images/bezier_1.png" alt="Cubic Bezier Curve to AnimationCurve" /></li></ul></li></ul><p>所以重點就只是把p1p2轉成正確的Tangent和Weight即可。</p><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><ul><li><a href="https://answers.unity.com/questions/623318/how-to-convert-cubic-bezier-curve-into-animationcu.html">https://answers.unity.com/questions/623318/how-to-convert-cubic-bezier-curve-into-animationcu.html</a></li><li><a href="https://answers.unity.com/questions/464782/t-is-the-math-behind-animationcurveevaluate.html?_ga=2.199800430.1917493740.1605667091-254103663.1587534286">https://answers.unity.com/questions/464782/t-is-the-math-behind-animationcurveevaluate.html?_ga=2.199800430.1917493740.1605667091-254103663.1587534286</a></li><li><a href="https://docs.unity3d.com/ScriptReference/Keyframe.html">https://docs.unity3d.com/ScriptReference/Keyframe.html</a></li><li><a href="https://answers.unity.com/questions/7682/how-can-i-set-the-tangents-of-keyframes-in-an-anim.html">https://answers.unity.com/questions/7682/how-can-i-set-the-tangents-of-keyframes-in-an-anim.html</a></li></ul><h1 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h1><p>成果我挺滿意的，Keyframe數量落於2~9之間，相比於暴力法用了100個keyframe才能到達差不多的效果。</p><p>這裡就隨便挑幾個產出來的AnimationCurve來看看成果:</p><table><thead><tr><th>EaseInOutBounce: 9 keyframes</th><th>EaseInExpo: 2 keyframes</th></tr></thead><tbody><tr><td><img src="/images/EaseInOutBounce.png" alt="" /></td><td><img src="/images/EaseInExpo.png" alt="" /></td></tr></tbody></table><table><thead><tr><th>EaseInOutCubic: 3 keyframes</th><th>EaseInOutElastic: 9 keyframes</th></tr></thead><tbody><tr><td><img src="/images/EaseInOutCubic.png" alt="" /></td><td><img src="/images/EaseInOutElastic.png" alt="" /></td></tr></tbody></table><p>透過移動position來比較一下直接用EasingFunction的效果(GREEN)和AnimationCurve的效果(RED):</p><p><img src="/images/EasingAnimationCurve_overview.gif" alt="" /></p><p>效果蠻好的，<strong>唯獨Elastic系列的誤差偏大至肉眼可見</strong>。</p><p>這部分我有嘗試過改用Fitting Function求得的係數來比較，效果的確比paper給的係數還要好，但是keyframe數量可能會多達1X個左右。</p><p>而我認為如果沒有要求一定要跟原本的elatic比較的話，目前這樣的誤差是完全可以接受的。因為這看起來比較像是彈性相關係數的不一致的些許延遲誤差，他們整體曲線的變化率仍然十分相近。應用上可以直接替換沒問題。</p><h1 id="專案網址"><a class="markdownIt-Anchor" href="#專案網址"></a> 專案網址</h1><p>包含範例所有的原始碼</p><p><a href="https://github.com/qwe321qwe321qwe321/Unity-EasingAnimationCurve">https://github.com/qwe321qwe321qwe321/Unity-EasingAnimationCurve</a></p><p>我也另外輸出了一個AnimationCurve的<a href="https://github.com/qwe321qwe321qwe321/Unity-EasingAnimationCurve#animationcurve-presets">Presets</a>，如果只是想要以AnimationCurve的形式來使用EasingFunction的話可以直接匯入Presets至專案中。</p>]]></content>
    
    
    <summary type="html">因為專案需求，我需要用 Unity 在 runtime 生成一個 particle system ，並且一些 curve 參數的曲線需要套用 easing function 的曲線。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="Tool" scheme="https://qwe321qwe321qwe321.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Solve the problem of the redundant artifacts in Github Actions 清除 Github Actions 中多餘的 Artifacts</title>
    <link href="https://qwe321qwe321qwe321.github.io/2020/02/27/Solve-the-problem-of-redundant-artifacts-in-Github-Actions/"/>
    <id>https://qwe321qwe321qwe321.github.io/2020/02/27/Solve-the-problem-of-redundant-artifacts-in-Github-Actions/</id>
    <published>2020-02-26T17:23:00.000Z</published>
    <updated>2020-02-26T17:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github_storage_limit.png" alt="從0.8G以上的危機降到了0.26G" /></p><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>這篇接續上一篇 <a href="/2020/02/26/CI-in-Unity-using-GithubAction/">CI in Unity using Github Actions 使用Github Actions自動化測試建置Unity專案</a> 後面所提及的容量限制問題。</p><p>上次說過，依照原本的方法大概build不用10次，Github容量就會爆了。<br />於是大概在第7次的時候就會收到這種信:</p><p><img src="/images/github_storage_limit_notification.png" alt="恭喜你即將用爆囉，請快點升級方案" /></p><span id="more"></span><p>我是收到了這封信的時候才驚覺原來github有容量限制，之前一直以為可以隨便我塞到飽，或許寫個接口還能當作雲端硬碟使用(?)</p><p>總之收到這封信以後我才開始正視這個問題，好險是有找到解決方案，不然我絕對會放棄使用Github Actions作為重要專案的CI服務。</p><p>我只是單純記錄解決的過程，文筆會有些雜亂且廢話居多。</p><h1 id="目標"><a class="markdownIt-Anchor" href="#目標"></a> 目標</h1><p>目標很簡單，需要可以自動刪除<strong>過期</strong>或<strong>多餘</strong>的artifacts的方法。</p><p><strong>過期</strong>或<strong>多餘</strong>的定義也很單純，我只要保留<strong>前N個版本</strong>的執行檔/輸出檔，其餘就是多餘且過期的。</p><h1 id="操作artifacts的api"><a class="markdownIt-Anchor" href="#操作artifacts的api"></a> 操作Artifacts的API</h1><p>Github的REST API v3有提供這樣的API，參考<a href="https://developer.github.com/v3/actions/artifacts/#delete-an-artifact">這裡</a>。</p><ul><li>List all artifact of the repo  <pre class="line-numbers language-none"><code class="language-none">GET &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;actions&#x2F;artifacts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>Delete specific artifact  <pre class="line-numbers language-none"><code class="language-none">DELETE &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;actions&#x2F;artifacts&#x2F;:artifact_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>以我上次的專案為例，想取得所有artifacts的資訊可以直接連到</p><p><a href="https://api.github.com/repos/qwe321qwe321qwe321/Unity-with-Github-Actions-example/actions/artifacts">https://api.github.com/repos/qwe321qwe321qwe321/Unity-with-Github-Actions-example/actions/artifacts</a></p><p>來查看。</p><p><img src="/images/github_api_list_artifacts_1.png" alt="可以看到這裡有36個artifacts" /></p><p>有了這些API就好解決了，可以寫個腳本來爬artifacts的資訊再進行刪除。</p><h1 id="清除腳本"><a class="markdownIt-Anchor" href="#清除腳本"></a> 清除腳本</h1><p>本來想自己寫，但結果不用。查到<a href="https://github.community/t5/GitHub-Actions/Delete-artifacts/td-p/38188/page/3">這篇</a>發現有人已經寫好了！再次感謝 lelegard 這位仁兄。</p><p>他的gist: <a href="https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0">https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0</a></p><p>使用前記得dependencies要裝一裝，主要就jq要另外裝而已，也就<code>apt-get install jq</code>解決。</p><p>但是我用了一下發現一個小bug: 遇到名稱包含空白的artifact時<code>print</code>會噴錯，<br />於是就fork順便幫他改了一下，以下是<a href="https://gist.github.com/qwe321qwe321qwe321/efae4569576006624c34f23b2dd76a58">修改後的版本</a>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># Customize those three lines with your repository and credentials:</span><span class="token assign-left variable">REPO</span><span class="token operator">=</span>https://api.github.com/repos/OWNER/REPO<span class="token assign-left variable">GITHUB_USER</span><span class="token operator">=</span>your-github-user-name<span class="token assign-left variable">GITHUB_TOKEN</span><span class="token operator">=</span>token-with-workflow-rights-on-repo <span class="token comment"># 這個token需要repo相關的權限</span><span class="token comment"># Number of most recent versions to keep for each artifact:</span><span class="token assign-left variable">KEEP</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment"># 保留的前N新的版本數量</span><span class="token comment"># A shortcut to call GitHub API.</span><span class="token function-name function">ghapi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">curl</span> --silent --location --user <span class="token variable">$GITHUB_USER</span><span class="token builtin class-name">:</span><span class="token variable">$GITHUB_TOKEN</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment"># A temporary file which receives HTTP response headers.</span><span class="token assign-left variable">TMPFILE</span><span class="token operator">=</span>/tmp/tmp.<span class="token variable">$$</span><span class="token comment"># An associative array, key: artifact name, value: number of artifacts of that name.</span><span class="token builtin class-name">declare</span> -A ARTCOUNT<span class="token comment"># Process all artifacts on this repository, loop on returned "pages".</span><span class="token assign-left variable">URL</span><span class="token operator">=</span><span class="token variable">$REPO</span>/actions/artifacts<span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$URL</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># Get current page, get response headers in a temporary file.</span>    <span class="token assign-left variable">JSON</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>ghapi --dump-header $TMPFILE <span class="token string">"<span class="token variable">$URL</span>"</span><span class="token variable">)</span></span>    <span class="token comment"># Get URL of next page. Will be empty if we are at the last page.</span>    <span class="token assign-left variable">URL</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token string">'^Link:'</span> <span class="token string">"<span class="token variable">$TMPFILE</span>"</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">','</span> <span class="token string">'\n'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rel="next"'</span> <span class="token operator">|</span> <span class="token function">head</span> -1 <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'s/.*&lt;//'</span> -e <span class="token string">'s/>.*//'</span><span class="token variable">)</span></span>    <span class="token function">rm</span> -f <span class="token variable">$TMPFILE</span>    <span class="token comment"># Number of artifacts on this page:</span>    <span class="token assign-left variable">COUNT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $<span class="token punctuation">(</span>jq <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>$JSON <span class="token operator">-</span>r '.artifacts <span class="token operator">|</span> length'<span class="token punctuation">)</span> <span class="token variable">))</span></span> <span class="token comment"># 這裡是取得artifact的數量</span>    <span class="token comment"># Loop on all artifacts on this page.</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> $i <span class="token operator">&lt;</span> $COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token comment"># Get name of artifact and count instances of this name.</span>        <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq <span class="token operator">&lt;&lt;&lt;</span>$JSON -r <span class="token string">".artifacts[<span class="token variable">$i</span>].name?"</span><span class="token variable">)</span></span> <span class="token comment"># 這裡是取得第i個artifact的名稱</span>        ARTCOUNT<span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $<span class="token punctuation">((</span> $&#123;ARTCOUNT[$name]&#125; <span class="token variable">))</span></span> + <span class="token number">1</span><span class="token punctuation">))</span> <span class="token comment"># 以名稱為key，儲存目前有多少個相同名稱的artifacts</span><span class="token comment">#printf "#%d %s - %d\n" $i "$name" $&#123;ARTCOUNT[$name]&#125;</span>        <span class="token comment"># Check if we must delete this one.</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;ARTCOUNT<span class="token punctuation">[</span>$name<span class="token punctuation">]</span>&#125;</span> -gt <span class="token variable">$KEEP</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token comment">#若超過$KEEP的量則刪除</span>            <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq <span class="token operator">&lt;&lt;&lt;</span>$JSON -r <span class="token string">".artifacts[<span class="token variable">$i</span>].id?"</span><span class="token variable">)</span></span> <span class="token comment"># 取得id以便得到url</span>            <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $<span class="token punctuation">(</span>jq <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>$JSON <span class="token operator">-</span>r ".artifacts[$i].size_in_bytes<span class="token operator">?</span>"<span class="token punctuation">)</span> <span class="token variable">))</span></span>            <span class="token builtin class-name">printf</span> <span class="token string">"Deleting %s #%d, %d bytes<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token variable">$&#123;ARTCOUNT<span class="token punctuation">[</span>$name<span class="token punctuation">]</span>&#125;</span> <span class="token variable">$size</span>            ghapi -X DELETE <span class="token variable">$REPO</span>/actions/artifacts/<span class="token variable">$id</span> <span class="token comment"># DELETE API</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>參數設定好後直接運行即可清除多餘的Artifacts。</p><p>注意DELETE API需要額外的存取repo權限，所以需要去申請一個personal access token，或是直接用上一篇發送<code>repository_dispath</code>用的那組token也行。</p><h1 id="整合github-actions"><a class="markdownIt-Anchor" href="#整合github-actions"></a> 整合Github Actions</h1><p>有了腳本以後，再來就需要把腳本整合到Action內，最好是在完成上傳artifact以後執行清除腳本。</p><h2 id="將token加入secrets"><a class="markdownIt-Anchor" href="#將token加入secrets"></a> <s>將Token加入Secrets</s></h2><p>因為我們不希望直接明碼保存personal token在repo裡，加上github也不會讓你這麼做(當你上傳token明碼時會自動撤銷該token)。</p><p><s>所以我們需要把token放到repo的secrets中，之後再從action config裡傳入shell script。</s></p><p><em>(2020/03/01更新)</em> 不需要手動做這個步驟，Github會自動產生「該repo的讀寫相關權限之token」在Secrets中命名為<code>GITHUB_TOKEN</code>(雖然你從web上看不到)，詳細請參考這篇<a href="https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token">官方文件</a>。</p><h2 id="shell-script"><a class="markdownIt-Anchor" href="#shell-script"></a> Shell Script</h2><p>再次修改剛剛上面提供的腳本，由於我希望參數化都在action的config檔裡面處理就好，而這個腳本不要帶有任何參數，所以修改一下腳本，如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># Customize those three lines with your repository and credentials:</span><span class="token comment"># Split the string "username/repo" into two parts.</span><span class="token assign-left variable">GITHUB_USER</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">'/'</span> -f1 <span class="token operator">&lt;&lt;&lt;</span> $OWNER_AND_REPO<span class="token variable">)</span></span>"</span><span class="token assign-left variable">GITHUB_REPO</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">'/'</span> -f2 <span class="token operator">&lt;&lt;&lt;</span> $OWNER_AND_REPO<span class="token variable">)</span></span>"</span><span class="token assign-left variable">GITHUB_TOKEN</span><span class="token operator">=</span><span class="token variable">$PERSONAL_TOKEN</span><span class="token assign-left variable">REPO</span><span class="token operator">=</span>https://api.github.com/repos/<span class="token variable">$GITHUB_USER</span>/<span class="token variable">$GITHUB_REPO</span><span class="token comment"># Number of most recent versions to keep for each artifact:</span><span class="token assign-left variable">KEEP</span><span class="token operator">=</span><span class="token variable">$KEEPING_COUNT</span><span class="token builtin class-name">echo</span> <span class="token environment constant">USER</span><span class="token builtin class-name">:</span> <span class="token variable">$GITHUB_USER</span><span class="token builtin class-name">echo</span> REPO: <span class="token variable">$GITHUB_REPO</span><span class="token builtin class-name">echo</span> Keep: <span class="token variable">$KEEP</span><span class="token comment"># A shortcut to call GitHub API.</span><span class="token function-name function">ghapi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">curl</span> --silent --location --user <span class="token variable">$GITHUB_USER</span><span class="token builtin class-name">:</span><span class="token variable">$GITHUB_TOKEN</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment"># A temporary file which receives HTTP response headers.</span><span class="token assign-left variable">TMPFILE</span><span class="token operator">=</span>/tmp/tmp.<span class="token variable">$$</span><span class="token comment"># An associative array, key: artifact name, value: number of artifacts of that name.</span><span class="token builtin class-name">declare</span> -A ARTCOUNT<span class="token comment"># Process all artifacts on this repository, loop on returned "pages".</span><span class="token assign-left variable">URL</span><span class="token operator">=</span><span class="token variable">$REPO</span>/actions/artifacts<span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$URL</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># Get current page, get response headers in a temporary file.</span>    <span class="token assign-left variable">JSON</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>ghapi --dump-header $TMPFILE <span class="token string">"<span class="token variable">$URL</span>"</span><span class="token variable">)</span></span>    <span class="token comment"># Get URL of next page. Will be empty if we are at the last page.</span>    <span class="token assign-left variable">URL</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token string">'^Link:'</span> <span class="token string">"<span class="token variable">$TMPFILE</span>"</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">','</span> <span class="token string">'\n'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rel="next"'</span> <span class="token operator">|</span> <span class="token function">head</span> -1 <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'s/.*&lt;//'</span> -e <span class="token string">'s/>.*//'</span><span class="token variable">)</span></span>    <span class="token function">rm</span> -f <span class="token variable">$TMPFILE</span>    <span class="token comment"># Number of artifacts on this page:</span>    <span class="token assign-left variable">COUNT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $<span class="token punctuation">(</span>jq <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>$JSON <span class="token operator">-</span>r '.artifacts <span class="token operator">|</span> length'<span class="token punctuation">)</span> <span class="token variable">))</span></span><span class="token builtin class-name">echo</span> There are <span class="token variable">$COUNT</span> artifacts <span class="token keyword">in</span> <span class="token variable">$OWNER_AND_REPO</span>    <span class="token comment"># Loop on all artifacts on this page.</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> $i <span class="token operator">&lt;</span> $COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token comment"># Get name of artifact and count instances of this name.</span>        <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq <span class="token operator">&lt;&lt;&lt;</span>$JSON -r <span class="token string">".artifacts[<span class="token variable">$i</span>].name?"</span><span class="token variable">)</span></span>        ARTCOUNT<span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $<span class="token punctuation">((</span> $&#123;ARTCOUNT[$name]&#125; <span class="token variable">))</span></span> + <span class="token number">1</span><span class="token punctuation">))</span><span class="token comment">#printf "#%d %s - %d\n" $i "$name" $&#123;ARTCOUNT[$name]&#125;</span>        <span class="token comment"># Check if we must delete this one.</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;ARTCOUNT<span class="token punctuation">[</span>$name<span class="token punctuation">]</span>&#125;</span> -gt <span class="token variable">$KEEP</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq <span class="token operator">&lt;&lt;&lt;</span>$JSON -r <span class="token string">".artifacts[<span class="token variable">$i</span>].id?"</span><span class="token variable">)</span></span>            <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $<span class="token punctuation">(</span>jq <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>$JSON <span class="token operator">-</span>r ".artifacts[$i].size_in_bytes<span class="token operator">?</span>"<span class="token punctuation">)</span> <span class="token variable">))</span></span>            <span class="token builtin class-name">printf</span> <span class="token string">"Deleting %s #%d, %d bytes<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token variable">$&#123;ARTCOUNT<span class="token punctuation">[</span>$name<span class="token punctuation">]</span>&#125;</span> <span class="token variable">$size</span>            ghapi -X DELETE <span class="token variable">$REPO</span>/actions/artifacts/<span class="token variable">$id</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第5、6行是字串切割，把&quot;owner/repo&quot;的字串切成owner和repo兩個，從<a href="https://unix.stackexchange.com/questions/312280/split-string-by-delimiter-and-get-n-th-element">這篇</a>找到如何在shell切割字串。之所以要這樣搞是因為action config那邊只能取得&quot;owner/repo&quot;這樣的字串資料。</p><p>有了這個腳本後，我把它放到<code>.github/workflows/purging-artifacts.sh</code>，因為它只跟actions有依賴關係，我不希望它出現在我的repo首頁或其他地方。</p><h2 id="action-configyaml"><a class="markdownIt-Anchor" href="#action-configyaml"></a> Action Config(YAML)</h2><p>多做一個job如下。</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">purgeArtifacts: # 清除多餘的artifacts  needs: [testAllModes] # 等到全部人跑完以後  name: Purging the redundant artifacts.  runs-on: ubuntu-latest  steps:    - uses: actions&#x2F;checkout@v2 # checkout方法用來clone本專案(repo)到裝置內。      with:        lfs: true # 要不要下載git-lfs檔，即大型檔案。    - name: Purging the redundant artifacts.      run: | # 這個|符號表示多行輸入        chmod +x .&#x2F;.github&#x2F;workflows&#x2F;purging-artifacts.sh # 改執行權限        .&#x2F;.github&#x2F;workflows&#x2F;purging-artifacts.sh # 跑寫好的shell      env:         PERSONAL_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; # 將GITHUB_TOKEN設定為環境變數        KEEPING_COUNT: 1 # 保存前N新的artifacts         OWNER_AND_REPO: $&#123;&#123; github.repository &#125;&#125; # The string combine owner and repository. For example, Codertocat&#x2F;Hello-World.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我把這段放在Tester.yml的testAllMode之後，詳情請看<a href="https://github.com/qwe321qwe321qwe321/Unity-with-Github-Actions-example/blob/642df53a38470afccf50d266f798c5575b0e866c/.github/workflows/tester.yml#L41">原始碼</a> (←但是注意這是舊版的原始碼，我還手動塞了個<code>PERSONAL_TOKEN</code>到Secrets裡面，實際上可以直接用<code>GITHUB_TOKEN</code>)。</p><h2 id="先看看成果"><a class="markdownIt-Anchor" href="#先看看成果"></a> 先看看成果</h2><p>把剛剛修改的成果push到一個新分支(branch)，只讓它觸發tester事件。</p><p>之後我們再看一次artifacts列表:</p><p><img src="/images/github_api_list_artifacts_2.png" alt="只剩8個artifacts" /></p><p>分別是:</p><ul><li>Test results for playmode</li><li>Test results for editmode</li><li>StandaloneWindows64 Build</li><li>StandaloneOSX Build</li><li>StandaloneLinux64 Build</li><li>Unity_v2018.4.13f1.alf</li></ul><p>蛤？明明只有6個。</p><p>其實是Test result都各多了一個，這不算是我預期的結果。猜想應該是當下runner那次的結果還沒更新到artifacts list上，所以purging的時候還沒有它們，因此才會多出來一組。</p><p>這樣的話也算好解決，目前想到兩個方法:</p><ol><li>多傳個當前runner生成的artifact名稱傳給purging script檢測，將該名稱的數量額外減1。</li><li>把purging的步驟移至單獨一個action，該action必須檢測其它所有actions都跑完了才執行。</li></ol><p>第2個應該比較好，因為purging畢竟是全部檢查全部清掃的script，理論上test+build之後只要最後運行一次就好了，這樣也不用跑好幾次沒意義的步驟了。</p><p><s>但是，目前先不花時間測試這些方法，現在這樣已經解決1G容量限制的大麻煩了。</s></p><p>我選擇第2個方法來修正這個問題。</p><h2 id="添加purging-action"><a class="markdownIt-Anchor" href="#添加purging-action"></a> 添加Purging Action</h2><p>我在Github上找到了 <a href="https://github.com/WyriHaximus/github-action-wait-for-status">github-action-wait-for-status</a>，它可以等待其它Actions跑完後取得status(success/failure)才繼續執行下一個step，這樣我就可以利用這個方法做Purging Artifacts。</p><p><em>但是它目前release版本只有0.1.0且star不多，感覺還不是很穩定，斟酌使用</em></p><ol><li>把原本的Tester.yml改回原樣。</li><li>添加新的config至<code>.github/workflows/purging-artifacts.yml</code>，內容如下: <pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">name: Auto Purging Artifactson:       push: &#123; &#125; # 任意push觸發(配合Tester用)      pull_request: &#123; branches: [master] &#125; # 僅在pull request to master時觸發(配合Builder使用)   jobs:  autoPurge:    runs-on: ubuntu-latest    steps:      - name: &#39;Wait for status checks&#39;        id: waitforstatuschecks        uses: &quot;WyriHaximus&#x2F;github-action-wait-for-status@0.1.0&quot;        with:              ignoreActions: autoPurge # 略過檢查自己              checkInterval: 13 # 每13秒檢查一次            env:          GITHUB_TOKEN: &quot;$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;&quot;      - uses: actions&#x2F;checkout@v2 # checkout方法用來clone本專案(repo)到裝置內。      - name: Purging the redundant artifacts.        run: | # 這個|符號表示多行輸入          chmod +x .&#x2F;.github&#x2F;workflows&#x2F;purging-artifacts.sh # 改執行權限          .&#x2F;.github&#x2F;workflows&#x2F;purging-artifacts.sh # 跑寫好的shell        env:           PERSONAL_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; # 將GITHUB_TOKEN設定為環境變數          KEEPING_COUNT: 1 # 保存前N新的artifacts           OWNER_AND_REPO: $&#123;&#123; github.repository &#125;&#125; # The string combine owner and repository. For example, Codertocat&#x2F;Hello-World.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>完成，commit並push上去。</li></ol><h1 id="成果"><a class="markdownIt-Anchor" href="#成果"></a> 成果</h1><p>等跑完action後，再打開一次artifacts列表。</p><p><img src="/images/github_api_artifacts_2.png" alt="剩6個了" /></p><p>這樣就正確無誤了，同名的artifacts只保留最新的一份。</p><p>這樣應該算是成功透過<strong>保留最少的檔案</strong>來避免塞爆1G容量限制了。</p><h1 id="專案網址"><a class="markdownIt-Anchor" href="#專案網址"></a> 專案網址</h1><p>Github: <a href="https://github.com/qwe321qwe321qwe321/Unity-with-Github-Actions-example/tree/purging-artifacts">https://github.com/qwe321qwe321qwe321/Unity-with-Github-Actions-example/tree/purging-artifacts</a></p><h1 id="參考網站"><a class="markdownIt-Anchor" href="#參考網站"></a> 參考網站</h1><ul><li><a href="https://github.community/t5/GitHub-Actions/Delete-artifacts/td-p/38188">https://github.community/t5/GitHub-Actions/Delete-artifacts/td-p/38188</a></li><li><a href="https://developer.github.com/v3/actions/artifacts/#delete-an-artifact">https://developer.github.com/v3/actions/artifacts/#delete-an-artifact</a></li><li><a href="https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0">https://gist.github.com/lelegard/6a428f67ee08e86d0c2f1af3f4a633d0</a></li><li><a href="https://unix.stackexchange.com/questions/312280/split-string-by-delimiter-and-get-n-th-element">https://unix.stackexchange.com/questions/312280/split-string-by-delimiter-and-get-n-th-element</a></li></ul>]]></content>
    
    
    <summary type="html">這篇接續上一篇 CI in Unity using Github Actions 使用Github Actions自動化測試建置Unity專案 後面所提及的容量限制問題。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="Github" scheme="https://qwe321qwe321qwe321.github.io/tags/Github/"/>
    
    <category term="CI/CD" scheme="https://qwe321qwe321qwe321.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>用 Hexo+Github 部屬靜態 Blog</title>
    <link href="https://qwe321qwe321qwe321.github.io/2020/02/26/%E7%94%A8Hexo-Github%E9%83%A8%E5%B1%AC%E9%9D%9C%E6%85%8BBlog/"/>
    <id>https://qwe321qwe321qwe321.github.io/2020/02/26/%E7%94%A8Hexo-Github%E9%83%A8%E5%B1%AC%E9%9D%9C%E6%85%8BBlog/</id>
    <published>2020-02-26T15:27:00.000Z</published>
    <updated>2020-02-26T15:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>這篇文單純記錄用hexo在github上架設靜態網站遇到的問題以及一些指令和輔助工具，以防忘記。</p><p>另外這也是第一篇用<a href="https://github.com/jaredly/hexo-admin">Hexo Admin</a>打的文章，作為嘗試。</p><span id="more"></span><h1 id="安裝hexo"><a class="markdownIt-Anchor" href="#安裝hexo"></a> 安裝Hexo</h1><p>其實不用多作介紹，網路上查的到很多教學，這邊就隨便放幾個:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a></li><li><a href="https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db">如何搭建個人 Blog 使用 Hexo + Gitpage</a></li></ul><p>甚至Hexo官網就有很齊全的教學了。</p><ul><li><a href="https://hexo.io/zh-tw/docs/">Hexo: 開始使用</a></li></ul><p>所以就不多作介紹了。</p><p>但這邊有個小問題當初卡了我一陣子，是語言和時區(timezone)到底要寫什麼才合法，<br />教學不是沒寫就是對岸的教學。總之是設定成這樣:</p><pre class="line-numbers language-none"><code class="language-none">language: zh-twtimezone: &#39;Asia&#x2F;Taipei&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="commands"><a class="markdownIt-Anchor" href="#commands"></a> Commands</h1><p><em>前提是該設定的都設定好了，如部署設定之類的。</em></p><h2 id="生成架設部署網站"><a class="markdownIt-Anchor" href="#生成架設部署網站"></a> 生成/架設/部署網站</h2><h3 id="生成靜態網頁"><a class="markdownIt-Anchor" href="#生成靜態網頁"></a> 生成靜態網頁</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或用縮寫</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>-d</code>參數會在生成後進行部署(deploy)。</p><h3 id="架設在local端"><a class="markdownIt-Anchor" href="#架設在local端"></a> 架設在Local端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或用縮寫</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>便會啟動伺服器，預設是 <a href="http://localhost:4000/">http://localhost:4000/</a></p><p>參數不常用，有興趣就<a href="https://hexo.io/zh-tw/docs/commands">參考官方文件</a>。</p><h3 id="部署到遠端github"><a class="markdownIt-Anchor" href="#部署到遠端github"></a> 部署到遠端(Github)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy <span class="token punctuation">[</span>-g<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或用縮寫</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d <span class="token punctuation">[</span>-g<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>-g</code>參數會在部署網站前先產生靜態檔案。</p><p>使用這項指令前要先設定好部署到github，之後只要輸入這個指令就會自動commit並push上去。如圖</p><p><img src="/images/hexo_deploy_to_github.png" alt="會自動commit以及push至github上upload successful" /></p><h3 id="清除快取以及靜態檔案"><a class="markdownIt-Anchor" href="#清除快取以及靜態檔案"></a> 清除快取以及靜態檔案</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有些檔案更改後再次generate也不會修改，需要先清除才行。</p><h2 id="寫作"><a class="markdownIt-Anchor" href="#寫作"></a> 寫作</h2><h3 id="建立文章"><a class="markdownIt-Anchor" href="#建立文章"></a> 建立文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立一篇新的文章。如果沒有設定 layout 的話，則會使用 _config.yml 中的 default_layout 設定代替。如果標題包含空格的話，請使用引號括起來。</p><p>文章檔案放在<code>source/_posts</code>裡面</p><h4 id="layout"><a class="markdownIt-Anchor" href="#layout"></a> Layout</h4><p>Layout分為3種，<code>post</code>、<code>draft</code>、<code>page</code>。</p><ul><li><code>post</code>為一般文章存放區</li><li><code>draft</code>為草稿區，之後會用<code>publish</code>指令將草稿移至<code>post</code>。</li><li><code>page</code>為特別的頁面區，如tags、categories和about之類的頁面。</li></ul><h3 id="發表草稿"><a class="markdownIt-Anchor" href="#發表草稿"></a> 發表草稿</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>草稿檔案放在<code>source/_drafts</code>裡面。</p><h1 id="遇到的問題集"><a class="markdownIt-Anchor" href="#遇到的問題集"></a> 遇到的問題集</h1><ul><li><p>Q1. 使用某些主題時(如我現在使用的melody主題)會發生打開網頁時跳出以下訊息</p><pre class="line-numbers language-none"><code class="language-none">extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include includes&#x2F;pagination.pug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>A1. 你的環境缺少部分hexo套件，用以下指令安裝。<a href="https://github.com/jerryc127/hexo-theme-butterfly/issues/4">(參考來源)</a></p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-renderer-jade hexo-renderer-stylus --save or yarn add hexo-renderer-jade hexo-renderer-stylus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Q2. 部署上去的網站與local網站長的不同</p><p>A2. 靜態文件沒有刷新，先<code>hexo clean</code>再部署一次</p></li><li><p>Q3. 將網站添加至google搜尋結果</p><p>A3. 參考<a href="https://happyhand.github.io/2018/11/29/Hexo-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E8%AB%8B-Google-%E8%AE%93-Blog-%E7%99%BC%E5%85%89%E7%99%BC%E7%86%B1%E5%90%A7/">這篇教學</a></p></li></ul><h1 id="第三方工具"><a class="markdownIt-Anchor" href="#第三方工具"></a> 第三方工具</h1><ul><li><a href="https://help.disqus.com/en/">Disqus</a>: 靜態網站留言版，大多數的hexo主題都有直接支援，不需要改網頁內容。小缺點是目前不知道為什麼不能設定成繁中。</li><li><a href="https://github.com/jaredly/hexo-admin">Hexo Admin</a>: Hexo線上編輯器，可以直接在網頁修改文章並發佈。</li></ul><!--stackedit_data:eyJoaXN0b3J5IjpbNzczMjI0NzEyXX0=-->]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;這篇文單純記錄用hexo在github上架設靜態網站遇到的問題以及一些指令和輔助工具，以防忘記。&lt;/p&gt;
&lt;p&gt;另外這也是第一篇用&lt;a href=&quot;https://github.com/jaredly/hexo-admin&quot;&gt;Hexo Admin&lt;/a&gt;打的文章，作為嘗試。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://qwe321qwe321qwe321.github.io/tags/Github/"/>
    
    <category term="Hexo" scheme="https://qwe321qwe321qwe321.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>CI in Unity using Github Actions 使用 Github Actions 自動化測試建置 Unity 專案</title>
    <link href="https://qwe321qwe321qwe321.github.io/2020/02/26/CI-in-Unity-using-GithubAction/"/>
    <id>https://qwe321qwe321qwe321.github.io/2020/02/26/CI-in-Unity-using-GithubAction/</id>
    <published>2020-02-26T11:45:00.000Z</published>
    <updated>2020-02-26T11:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>最近發現了 Github 的新功能 <strong>Action</strong>，它用作 <a href="https://ithelp.ithome.com.tw/articles/10219083">CI/CD</a> 服務，以 Unity 來說只需要 CI(Continuos Integration)。</p><p>我最早接觸到 CI/CD 概念的是 LAB 的學長教的，當時用的是 Jekins 且是架在LAB的電腦上。但是最後那個專案其實也沒在用 CI 和 Unit Test，單純是架爽的當經驗值。<br />之後我所接觸的專案都沒再碰這塊了，感覺是 web 相關或是大公司才會比較用到。另一方面是我也沒租 VPS 服務或有一台電腦給我架伺服器，所以一直沒機會再碰這東西。</p><p>但這次的 Github Action 不同，他提供的是「雲端服務」，也就是說我們不需要有自己的伺服器，它免費提供各平台的裝置供我們使用。</p><span id="more"></span><p>雖然聽說 <a href="https://docs.gitlab.com/ee/ci/">Gitlab</a> 早有這功能，但我一直沒有機會轉去使用 Gitlab，畢竟 Github 都給我免費的Pro會員了，先用完再說。</p><p>這篇單純記錄我遇到的問題與解決過程，廢話太多可以直接下拉至<a href="#%E6%88%90%E6%9E%9C%E7%95%AB%E9%9D%A2">成果</a>或<a href="#%E5%B0%88%E6%A1%88%E7%B6%B2%E5%9D%80">專案網址</a></p><h1 id="the-issues-of-ci-in-unity"><a class="markdownIt-Anchor" href="#the-issues-of-ci-in-unity"></a> The issues of CI in Unity</h1><p>花了幾天碰了這坑，遇到不少問題，絕大多數應該是Unity本身的問題。</p><h2 id="授權-activation-license"><a class="markdownIt-Anchor" href="#授權-activation-license"></a> 授權 Activation License</h2><p>我當初用 Jekins 的年代還沒有這東西，印象是 Personal 版不需要帳密也能直接編譯(?)<br />現在版本的 Unity 不論 Personal 還是 Pro 通通都要登入並申請授權，即使以 Personal 版本來說這件事情根本不重要(反正都免費)。<br />這導致用 Batch compile 的問題很多，可以 Google 到一堆類似問題，而且到現在我也還沒有一個完美解。</p><p>目前的方法是用 Unity 的離線授權方法，如下:</p><ol><li>先在你的虛擬機/ Docker 上取得「申請授權檔」，通常叫 Unity20XX.X.X.alf ，依版本而定。</li><li>前往 <a href="https://license.unity3d.com/manual">Unity 授權網站</a>，登入後上傳剛剛那個 alf 檔。</li><li>取得 Unit_v20XX.X.ulf 檔，即我們需要的手動授權檔。</li><li>使用 Unity batch 時加入參數 <code>-manualLicenseFile $FILE_PATH</code> 即可完成授權。</li></ol><p>但是這方法還是很爛，因為這個授權檔會過期( Expired )，不確定確切時間，約莫 1~2 個禮拜就要更換一次。</p><blockquote><p>那不要用離線授權，直接用帳密的形式跑 unity batch mode 呢？</p></blockquote><p>沒用，因為不明原因， Batch mode 無法自動更新 License。<br />會彈出以下訊息:</p><pre class="line-numbers language-none"><code class="language-none">Cancelling DisplayDialog: Failed to activate&#x2F;update license. Timeout occured while trying to update license. Please try again later or contact support@unity3d.comThis should not be called in batch mode.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Google 了一番沒有好的解決方法就作罷。</p><p>另外可以看看這篇在 Unity 論壇上的討論: <a href="https://forum.unity.com/threads/my-disappointing-experience-using-unity-in-a-ci-pipeline.737678/">My disappointing experience using Unity in a CI pipeline</a>，依照官方回應看來是只支援 plus / pro 版本的 auto-activate， personal 版就下去。</p><blockquote><p>那有沒有機會用爬蟲的形式取得 alf 檔完成自動補授權呢？</p></blockquote><p>目前還沒試過，雖然內心覺得應該可行，但發現別人包好的插件都沒有包含這塊，所以估計有什麼大坑，總之沒什麼把握。</p><p>這邊有在 github 上找到幾個類似做法的 repo，但是我嘗試過都沒辦法用了，等有心人去改吧。</p><p><a href="https://github.com/MizoTake/unity-license-activate">https://github.com/MizoTake/unity-license-activate</a> - NodeJs 寫的，已失效。<br /><a href="https://github.com/RedpointGames/UnityAutomaticLicensor">https://github.com/RedpointGames/UnityAutomaticLicensor</a> - C# 寫的，因為只支援 windows 沒試過。</p><h1 id="github-action"><a class="markdownIt-Anchor" href="#github-action"></a> Github Action</h1><p>回到開頭所說的 Action 服務，要在 Unity 使用這個服務我使用了 webbertakken 寫的 Unity-Actions。</p><ul><li><a href="https://github.com/webbertakken/unity-actions">Unity Actions</a> - 大合集<ul><li><a href="https://github.com/marketplace/actions/unity-request-activation-file">Request Activation File</a> - 自動取得 alf 檔(申請授權檔)。</li><li><a href="https://github.com/marketplace/actions/unity-test-runner">Test Runner</a> - Unit Test for PlayMode and EditMode.</li><li><a href="https://github.com/marketplace/actions/unity-builder">Builder</a> - Build Executable for multi-platform.</li></ul></li></ul><h2 id="usage"><a class="markdownIt-Anchor" href="#usage"></a> Usage</h2><p>這裡先用 Request Activation File 下面所給的 Usage code 來看。</p><p>先創一個檔案放至你的 repo 目錄中 <code>.github/workflows/activation.yml</code>。<br />內容如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Acquire activation file <span class="token comment"># 該Action的名稱，將顯示在Github Action的頁面UI</span><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span> <span class="token comment">#觸發Action的條件，目前是只要有任何push就會觸發</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span> <span class="token comment"># 工作項目，可能平行處理。</span>  <span class="token key atrule">activation</span><span class="token punctuation">:</span> <span class="token comment"># 工作項目的變數名</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Request manual activation file 🔑 <span class="token comment"># 工作項目的顯示名稱，將顯示在Action頁面UI上。</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># 運行的裝置</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span> <span class="token comment"># 步驟，將照順序跑</span>        <span class="token comment"># Request manual activation file</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Request manual activation file <span class="token comment"># 顯示名稱</span>          <span class="token key atrule">id</span><span class="token punctuation">:</span> getManualLicenseFile <span class="token comment"># 變數名</span>          <span class="token key atrule">uses</span><span class="token punctuation">:</span> webbertakken/unity<span class="token punctuation">-</span>request<span class="token punctuation">-</span>manual<span class="token punctuation">-</span>activation<span class="token punctuation">-</span>file@v1.1 <span class="token comment"># 引用外部方法。</span>          <span class="token key atrule">with</span><span class="token punctuation">:</span> <span class="token comment"># with用於輸入參數，可想像成上面是一個叫getManualLicenseFile()的函數/方法</span>            <span class="token key atrule">unityVersion</span><span class="token punctuation">:</span> 2018.4.13f1 <span class="token comment"># 參數，用於輸入進上方的函數/方法。</span>        <span class="token comment"># Upload artifact (Unity_v20XX.X.XXXX.alf)</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Expose as artifact <span class="token comment"># 顯示名稱</span>          <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>artifact@v1 <span class="token comment"># 引用外部方法，該方法為將指定路徑下的檔案上傳為artifact。</span>          <span class="token key atrule">with</span><span class="token punctuation">:</span> <span class="token comment"># 參數</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> steps.getManualLicenseFile.outputs.filePath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 引用上面step1的輸出值(outputs)</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> steps.getManualLicenseFile.outputs.filePath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 引用上面step1的輸出值(outputs)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Github Action的config使用 <a href="https://zh.wikipedia.org/wiki/YAML">YAML</a> 格式來撰寫，這邊就不說YAML的各個語法如何撰寫，只針對我們需要知道的訊息解釋。</p></blockquote><p>我在每一行都加上了註解，需要重點注意的是第 2 行的<code>on</code>、第 6 行的 <code>runs-on</code> 以及第 14 行以下的 <code>Artifact</code>。</p><ul><li>on: 描述該 Action 是如何被觸發的，參考接下來的主題 <a href="#Trigger-Methods">Trigger Methods</a>。</li><li>runs-on: 描述該 Action 將會運行在哪個裝置上，可參考官網給的<a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on">裝置列表</a>。<ul><li>基本上我們都直接用ubuntu-latest運行，之後在裡面用docker跑我們要的環境即可。</li></ul></li><li>Artifact: 直翻是人工製品，在 CI 領域就只是輸出檔(可能有其他意義歡迎糾正我)。它將會顯示在 Action 頁面中供使用者下載，與 release 頁面的 package 相似。<ul><li>在上面情況是用來輸出 alf 檔給我們下載用。</li></ul></li></ul><h2 id="trigger-methods"><a class="markdownIt-Anchor" href="#trigger-methods"></a> Trigger Methods</h2><p>觸發 Action 的方式，這裡我只列下幾個我有用到的，詳情可以參考 <a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows">Github 官方教學</a>。</p><ol><li>push: 在任何 push 指令後觸發。非常實用，CI 的目標就是要在專案變更時重新 build 一次確認運行是否正確。<ul><li>可以加上 branches 參數，使得它只會在你想要的 branch 被 push 時觸發，如:</li></ul> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token comment"># Trigger the workflow on push</span>  <span class="token comment"># but only for the master branch</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master      <span class="token punctuation">-</span> branch_A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request">pull_request</a>: 在任何 pull request 發生時觸發。<ul><li>除了可以加上 branches 參數，還可以加上 types 參數來描述更細節的觸發方法。</li></ul> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>      <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span> <span class="token comment"># 表示如果其它branch開了一個pull request to master時觸發，但它仍然是執行在其它branch上。</span>      <span class="token key atrule">types</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>assigned<span class="token punctuation">,</span> opened<span class="token punctuation">,</span> synchronize<span class="token punctuation">,</span> reopened<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意 YAML 格式要描述 multi-value 時有兩種方法:</p><ol><li>寫成單行的 [master, branch_A] 陣列(Array)形式</li><li>或是多行的清單(List)形式，如下</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> master<span class="token punctuation">-</span> branch_A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外注意沒有-符號就不是清單(List)，而是類似類別(Class)形式的欄位(Field)或屬性(Property)。</p></blockquote></li><li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows#external-events-repository_dispatch">repository_dispatch</a>: 由API收到特定request後觸發，也是唯一一個可以從Github以外觸發Action的方法。<ul><li>外部呼叫的 API 細節可參考<a href="https://developer.github.com/v3/repos/#create-a-repository-dispatch-event">官方文件</a>，但我覺得官方文件寫得很爛，實際上是看<a href="http://www.btellez.com/posts/triggering-github-actions-with-webhooks.html">這篇</a>才成功。</li><li>這邊我就照搬方法，如下:<ol><li>先申請Personal Access Token才能Call API</li><li>進Github帳戶Settings&gt;Developer settings&gt;Personal access tokens</li><li>Generate new token，命名note然後把repo部分全勾並Generate token。</li><li>完成後會顯示你的token，請先複製好，因為重新整理後就再也看不到，只能重新生成。</li><li>之後呼叫API要用到curl，linux跟mac應該都有內建，windows比較麻煩點要先安裝個bash。</li><li>總之有了curl之後打開bash輸入以下指令<ul><li>把TOKEN_VALUE_HERE換成剛剛上面複製的token</li><li>:owner換成你的github帳號</li><li>:repo換成你的repo名稱</li><li>CUSTOM_ACTION_NAME_HERE換成你想要傳入的event_type參數，這個參數的值可以從Action端接收到。</li></ul></li></ol>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -X POST https://api.github.com/repos/:owner/:repo/dispatches <span class="token punctuation">\</span>-H <span class="token string">'Accept: application/vnd.github.everest-preview+json'</span> <span class="token punctuation">\</span>-H <span class="token string">'Authorization: token TOKEN_VALUE_HERE'</span> <span class="token punctuation">\</span>--data <span class="token string">'&#123;"event_type": "CUSTOM_ACTION_NAME_HERE"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>送出，沒出錯就成了，有出錯通常是token的權限錯誤(Bad Authorization)之類的就回去github檢查。</li></ol><blockquote><p>如果你發現你每次commit後你的token就莫名其妙消失/撤銷了，那要注意一下你是否有把你的token給commit進去了。<br />Github在這方面有保護機制，只要你commit的資料有包含token，它就會立刻把該token撤銷掉以防被惡意使用。<br />參考來源: <a href="https://stackoverflow.com/a/55820223">這篇</a>以及親身經歷。</p></blockquote></li></ul></li></ol><h2 id="1-安裝request-activation-file並手動授權"><a class="markdownIt-Anchor" href="#1-安裝request-activation-file並手動授權"></a> 1. 安裝Request-Activation-File並手動授權</h2><ol><li>先安裝Request Activation File，步驟如前面說的Usage。</li><li>想辦法運行Activation(以上面的範例來說當你push這個檔案上去時應該就會觸發了)，並從Action頁面中的Artifacts裡面下載alf檔。</li><li>手動前往<a href="https://license.unity3d.com/manual">Unity授權網站</a>，登入後上傳剛剛那個alf檔並下載ulf檔。</li><li>將ulf檔的內容全部複製。</li><li>打開你的repo頁面，到Settings&gt;Secrets&gt;Add a new secret。</li><li>命名UNITY_LICENSE，內容直接貼上第3點所複製的內容，然後保存。</li></ol><h2 id="2-安裝test-runner"><a class="markdownIt-Anchor" href="#2-安裝test-runner"></a> 2. 安裝Test-Runner</h2><ol><li>創個yml檔放在repo目錄中的<code>.github/workflows/tester.yml</code> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Tester<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span> <span class="token comment"># 任何push都會觸發</span><span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token comment"># 環境變數</span>  <span class="token key atrule">UNITY_LICENSE</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.UNITY_LICENSE <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 將UNITY_LICENSE設定為存在secrets中的UNITY_LICENSE</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">testAllModes</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Test in $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.testMode <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> on version $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.unityVersion <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># matrix.testmode以及matrix.unityVersion在下面有定義</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest     <span class="token key atrule">strategy</span><span class="token punctuation">:</span> <span class="token comment"># 主要用matrix來分割job，以及帶有部分參數</span>      <span class="token key atrule">fail-fast</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># fail-fast若為true時，任意一個matrix中的job失敗後會立刻停止所有job的運作。</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span> <span class="token comment"># matrix用於分割job，它可以將一個job分成好幾個，數量由它的參數個數而定。以這裡為例，一共會有1*1*2=2個job。</span>        <span class="token key atrule">projectPath</span><span class="token punctuation">:</span> <span class="token comment"># repo中unity project的相對路徑，若有多個project需要測試可以加在下面。</span>          <span class="token punctuation">-</span> project        <span class="token key atrule">unityVersion</span><span class="token punctuation">:</span> <span class="token comment"># unity的版本，若有多個版本需要測試可以加在下面。</span>          <span class="token punctuation">-</span> 2018.4.13f1        <span class="token key atrule">testMode</span><span class="token punctuation">:</span> <span class="token comment"># 測試模式，一般來說只有playmode和editmode，可以依照需求註解掉不需要的。</span>          <span class="token punctuation">-</span> playmode          <span class="token punctuation">-</span> editmode    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2 <span class="token comment"># checkout方法用來clone本專案(repo)到裝置內。</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">lfs</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 要不要下載git-lfs檔，即大型檔案。</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v1 <span class="token comment"># cache方法用於儲存/還原快取檔，用以加速運行。</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.projectPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/Library <span class="token comment"># 這裡我們用來快取Unity的Library資料夾，以防每次重開專案都要花時間建置Library資料夾。</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> Library<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.projectPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># key即identifier，存取時需要。</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> webbertakken/unity<span class="token punctuation">-</span>test<span class="token punctuation">-</span>runner@v1.4 <span class="token comment"># test runner</span>        <span class="token key atrule">id</span><span class="token punctuation">:</span> tests        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">projectPath</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.projectPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">unityVersion</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.unityVersion <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">testMode</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.testMode <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">artifactsPath</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.testMode <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>TestResult      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>artifact@v1 <span class="token comment"># 上傳artifacts</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> Test results for $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.testMode <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 顯示名稱</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> steps.tests.outputs.artifactsPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 從上一步的輸出路徑中取得檔案</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>把一些設定改成自己需求，如projectPath、unityVersion、testMode。</li><li>push上去即可運行。</li></ol><blockquote><p>Unity專案可以用NUnit寫Unit Test來測試，至於NUnit該如何使用請另找資源，這篇不含NUnit教學。</p></blockquote><h2 id="3-安裝builder"><a class="markdownIt-Anchor" href="#3-安裝builder"></a> 3. 安裝Builder</h2><ol><li>創個yml檔放在repo目錄中的<code>.github/workflows/builder.yml</code> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Builder<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token comment"># 僅在pull request to master時觸發</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token comment"># 僅在push to master時觸發</span><span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token comment"># 環境變數</span>  <span class="token key atrule">UNITY_LICENSE</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.UNITY_LICENSE <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 將UNITY_LICENSE設定為存在secrets中的UNITY_LICENSE</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">buildAndTestForSomePlatforms</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Build for $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.targetPlatform <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> on version $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.unityVersion <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">fail-fast</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">projectPath</span><span class="token punctuation">:</span> <span class="token comment"># repo中unity project的相對路徑，若有多個project需要測試可以加在下面。</span>          <span class="token punctuation">-</span> project        <span class="token key atrule">unityVersion</span><span class="token punctuation">:</span>  <span class="token comment"># unity的版本，若有多個版本需要測試可以加在下面。</span>          <span class="token punctuation">-</span> 2018.4.13f1        <span class="token key atrule">targetPlatform</span><span class="token punctuation">:</span> <span class="token comment"># 測試模式，僅測試過下面三種PC平台可過，iOS和WebGL不保證運行，可以依照需求註解掉不需要的。</span>          <span class="token punctuation">-</span> StandaloneOSX <span class="token comment"># Build a macOS standalone (Intel 64-bit).</span>          <span class="token punctuation">-</span> StandaloneWindows64 <span class="token comment"># Build a Windows 64-bit standalone.</span>          <span class="token punctuation">-</span> StandaloneLinux64 <span class="token comment"># Build a Linux 64-bit standalone.</span>          <span class="token comment">#- iOS # Build an iOS player.</span>          <span class="token comment">#- WebGL # WebGL.</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2 <span class="token comment"># checkout方法用來clone本專案(repo)到裝置內。</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">lfs</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 要不要下載git-lfs檔，即大型檔案。</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v1 <span class="token comment"># cache方法用於儲存/還原快取檔，用以加速運行。</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.projectPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/Library <span class="token comment"># 這裡我們用來快取Unity的Library資料夾，以防每次重開專案都要花時間建置Library資料夾。</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> Library<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.projectPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.targetPlatform <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># key即identifier，存取時需要。</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> webbertakken/unity<span class="token punctuation">-</span>builder@v0.10 <span class="token comment"># unity builder</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">projectPath</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.projectPath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">unityVersion</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.unityVersion <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">targetPlatform</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.targetPlatform <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token comment">#customParameters: "-myParameter myValue -myBoolean -ThirdParameter andItsValue" # 自定義參數，依情況使用</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>artifact@v1 <span class="token comment"># 上傳artifacts</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.targetPlatform <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> Build <span class="token comment"># 顯示名稱</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> build <span class="token comment"># unity-builder產出的檔案路徑固定在build目錄</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>把一些設定改成自己需求，如projectPath、unityVersion、testMode。</li><li>push上去即可運行。</li></ol><h2 id="4把request-activation-file改成手動觸發"><a class="markdownIt-Anchor" href="#4把request-activation-file改成手動觸發"></a> 4.把Request-Activation-File改成手動觸發</h2><p>由於我並不需要<strong>每一次</strong>push都生出一個alf檔佔位又浪費運算效能，希望改成當我需要重新activate時才手動呼叫。所以這裡用到上面有提過的repository_dispatch來觸發。<br />修改如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Acquire activation file <span class="token comment"># 該Action的名稱，將顯示在Github Action的頁面UI</span><span class="token key atrule">on</span><span class="token punctuation">:</span> repository_dispatch  <span class="token comment">#觸發Action的條件，改為repository_dispatch觸發</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span> <span class="token comment"># 工作項目，可平行處理。</span>  <span class="token key atrule">activation</span><span class="token punctuation">:</span> <span class="token comment"># 工作項目的變數名</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Request manual activation file 🔑 <span class="token comment"># 工作項目的顯示名稱，將顯示在Action頁面UI上。</span>    <span class="token key atrule">if</span><span class="token punctuation">:</span> github.event.action == 'request_activation_file' <span class="token comment"># 判斷傳入參數是否為request_activation_file，是才會運行。注意github.event.action即curl傳入的參數event_type</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># 運行的裝置</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>        <span class="token comment"># Request manual activation file</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Request manual activation file <span class="token comment"># 顯示名稱</span>          <span class="token key atrule">id</span><span class="token punctuation">:</span> getManualLicenseFile <span class="token comment"># 變數名，內部使用</span>          <span class="token key atrule">uses</span><span class="token punctuation">:</span> webbertakken/unity<span class="token punctuation">-</span>request<span class="token punctuation">-</span>manual<span class="token punctuation">-</span>activation<span class="token punctuation">-</span>file@v1.1 <span class="token comment"># 引用外部方法。</span>          <span class="token key atrule">with</span><span class="token punctuation">:</span> <span class="token comment"># with用於輸入參數，可想像成上面是一個叫getManualLicenseFile()的函數/方法</span>            <span class="token key atrule">unityVersion</span><span class="token punctuation">:</span> 2018.4.13f1 <span class="token comment"># 參數，用於輸入進上方的函數/方法。</span>        <span class="token comment"># Upload artifact (Unity_v20XX.X.XXXX.alf)</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Expose as artifact          <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>artifact@v1 <span class="token comment"># 引用外部方法，該方法為將指定路徑下的檔案上傳為artifact。</span>          <span class="token key atrule">with</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> steps.getManualLicenseFile.outputs.filePath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 引用上面step1的輸出值(outputs)</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> steps.getManualLicenseFile.outputs.filePath <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 引用上面step1的輸出值(outputs)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意第2行與第6行即可。</strong></p><p>修改後記得Push上去。<br />之後用curl呼叫API的<code>event_type</code>改為<code>request_activation_file</code>，送出即觸發Action。</p><h1 id="成果畫面"><a class="markdownIt-Anchor" href="#成果畫面"></a> 成果畫面</h1><p>任意commit並push上去至master後自動運行Tester和Builder。</p><h2 id="unit-test"><a class="markdownIt-Anchor" href="#unit-test"></a> Unit Test</h2><p>測試後將成果輸出至artifacts。<br /><img src="https://i.imgur.com/3mVVstT.jpg" alt="" /></p><h2 id="build-executable"><a class="markdownIt-Anchor" href="#build-executable"></a> Build Executable</h2><p>各平台的執行檔皆會輸出至artifacts。<br /><img src="https://i.imgur.com/5YmBPuA.jpg" alt="" /></p><h2 id="pull-request"><a class="markdownIt-Anchor" href="#pull-request"></a> Pull Request</h2><p>有人開啟pull request時將會自動檢查測試一輪，並顯示是否通過。<br /><img src="https://i.imgur.com/3P6eRws.jpg" alt="" /></p><h2 id="badge"><a class="markdownIt-Anchor" href="#badge"></a> Badge</h2><p>可以在repo首頁的readme中加入badge，以便查看專案狀態。<br /><img src="https://i.imgur.com/Tw8bhPe.jpg" alt="" /></p><h1 id="專案網址"><a class="markdownIt-Anchor" href="#專案網址"></a> 專案網址</h1><p><a href="https://github.com/qwe321qwe321qwe321/GithubActionTest">https://github.com/qwe321qwe321qwe321/GithubActionTest</a></p><h1 id="後記"><a class="markdownIt-Anchor" href="#後記"></a> 後記</h1><p>目前方法的缺點還是挺嚴重的，第一是前面提過的<strong>手動授權</strong>，第二是<strong>Github的免費Storage只有1G</strong>，Build產出的執行檔通常都100M以上，三平台就300M，這樣用不到幾次就會塞滿了。</p><p>手動授權的部分目前還沒解決，考慮用爬蟲的方式可以從上面提到的github專案下去修改。</p><p>儲存空間的問題有解決了，記錄在另外一篇: <a href="/2020/02/27/Solve-the-problem-of-redundant-artifacts-in-Github-Actions/">Solve the problem of the redundant artifacts in Github Actions 清除Github Actions中多餘的Artifacts</a>試試看。<br />儲存空間的問題目前有找到一個自動清除artifacts的方法，等測試完可行再記錄。</p><h1 id="參考網站"><a class="markdownIt-Anchor" href="#參考網站"></a> 參考網站</h1><ul><li><a href="https://github.com/webbertakken/unity-actions">https://github.com/webbertakken/unity-actions</a></li><li><a href="http://www.btellez.com/posts/triggering-github-actions-with-webhooks.html">Setting up Webhooks for Github Actions</a></li><li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows">Github Actions: Events that trigger workflows</a></li></ul><!--stackedit_data:eyJoaXN0b3J5IjpbLTE1MTI2MjIxMTRdfQ==-->]]></content>
    
    
    <summary type="html">最近發現了 Github 的新功能 **Action**，它用作 [CI/CD](https://ithelp.ithome.com.tw/articles/10219083) 服務，以 Unity 來說只需要 CI(Continuos Integration)。</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="Github" scheme="https://qwe321qwe321qwe321.github.io/tags/Github/"/>
    
    <category term="CI/CD" scheme="https://qwe321qwe321qwe321.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>用 PlayerLoopSystem 理解 Unity 主迴圈，並解釋 SyncTransforms 的執行時機</title>
    <link href="https://qwe321qwe321qwe321.github.io/2019/11/17/%E7%94%A8PlayerLoopSystem%E7%90%86%E8%A7%A3Unity%E4%B8%BB%E8%BF%B4%E5%9C%88%EF%BC%8C%E4%B8%A6%E8%A7%A3%E9%87%8BSyncTransforms%E7%9A%84%E5%9F%B7%E8%A1%8C%E6%99%82%E6%A9%9F/"/>
    <id>https://qwe321qwe321qwe321.github.io/2019/11/17/%E7%94%A8PlayerLoopSystem%E7%90%86%E8%A7%A3Unity%E4%B8%BB%E8%BF%B4%E5%9C%88%EF%BC%8C%E4%B8%A6%E8%A7%A3%E9%87%8BSyncTransforms%E7%9A%84%E5%9F%B7%E8%A1%8C%E6%99%82%E6%A9%9F/</id>
    <published>2019-11-17T08:30:00.000Z</published>
    <updated>2019-11-17T08:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本篇文章撰寫於2019/11/17，版本為 Unity2018.4</em></p><h1 id="原由"><a class="markdownIt-Anchor" href="#原由"></a> 原由</h1><p>最近卡在一個問題:<br />「<a href="https://docs.unity3d.com/ScriptReference/Physics-autoSyncTransforms.html">Physics2D.autoSyncTransforms</a> = false 的情況下，Unity內部到底何時會進行 Sync？」<br />根據<a href="https://forum.unity.com/threads/physics-synctransforms-questions.487424/">官方工程師的講法</a>，如果關閉時應該是只會在FixedUpdate 以前 Sync 一次，其他時間點不會同步。<br />但經過測試，疑似在 Update 期間也會 Sync 啊？<br />偏偏Unity官網提供的<a href="https://docs.unity3d.com/2018.4/Documentation/Manual/ExecutionOrder.html">執行順序圖</a>根本沒有寫到何時Sync。</p><p>於是後來翻到了 Unity 有提供一個實驗性的底層 API : <a href="https://docs.unity3d.com/2018.4/Documentation/ScriptReference/Experimental.LowLevel.PlayerLoop.html">PlayerLoop</a><br />它號稱可以讓使用者修改 Unity 主迴圈，因此這對我們分析 Unity 執行順序非常有幫助。</p><span id="more"></span><h1 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h1><p>將整個主迴圈列出來:</p><pre class="line-numbers language-none"><code class="language-none">ROOT NODEInitializationPlayerUpdateTimeAsyncUploadTimeSlicedUpdateSynchronizeInputsSynchronizeStateXREarlyUpdateEarlyUpdatePollPlayerConnectionProfilerStartFrameGpuTimestampAnalyticsCoreStatsUpdateUnityWebRequestUpdateExecuteMainThreadJobsProcessMouseInWindowClearIntermediateRenderersClearLinesPresentBeforeUpdateResetFrameStatsAfterPresentUpdateAllUnityWebStreamsUpdateAsyncReadbackManagerUpdateStreamingManagerUpdateTextureStreamingManagerUpdatePreloadingRendererNotifyInvisiblePlayerCleanupCachedDataUpdateMainGameViewRectUpdateCanvasRectTransformXRUpdateUpdateInputManagerProcessRemoteInputScriptRunDelayedStartupFrameUpdateKinectDeliverIosPlatformEventsTangoUpdateDispatchEventQueueEventsDirectorSampleTimePhysicsResetInterpolatedTransformPositionSpriteAtlasManagerUpdatePerformanceAnalyticsUpdateFixedUpdateClearLinesNewInputFixedUpdateDirectorFixedSampleTimeAudioFixedUpdateScriptRunBehaviourFixedUpdateDirectorFixedUpdateLegacyFixedAnimationUpdateXRFixedUpdatePhysicsFixedUpdatePhysics2DFixedUpdateDirectorFixedUpdatePostPhysicsScriptRunDelayedFixedFrameRatePreUpdatePhysicsUpdatePhysics2DUpdateCheckTexFieldInputIMGUISendQueuedEventsNewInputUpdateSendMouseEventsAIUpdateWindUpdateUpdateVideoUpdateScriptRunBehaviourUpdateScriptRunDelayedDynamicFrameRateScriptRunDelayedTasksDirectorUpdatePreLateUpdateAIUpdatePostScriptDirectorUpdateAnimationBeginLegacyAnimationUpdateDirectorUpdateAnimationEndDirectorDeferredEvaluateUNetUpdateEndGraphicsJobsAfterScriptUpdateParticleSystemBeginUpdateAllScriptRunBehaviourLateUpdateConstraintManagerUpdatePostLateUpdatePlayerSendFrameStartedDirectorLateUpdateScriptRunDelayedDynamicFrameRatePhysicsSkinnedClothBeginUpdateUpdateRectTransformUpdateCanvasRectTransformPlayerUpdateCanvasesUpdateAudioVFXUpdateParticleSystemEndUpdateAllEndGraphicsJobsAfterScriptLateUpdateUpdateCustomRenderTexturesUpdateAllRenderersEnlightenRuntimeUpdateUpdateAllSkinnedMeshesProcessWebSendMessagesSortingGroupsUpdateUpdateVideoTexturesUpdateVideoDirectorRenderImagePlayerEmitCanvasGeometryPhysicsSkinnedClothFinishUpdateFinishFrameRenderingBatchModeUpdatePlayerSendFrameCompleteUpdateCaptureScreenshotPresentAfterDrawClearImmediateRenderersPlayerSendFramePostPresentUpdateResolutionInputEndFrameTriggerEndOfFrameCallbacksGUIClearEventsShaderHandleErrorsResetInputAxisThreadedLoadingDebugProfilerSynchronizeStatsMemoryFrameMaintenanceExecuteGameCenterCallbacksProfilerEndFrame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>蠻複雜的，需要一個視覺化的UI比較好觀察。</p><p>在網路上找到一位網友 Lotte 用 PlayerLoop 寫了一個<a href="https://www.patreon.com/posts/unity-2018-1-16336053">視覺化看主迴圈執行順序的腳本</a><br />這不但是一個很好參考的使用案例，更是一個功能強大的腳本。<br />也因此接下來就用這個腳本來修改成我要的功能。</p><p>首先，先建一個 Singleton 的測試腳本掛在有 Rigidbody2D 的物件上。<br />腳本寫了一個檢查是否 Sync 的方法，回傳 True 代表已經 Sync 了。</p><pre class="line-numbers language-cs" data-language="cs"><code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TestIfSyncTransforms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Singleton.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s_Instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Check if sync transform.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Vector2<span class="token punctuation">)</span>s_Instance<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">==</span> s_Instance<span class="token punctuation">.</span>m_Rigidbody2D<span class="token punctuation">.</span>position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Modify transform for next checking.</span>        s_Instance<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">+=</span> Vector3<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Default PlayerLoop 內將的每個 Update 之間插入一個 CustomSyncTestUpdate。</p><pre class="line-numbers language-cs" data-language="cs"><code class="language-cs"><span class="token comment">// 修改Lotte腳本內的方法</span><span class="token return-type class-name">PlayerLoopSystem</span> <span class="token function">GenerateCustomLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Note: this also resets the loop to its defalt state first.</span>    <span class="token class-name"><span class="token keyword">var</span></span> playerLoop <span class="token operator">=</span> PlayerLoop<span class="token punctuation">.</span><span class="token function">GetDefaultPlayerLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hasCustomPlayerLoop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 僅插入從FixedUpdate至Update之間的所有內部Update</span>    <span class="token class-name"><span class="token keyword">int</span></span> subSystemListFrom <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Fixed Update</span>    <span class="token class-name"><span class="token keyword">int</span></span> subSystemListTo <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// Update</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> subSystemListFrom<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> subSystemListTo<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> updateSystem <span class="token operator">=</span> playerLoop<span class="token punctuation">.</span>subSystemList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> newList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>PlayerLoopSystem<span class="token punctuation">></span></span><span class="token punctuation">(</span>updateSystem<span class="token punctuation">.</span>subSystemList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Insert the start event.</span>        newList<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> CustomSyncTestUpdate<span class="token punctuation">.</span><span class="token function">GetNewSystem</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; Start"</span><span class="token punctuation">,</span> updateSystem<span class="token punctuation">.</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> newList<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> subUpdate <span class="token operator">=</span> newList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            newList<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> CustomSyncTestUpdate<span class="token punctuation">.</span><span class="token function">GetNewSystem</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"After &#123;0&#125;"</span><span class="token punctuation">,</span> subUpdate<span class="token punctuation">.</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// convert the list back to an array and plug it into the Update system.</span>        updateSystem<span class="token punctuation">.</span>subSystemList <span class="token operator">=</span> newList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// dont forget to put our newly edited System back into the main player loop system!!</span>        playerLoop<span class="token punctuation">.</span>subSystemList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> updateSystem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> playerLoop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cs" data-language="cs"><code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">CustomSyncTestUpdate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">PlayerLoopSystem</span> <span class="token function">GetNewSystem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> testScope<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PlayerLoopSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomSyncTestUpdate</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            updateDelegate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">UpdateFunction</span><span class="token punctuation">(</span>testScope<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateFunction</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> testScope<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">bool</span></span> sync <span class="token operator">=</span> SyncTransformsTester<span class="token punctuation">.</span><span class="token function">TestIfSyncTransforms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sync<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 若有Sync則Log以紅字顯示</span>            Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&lt;color=red>[&#123;0&#125;]: &#123;1&#125;&lt;/color>"</span><span class="token punctuation">,</span> testScope<span class="token punctuation">,</span> sync<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"[&#123;0&#125;]: &#123;1&#125;"</span><span class="token punctuation">,</span> testScope<span class="token punctuation">,</span> sync<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入後的主迴圈長這樣:<br /><img src="https://i.imgur.com/Hif4O3o.png" alt="" /></p><p>另外在測試物件上的腳本也添加以下 Code 來檢查是否 Sync :<br />(Log 中以綠色字體顯示)</p><pre class="line-numbers language-cs" data-language="cs"><code class="language-cs"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"&lt;color=green>FixedUpdate!&lt;/color>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">bool</span></span> sync <span class="token operator">=</span> <span class="token function">TestIfSyncTransforms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sync<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&lt;color=green>[&#123;0&#125;]: &#123;1&#125;&lt;/color>"</span><span class="token punctuation">,</span> <span class="token string">"FixedUpdate"</span><span class="token punctuation">,</span> sync<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"&lt;color=green>Update!&lt;/color>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">bool</span></span> sync <span class="token operator">=</span> <span class="token function">TestIfSyncTransforms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sync<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&lt;color=green>[&#123;0&#125;]: &#123;1&#125;&lt;/color>"</span><span class="token punctuation">,</span> <span class="token string">"Update"</span><span class="token punctuation">,</span> sync<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"&lt;color=green>LateUpdate!&lt;/color>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">bool</span></span> sync <span class="token operator">=</span> <span class="token function">TestIfSyncTransforms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sync<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&lt;color=green>[&#123;0&#125;]: &#123;1&#125;&lt;/color>"</span><span class="token punctuation">,</span> <span class="token string">"Update"</span><span class="token punctuation">,</span> sync<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="測試結果"><a class="markdownIt-Anchor" href="#測試結果"></a> 測試結果</h1><p>經 Log 發現，僅在 Physics2DFixedUpdate 時更新。<br /><img src="https://i.imgur.com/tzGso3d.png" alt="" /><br />照順序來看，可以得知 Physics2DFixedUpdate 就是 InternalPhysicsUpdate。<br />而且 Sync 只會在 InternalPhysicsUpdate 的時候才更新。照工程師的說法，應該是一進去就先 Sync。<br />經測試，以 <code>Transform.position</code> 為優先，<code>Rigidbody2D.position</code> 會直接被蓋掉。</p><p>但是之前若將 <code>Rigidbody2D.Interpolation</code> 打開，會變以下結果:<br /><img src="https://i.imgur.com/b6cxaJG.png" alt="" /><br />多了個 Physics2DUpdate 的時候會 Sync。</p><p>這個 Physics2DUpdate 是每次 Update() 以前都會跑的，位於 PreUpdate 階段。<br /><img src="https://i.imgur.com/FaOWCMG.png" alt="" /><br />可以理解成，Interpolation 修改 transform.position 的地方就是這個 Physics2DUpdate。<br />所以當他發現 <code>transform.position</code> 是 dirty 狀態時會直接 Sync，而不會覆蓋過去。</p><h1 id="結論"><a class="markdownIt-Anchor" href="#結論"></a> 結論</h1><p>當你要修改 Rigidbody2D 物件的座標時，不管改 <code>Transform.position</code> 或是 <code>Rigidbody2D.position</code> 本身都可行，但有以下注意事項:</p><ul><li>若同時修改 Rigidbody 和 Transform，以 Transform 為主。</li><li>根據<a href="https://docs.unity3d.com/ScriptReference/Rigidbody-position.html">官網說明</a>，修改Transform效能較差，因為它需要多走Sync的步驟。</li><li>關閉 <code>autoSyncTransforms</code> 的情況下:<ul><li>沒有開啟 Interpolation 時，每次 InternalPhysics 執行前才會 Sync。</li><li>開啟 Interpolation 時，除了每次 InternalPhysics 執行前會 Sync 以外，每次 Update 以前也會 Sync。</li></ul></li><li>所以頻繁更新 Transform 的情況下就別開 Interpolation 了，因為有開跟沒開一樣都會被蓋掉。</li></ul><h1 id="20210829更新"><a class="markdownIt-Anchor" href="#20210829更新"></a> 2021/08/29更新</h1><p>最近在測試時發現Unity2019.4已經不是上面那個邏輯了＝＝<br />差別是不管有沒有開啟Interpolation，每次Update以前都會在PreUpdate.Physics2DUpdate階段Sync回Rigidbody。</p>]]></content>
    
    
    <summary type="html">最近卡在一個問題:
「Physics2D.autoSyncTransforms = false 的情況下，Unity內部到底何時會進行 Sync？」</summary>
    
    
    
    
    <category term="Unity" scheme="https://qwe321qwe321qwe321.github.io/tags/Unity/"/>
    
    <category term="Physics" scheme="https://qwe321qwe321qwe321.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>More Examples for Practice of Cameras in Side-Scrollers (2D Platformer)</title>
    <link href="https://qwe321qwe321qwe321.github.io/2019/11/13/More-Examples-for-Practice-of-Cameras-in-Side-Scrollers-2D-Platformer/"/>
    <id>https://qwe321qwe321qwe321.github.io/2019/11/13/More-Examples-for-Practice-of-Cameras-in-Side-Scrollers-2D-Platformer/</id>
    <published>2019-11-13T09:10:00.000Z</published>
    <updated>2019-11-13T09:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>​The purpose of this post is to show the latest case studies based on <a href="https://www.gdcvault.com/play/1022243/Scroll-Back-The-Theory-and">Scroll Back: The Theory and Practice of Cameras in Side-Scrollers</a> in GDC2015.<br />Here is the article: <a href="https://docs.google.com/document/d/1iNSQIyNpVGHeak6isbP6AHdHD50gs8MNXF1GCf08efg/pub?embedded=true#h.kskmkvkk89rz">English</a></p><p>本文目的是延續一個在GDC2015的議程<a href="https://www.gdcvault.com/play/1022243/Scroll-Back-The-Theory-and">Scroll Back: The Theory and Practice of Cameras in Side-Scrollers</a>的個案研究，以近幾年的橫板平台遊戲的攝影機行為為例。<br />這裡有Johnson大的翻譯文章可以參考: <a href="https://igdshare.org/content/gdc2015-2d-scrolling-itay-keren">中文</a></p><p><em>Warning: High Data Usage by GIFs</em><br /><em>高流量警告: 下文有大量GIF圖</em></p><span id="more"></span><h1 id="sampling-method"><a class="markdownIt-Anchor" href="#sampling-method"></a> Sampling Method</h1><p>The tool for recording and drawing: <a href="https://github.com/NickeManarin/ScreenToGif/releases">ScreenToGif</a> - an open-source and lightweight software.</p><p>我們並沒有精準地測量準確的位置與範圍，因為目的僅分析相機的行為模式，不研究實際數值上的變化。<br />We only care about the behavior of the camera instead of the changed value of the camera position. Therefore, we didn’t measure precisely, the lines and ranges are just sketched by intuition instead.</p><h1 id="case-studies-in-recent-years"><a class="markdownIt-Anchor" href="#case-studies-in-recent-years"></a> Case Studies in recent years</h1><p>目前只考慮<strong>一般左右移動</strong>的攝影機行為，<strong>不考慮</strong>特定焦點、鎖敵、多重目標情形下的攝影機行為。<br />因此，有鼠標、游標、瞄準方向等會影響攝影機行為的遊戲也先<strong>不考慮</strong>。<br />For now, we <strong>only care</strong> about <strong>the horizontal movement</strong> of cameras and <strong>don’t care</strong> about the special camera behavior, such as focusing on the enemy, multiple targets, or a special target.<br />Therefore, there is <strong>no game</strong> which has a cursor, aiming arrow or aiming symbol that may affect their camera</p><h2 id="celeste"><a class="markdownIt-Anchor" href="#celeste"></a> Celeste</h2><p><img src="https://i.imgur.com/4pzimXm.gif" alt="" /></p><h2 id="dead-cells"><a class="markdownIt-Anchor" href="#dead-cells"></a> Dead Cells</h2><p><img src="https://imgur.com/h4soFCD.gif" alt="" /></p><h2 id="deaths-gambit"><a class="markdownIt-Anchor" href="#deaths-gambit"></a> Death’s Gambit</h2><p><img src="https://imgur.com/yiTfP6l.gif" alt="" /></p><h2 id="dungeon-muchines"><a class="markdownIt-Anchor" href="#dungeon-muchines"></a> Dungeon Muchines</h2><p><img src="https://imgur.com/raz0JIn.gif" alt="" /></p><h2 id="hollow-knight"><a class="markdownIt-Anchor" href="#hollow-knight"></a> Hollow Knight</h2><p><img src="https://imgur.com/mMkwSTQ.gif" alt="" /></p><h2 id="limbo"><a class="markdownIt-Anchor" href="#limbo"></a> Limbo</h2><p><img src="https://imgur.com/ysQXv2T.gif" alt="" /></p><h2 id="momodora"><a class="markdownIt-Anchor" href="#momodora"></a> Momodora</h2><p><img src="https://imgur.com/ZdVNgL6.gif" alt="" /></p><h2 id="ori-and-the-blind-foreset"><a class="markdownIt-Anchor" href="#ori-and-the-blind-foreset"></a> Ori and the Blind Foreset</h2><p><img src="https://imgur.com/fOTNQh1.gif" alt="" /></p><h2 id="sundered"><a class="markdownIt-Anchor" href="#sundered"></a> Sundered</h2><p><img src="https://imgur.com/27HTHKK.gif" alt="" /></p><h2 id="tonhou-luna-night"><a class="markdownIt-Anchor" href="#tonhou-luna-night"></a> Tonhou Luna Night</h2><p><img src="https://imgur.com/jZcc1uX.gif" alt="" /></p><h2 id="rabi-ribi"><a class="markdownIt-Anchor" href="#rabi-ribi"></a> Rabi-Ribi</h2><p><img src="https://imgur.com/mmBhSSG.gif" alt="" /></p><h2 id="broforce"><a class="markdownIt-Anchor" href="#broforce"></a> Broforce</h2><p><img src="https://imgur.com/fE1ZzP8.gif" alt="" /></p><h2 id="terraria"><a class="markdownIt-Anchor" href="#terraria"></a> Terraria</h2><p><img src="https://imgur.com/Jj6HiOy.gif" alt="" /></p><h2 id="starbound"><a class="markdownIt-Anchor" href="#starbound"></a> Starbound</h2><p><img src="https://imgur.com/WghtRBz.gif" alt="" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​The purpose of this post is to show the latest case studies based on &lt;a href=&quot;https://www.gdcvault.com/play/1022243/Scroll-Back-The-Theory-and&quot;&gt;Scroll Back: The Theory and Practice of Cameras in Side-Scrollers&lt;/a&gt; in GDC2015.&lt;br /&gt;
Here is the article: &lt;a href=&quot;https://docs.google.com/document/d/1iNSQIyNpVGHeak6isbP6AHdHD50gs8MNXF1GCf08efg/pub?embedded=true#h.kskmkvkk89rz&quot;&gt;English&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文目的是延續一個在GDC2015的議程&lt;a href=&quot;https://www.gdcvault.com/play/1022243/Scroll-Back-The-Theory-and&quot;&gt;Scroll Back: The Theory and Practice of Cameras in Side-Scrollers&lt;/a&gt;的個案研究，以近幾年的橫板平台遊戲的攝影機行為為例。&lt;br /&gt;
這裡有Johnson大的翻譯文章可以參考: &lt;a href=&quot;https://igdshare.org/content/gdc2015-2d-scrolling-itay-keren&quot;&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning: High Data Usage by GIFs&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;高流量警告: 下文有大量GIF圖&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Game Design" scheme="https://qwe321qwe321qwe321.github.io/tags/Game-Design/"/>
    
  </entry>
  
</feed>
